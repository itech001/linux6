var tipuesearch = {
    "pages": [
        {
            "loc": "/index.html", 
            "tags": "", 
            "text": "This site is mainly for the Linux beginners to study Linux in shortest time !!!\n\nFor advance Linux users, you can ignore tutorial articles and just focus on advanced topics!!!\n\n\nYou can follow below guides:\n\n\nFor the Linux beginners\n\n\nsetup env\n\n\n\n\nFirstly you need one Linux environment for your study, the easiest way is to setup one virtual machine. I suggest you to use virtual box and download installed distribution from virtualimages.com.\n\n\nsetup virtualbox Linux OS\n\nWhen you  have Linux OS, you need install VIM and study how to use it. VIM is used when you edit any files.\n\n\ninstall VIM\n\n\nVIM introduction\n  \n\n\n\n\nstudy cmds\n\n\n\n\nAfter you have Linux OS, you can start to play all kinds of commands in terminal. You can find examples for common used commands, or check all commands manpages.\n\n\ncmds common\n\n\ncmds example\n\n\ncmds manpages\n\n\n\n\nstudy script\n\n\n\n\nWhen you are familar with some basic commands, the next step is to study shell, by shell you can complete some complex and repeat tasks. For Linux OS, the popular shell is bash.\n\n\nbash\n  \n\n\n\n\nstudy dev tools\n\n\n\n\nIf you are developers, git is necessary for you to manage your source code, and gdb also is necessary for you to debug source code.\n\n\ngit tutorial\n\n\ngit cheat-sheet\n\n\ngdb tutorial\n  \n\n\n\n\nall useful refs\n\n\n\n\nFor more reference about environment, commands and shell, you can find many  useful resources.\n\n\nuseful links\n\n\nawesome resources\n  \n\n\n\n\nFor the advanced users\n\n\ncustom env\n\n\n\n\nYou can do more customization for your environment to improve efficiency.\n\n\nvim setting\n\n\ndotfiles\n\n\nalias\n\n\nshortcut\n  \n\n\n\n\nmore script\n\n\n\n\nYou can choose perl or python for more complex tasks.\n\n\nshell_compare\n\n\nzsh\n\n\nperl\n\n\npython\n  \n\n\n\n\nmore tools\n\n\n\n\nmore tools to improve efficiency.\n\n\nfind\n\n\nxargs\n\n\ngrep\n\n\nsed\n\n\nawk\n\n\ntmux\n  \n\n\n\n\nadvanced topics\n\n\n\n\nadvanced topics about linux theory, and custom your Linux.\n\n\nadvanced topics\n\n\nlinux rss\n\n\ngithub trend\n  \n\n\n\n\ninterview questions\n\n\n\n\ncommon questions for Linux interview\n\n\ncommon\n  \n\n\n\n\nMore Help\n\n\nask questions\n\n\n\n\nany other questions, you can ask in below forums.\n\n\naskubuntu\n\n\nstackexchange\n\n\nserverfault\n  \n\n\n\n\nContribute\n\n\n\n\nIf you have any great articles and want to share with others, please send me the links, and I will add them in this site.", 
            "title": "Home"
        }, 
        {
            "loc": "/env/virtualbox/index.html", 
            "tags": "", 
            "text": "Install Linux in Virtualbox\n\n\nInstall virtualbox\n\n\n\n\nFrom \nvirtualbox\n\n\n\n\nDownload virtualbox images\n\n\n\n\nFrom \nvirtualboximages.com\n  \n\n\nYou can choose the popular linux distribution \nubuntu desktop\n\nor \ncentos desktop or server\n,\nOf course you can choose other linux distributions or install linux OS by yourself.  \n\n\n\n\nStart virtualbox\n\n\n\n\nUntil now you already have one installed linux OS.", 
            "title": "Virtualbox"
        }, 
        {
            "loc": "/env/vim_setting/index.html", 
            "tags": "", 
            "text": "VIM setting\n\n\nInstall VIM\n\n\n\n\nInstall by \u2018sudo apt-get install vim\u2019 if you use ubuntu, by \u2018sudo yum install vim\u2019 for centos.  \n\n\n\n\nInstall spf13\n\n\n\n\nInstall \nspf13\n to configure VIM automatically\nby \u2018curl http://j.mp/spf13-vim3 -L -o - | sh\u2019.\n\nor you can 'git clone https://github.com/spf13/spf13-vim.git' and then run bootstrap.sh.", 
            "title": "VIM_setting"
        }, 
        {
            "loc": "/env/vi/index.html", 
            "tags": "", 
            "text": "VIM\n\n\nModified from \nanother-vim-tutorial\n  \n\n\nAn Introduction to Vim\n\n\nVim is an open-source, powerful and configurable text editor.\n\n\nvimtutor\n\n\nThere is also a tutorial built into vim that you can study to learn more. To start the Vim tutor, just type vimtutor in a terminal.\n\n\nGetting help\n\n\nF1\n \u2014 this key will get you into the help pages of Vim from within the\nprogram, although if you are running vim inside a something like GNOME\nterminal, you might get the help pages for GNOME terminal when you use F1.\n\n\nThe following help commands will always be available:\n\n\n\n\n:help \u2014 open the help pages\n\n:q \u2014 this will close the help screen. If the help screen is not open, it will exit Vim.\n\n:help user-manual \u2014 this will open the full user manual  \n\n\n\n\nOpen Vim\n\n\nTo start Vim in Linux, just type vim in the terminal. You can optionally\nspecify a file to open or create \u2014 if the file exists it will open the file,\nand if the file does not exist, it will be created. For example:\n\n\n\n\nvim file.txt\n\n\n\n\nPressing either the letter \ni\n key or the \nINS\n key will put you into Insert\nmode where you can enter text. Push the \nESC\n key to switch to Normal mode\nwhere you can enter Vim commands.\n\n\nClosing Vim\n\n\n\n\n:q \u2014 quit Vim\n\n:wq \u2014 save file and quit Vim\n\n:q! \u2014 quit without saving  \n\n\n\n\nSaving a file in Vim\n\n\n\n\n:w \u2014 saves the current file.\n\n:w FILENAME \u2014 save the file with the filename that you provide. If you specify a different name than the filename that you originally opened, Vim will go back to the original file name if you save it another time in the same session without specifying the new file name.\n\n:saveas FILENAME \u2014 this will save the file with your new name and continue editing it under the new filename.\n\n:#,# w FILENAME \u2014 saves just text between line numbers that you specify.  \n\n\n\n\nMoving around the document\n\n\n\n\nh \u2014 moves cursor left\n\nl \u2014 moves cursor right\n\nj \u2014 moves cursor down\n\nk \u2014 moves cursor up\n\n\nw \u2014 moves cursor to beginning of next word\n\nb \u2014 moves to the beginning of previous word\n\ne \u2014 moves cursor to end of the next word\n\nge \u2014 moves to the end of the previous word\n\n$ \u2014 moves cursor to the end of line\n\n  \u2014 moves cursor to the first non-space character of line\n\n0 \u2014 pressing the number zero moves to the absolute beginning of the line\n\n[number] Shift-g \u2014 moves you to the specified line number\n\nCtrl-g \u2014 tells you what line you are on\n\ngg \u2014 go to the first line of the file\n\n[number]% \u2014 moves to to a certain percentage of the file, e.g., typing 30% moves you to 30% from the top of the file.  \n\n\n\n\nLike most Vim commands, prefix the command with a number to repeat it. So\ntyping 3w will move the cursor forward by 3 words.  \n\n\nAdding text\n\n\nVim generally starts in Normal mode. To insert text into your file, press\nthe letter \ni\n. To return to Normal mode, press the \nESC\n key, or more\nconveniently Ctrl-c or Ctrl-[.  \n\n\n\n\ni \u2014 enters insert mode, inserting new text before the point of the cursor\n\nI \u2014 moves the cursor to the beginning of the line and enters insert mode.\n\na \u2014 enters insert mode, inserting (appending) new text \nafter\n the current point of the cursor\n\nA \u2014 enters insert mode, appending text to the end of the current line\n\no \u2014 opens a line below the cursor and enters insert mode.\n\nO \u2014 opens a line above the cursor and enters insert mode  \n\n\n\n\nDeleting text\n\n\n\n\ndd \u2014 deletes the current line\n\nx \u2014 deletes one letter under the cursor\n\ndw \u2014 deletes from the cursor to the end of the word including the space\n\nde \u2014 deletes from the cursor to the end of the word not including the space\n\nd$ \u2014 deletes from cursor to the end of the current line  \n\n\n\n\nYou can tell Vim to repeat commands by giving it a number. For example, typing\n4dw will delete from the cursor to the end of the current word, plus 3 more\nwords including the space after the word. It can also be typed with the number\nin the middle like this d4w and it will do the exact same thing as the\nprevious example.\n\n\nHow to undo commands in Vim\n\n\nThis is one of the most important things to know:\n\n\n\n\nu \u2014 undo command\n\nU \u2014 undo everything on the line\n\nCTRL-r \u2014 redo command (after undoing it)  \n\n\n\n\nCopy / paste in Vim\n\n\nWhen you delete text it is stored by Vim and you replace it by putting it\nback with the \np\n key.\n\n\n\n\ny - copy\np \u2014 paste the last deleted text on the line below the cursor.\n\n\n\n\nRetreiving and inserting a file into another file\n\n\nYou can insert another text file into the current text file.\n\n\n\n\n:r FILENAME \u2014 inserts FILENAME into the current file.\n\n\n\n\nReplacing text\n\n\n\n\nr \u2014 press the letter \nr\n and then the letter that you want to replace the letter under the cursor with.\n\nShift-R \u2014 this works like the Insert key. It allows you to type on top of the text, replacing it. When done, press \nESC\n to exit.\n\n\n\n\nChanging text\n\n\n\n\ncw \u2014 change the text from the cursor to the end of the word (deletes and goes into insert mode\n\nc$ \u2014 change the text from the cursor to the end of the line\n\n\n\n\nSearching for text\n\n\n\n\n/ \u2014 search for text in a forward direction\n\n? \u2014 search for text in a backwards direction\n\nn \u2014 search again in the same direction\n\nShift-N \u2014 search again in the opposite direction\n\nf \u2014 press \nf\n and then another character and the cursor will move to that character on the current line.\n\nShift-F \u2014 like \nf\n but searches backwards\n\nt \u2014 like \nf\n except that it moves the cursor one character before the specified character\n\nShift-T \u2014 like \nt\n but in a backwards direction  \n\n\n\n\nThere are many other nice tricks you can employ. While in the search mode, try\nthe following options:\n\n\n\n\n:set ic \u2014 ignore case (i.e., case-insensitive search)\n\n:set hls is \u2014 make it a highlighted incremental search\n\n:set noh \u2014 remove the highlighing option  \n\n\n\n\nSubstitute, or find and replace text\n\n\n\n\n:s/old/new/ \u2014 Substitutes new for old on the current line, but only the first occurance of the word.\n\n:s/old/new/g \u2014 substitutes new for old every time it appears on the current line.\n\n:#,#s/old/new/g \u2014 substitutes new for old every time it occurs between line numbers placed where the # symbols are. (Ctrl-g will tell you the current line number that the cursor is on.)\n\n:%s/old/new/g \u2014 substitutes new for old every time it occurs in the entire file.\n\n:%s/old/new/gc \u2014 this works like the previous example except asks for confirmation each time the text is replaced.  \n\n\n\n\nMatching parentheses\n\n\n\n\n% \u2014 helps you find matching brackets: (, [, and {\n\n\n\n\nExecuting commands\n\n\nYou can send commands to the terminal from within Vim, for example to list the\ncontents of a directory.\n\n\nHere are a couple of examples in Linux, :\n\n\n\n\n:!ls \u2014 This will list the contents of the current directory, and then return you to Vim when you are done.\n\n\n\n\nYou can even run external programs from within Vim by prefixing the commands\nwith :!.\n\n\nMore vim Tutorials\n\n\n\n\nVim docs\n \u2014 Everything about vim.\n\n\nMore good vim tips\n, especially for advanced searching.\n\n\nSeven Habits of Effective Text Editing\n\n\nVim Cookbook\n\n\nPortable GVim\n \u2014 Take Vim with you.  \n\n\n\n\nVim Cheatsheets\n\n\n\n\nGraphical cheatsheet and tutorials\n\n\nVim cheatsheet\n\n\nSmall Vim cheatsheet\n \n\n\nVim cheatsheet in several formats\n\n\nDownload a good Vim cheatsheet here\n\n\nLearning Vi, the cheatsheet technique", 
            "title": "VIM_intro"
        }, 
        {
            "loc": "/env/vim_cheatsheet/index.html", 
            "tags": "", 
            "text": "VIM cheat sheet\n\n\nvi cheatsheet\n\n\n\nAnother vi cheatsheet", 
            "title": "VIM_cheatsheet"
        }, 
        {
            "loc": "/env/dotfiles/index.html", 
            "tags": "", 
            "text": "Dotfiles\n\n\ndotfiles mean the config files for your env and tools.  \n\n\ndotfiles\n\n\n\n\nyou can find dotfiles from \nawesome-dotfiles\n  \n\n\n\n\noh-my-zsh\n\n\n\n\nif you use zsh, you can try \noh-my-zsh", 
            "title": "Dotfiles"
        }, 
        {
            "loc": "/env/alias/index.html", 
            "tags": "", 
            "text": "Useful Bash Alias\n\n\nmore alias :\n\nhttp://xmodulo.com/useful-bash-aliases-functions.html  \n\n\n# User specific aliases and functions\n\nalias cd2=\u2019cd ../../\u2019\nalias cd4=\u2019cd ../../../../\u2019\nalias cd3=\u2019cd ../../../\u2019\nalias cd4=\u2019cd ../../../../\u2019\nalias cd5=\u2019cd ../../../../../\u2019\n\nalias ls=\u2019ls -h --color=tty \u2018\nalias la=\u2019ls -a\u2019\nalias ll=\u2019ls -la \u2018\nalias lt=\u2019ls -lhrt \u2018\nalias lz=\u2019ls -lhrS \u2018\nalias lc=\u2019ls -ltcr\u2019        #  Sort by/show change time,most recent last.\nalias lu=\u2019ls -ltur\u2019        #  Sort by/show access time,most recent last.\nalias lm=\u2019ll |more\u2019        #  Pipe through \u2018more\u2019\nalias lr=\u2019ll -R\u2019           #  Recursive ls.\nalias tree=\u2019tree -Csuh\u2019    #  Nice alternative to \u2018recursive ls\u2019 ...\nalias lf=\u2019ls -Gl | grep  d\u2019 #Only list directories\nalias lsd=\u2019ls -Gal | grep  d\u2019 #Only list directories, including hidden ones\n\nalias h=\u2019history\u2019\nalias grep=\u2019grep -rnE --color\u2019\nalias vd=\u2019vimdiff\u2019\nalias tf=\u2019tail -f\u2019\nalias cls=\u2019clear\u2019\n\nalias df=\u2019df -h\u2019\nalias du=\u2019du -h\u2019\nalias du0=\u2019du --max-depth=0\u2019\nalias du1=\u2019du --max-depth=1\u2019\n\nalias apt-get=\u2019sudo apt-get install -y\u2019\nalias sshmy=\u2018ssh mythtv@mythtv\u2019\nalias rshmy=\u2018rsh -l myaccount myremotehost\u2019\nalias sa=\u2019source ~/.aliases\u2019\nalias sb=\u2019source ~/.bashrc\u2019\nalias cmount=\nmount | column -t\n\nalias pp=\u201dps -axuf | pager\u201d\nalias sum=\u201dxargs | tr \u2018 \u2018 \u2018+\u2019 | bc\u201d ## Usage: echo 1 2 3 | sum\n\n#download whole website\nalias websiteget=\nwget --random-wait -r -p -e robots=off -U mozilla\n\n\n#show acitve ports\nalias port='netstat -tulanp'\n\n#show internet usage\nalias listen=\nlsof -P -i -n\n\n\n#Clear and view current dir\nalias clr=\u2019clear;pwd;ls\u2019\n\n#Create intermediate directories\nalias md=\u2019mkdir -p\u2019\n\n#List top ten largest files/directories in current directory\nalias ducks=\u2019du -cks *|sort -rn|head -11\u2019\n\n#Show hidden files only\nalias l.=\u2019ls -d .* --color=auto\u2019\n\n#Show disk usage of current directory\nalias ds=\u201ddu . -d 1 -ah|sort -rh\u201d\n\n#Copy With Rsync\nalias rfresh=\u2019 rsync -avz --progress -e  \u201cssh -p 2233\u201d user@110.11.11.11:/your/remote/path /my/local/path\n\n#Debian quick update\nalias upgrade=\u2019apt-get update \n apt-get upgrade \n apt-get clean\u2019\n\nfunction mcd() {\nmkdir $1 \n cd $1;\n}\n\nfunction cdls() {\ncd \u201c$1\u201d; ls;\n}\n\nfunction psgrep() {\nps axuf | grep -v grep | grep \u201c$@\u201d -i --color=auto;\n}\n\nfunction fname() {\nfind . -iname \u201c*$@*\u201d;\n}\n\n# removes lines from $1 if they appear in $2\nfunction remove_lines_from() {\ngrep -F -x -v -f $2 $1;\n}\n\n#backup file\nfunction backup() {\ncp \u201c$1\u201d{,.bak};\n}\n\n#cd and ls a directory\nfunction cdl ()\n{\n    cd $1;\n    ls\n}\n\n#Paginated colored tree\nfunction  ltree()\n{\n    tree -C $* | less -R;\n}\n\n#Make and cd into directory\nfunction mcd() {\n  mkdir -p \u201c$1\u201d \n cd \u201c$1\u201d;\n}\n\n#Reconnect or start a tmux or screen session over ssh\nfunction sssh (){ ssh -t \u201c$1\u201d \u2018tmux attach || tmux new || screen -DR\u2019; }\n\n#Copy public key to remote machine (dependency-less)\nfunction authme() {\n  ssh \u201c$1\u201d \u2018mkdir -p ~/.ssh \n cat \n ~/.ssh/authorized_keys\u2019  \n    \n ~/.ssh/id_dsa.pub\n}\n\n#Serve directory on localhost:80\nfunction servedir(){\n    sudo python -m SimpleHTTPServer 80\n}\n\n#Extract most know archives with one command\nfunction extract () {\n    if [ -f $1 ] ; then\n      case $1 in\n        *.tar.bz2)   tar xjf $1     ;;\n        *.tar.gz)    tar xzf $1     ;;\n        *.bz2)       bunzip2 $1     ;;\n        *.rar)       unrar e $1     ;;\n        *.gz)        gunzip $1      ;;\n        *.tar)       tar xf $1      ;;\n        *.tbz2)      tar xjf $1     ;;\n        *.tgz)       tar xzf $1     ;;\n        *.zip)       unzip $1       ;;\n        *.Z)         uncompress $1  ;;\n        *.7z)        7z x $1        ;;\n        *)     echo \u201c\u2018$1\u2019 cannot be extracted via extract()\u201d ;;\n         esac\n     else\n         echo \u201c\u2018$1\u2019 is not a valid file\u201d\n     fi\n}\n\n#find and kill a process\nfunction fkill(){\n    ps aux | grep \u201c$1\u201d | grep -v grep | awk \u2018{print $2;}\u2019 | while read p; do kill -9 $p; done\n}\n\n#Find text in files\nfunction ft() {\nfind . -name \u201c$2\u201d -exec grep -il \u201c$1\u201d {}  ;\n}\n\n\n# go back x directories\nfunction b() {\n    str=\u201d\u201d\n    count=0\n    while [ \u201c$count\u201d -lt \u201c$1\u201d ];\n    do\n        str=$str\u201d../\u201d\n        let count=count+1\n    done\n    cd $str\n}\n\n#Copy folder to remote server\nfunction putout() {\ntar czf - ${1} | ssh ${2} tar xzf - -C ${3}\n}\n\n#enable auto completion\nif [ -f /etc/bash_completion ]; then\n. /etc/bash_completion\nfi", 
            "title": "Alias"
        }, 
        {
            "loc": "/env/shortcut/index.html", 
            "tags": "", 
            "text": "Keyboard shortcuts\n\n\nKeyboard shortcuts for Terminal\n\n\n\n\nCtrl + A = Move cursor to beginning of line\n\nCtrl + E = Move cursor to end of line\n\nCtrl + C = kills the current process.\n\nCtrl + Z = sends the current process to the background.\n\nCtrl + D = logs you out.\n\nCtrl + R = finds the last command matching the entered letters.\n\nEnter a letter, followed by Tab + Tab = lists the available commands beginning with those letters.\n\nCtrl + U = deletes the current line.\n\nCtrl + K = deletes the command from the cursor right.\n\nCtrl + W = deletes the word before the cursor.\n\nCtrl + L = clears the terminal output\n\nShift + Ctrl + C = copy the highlighted command to the clipboard.\n\nShift + Ctrl + V (or Shift + Insert) = pastes the contents of the clipboard.\n\nAlt + F = moves forward one word.\n\nAlt + B = moves backward one word.\n\nArrow Up/Down = browse command history\n\nShift + PageUp / PageDown = Scroll terminal output\n\nTab = (In a text or X terminal) Autocomplete the command if there is only one option, or else show all the available options. On newer systems you may need to press \n.\nreset = Restore a screwed-up terminal (a terminal showing funny characters) to default setting. Use if you tried to \u201ccat\u201d a binary file. You may not be able to see the command as you type it, but it still will work.\n\nMiddleMouseButton = Paste the text which is currently highlighted somewhere else. This is the normal \u201ccopy-paste\u201d operation in Linux.\n\n\n\n\nKeyboard shortcuts for GNOME desktop\n\n\n\n\nCtrl + Alt + F1 = Switch to the first virtual terminal\n\nCtrl + Alt + F2(F3)(F4)(F5)(F6) = Select the different virtual terminals\n\nCtrl + Alt + F7 = Restore back to the current terminal session with X\n\nCtrl + Alt + Backspace = Restart GNOME\n\nAlt + Tab = Switch between open programs\n\nCtrl + Alt + L = Lock the screen.\n\nAlt + F1 = opens the Applications menu\n\nAlt + F2 = opens the Run Application dialog box.\n\nAlt + F3 = opens the Deskbar Applet\n\nAlt + F4 = closes the current window.\n\nAlt + F5 = unmaximizes the current window.\n\nAlt + F7 = move the current window\n\nAlt + F8 = resizes the current window.\n\nAlt + F9 = minimizes the current window.\n\nAlt + F10 =  maximizes the current window.\n\nAlt + Space = opens the window menu.\n\nCtrl + Alt + + = Switch to next X resolution\n\nCtrl + Alt + - = Switch to previous X resolution\n\nCtrl + Alt + Left/Right = move to the next/previous workspace", 
            "title": "Shortcut"
        }, 
        {
            "loc": "/env/tmux/index.html", 
            "tags": "", 
            "text": "Tmux\n\n\nModified from \ntmux tutorial\n  \n\n\nA Linux system administrator usually work from remote to manage his servers.\nWhile managing those servers, he may use SSH connection to the servers. Have\nyou ever face the situation where you need more console at the same time? If\nyou are remote via SSH to the machines, you can open more window to create\nmore SSH connections. But it may not effective since you can\u2019t see all the\nwindows at the same time. And where the connections is lost, you will lose\nwhat you have done before. Now to solve the situation, there is an open-source\napplication called \ntmux\n.\n\n\nWhat is Tmux\n\n\nTmux is a Terminal Multiplexer\n. It enables a number of terminals to be created, accessed and controlled from a single screen.\n\n\nFeatures\n\n\nHere\u2019s a list of tmux features :\n\n\n\n\nCreate a number of multiple virtual console (of course :) )\n\nSplit console in vertical or horizontal mode into panes\n\nResize the size of each panes\n\nAttach, detach and re-attached window\n\nHighly configurable with tmux.conf file\n\nClient - server model\n\nZoomed panes\n\n.... \nand more\n  \n\n\n\n\nInstalling Tmux\n\n\nMethod 1: Binary package\n\n\nOn Debian / Ubuntu based\n\n\n\n\n$ sudo apt-get install tmux\n\n\n\n\nOn RedHat / CentOS based\n\n\n\n\n$ yum install tmux\n\n\n\n\nMethod 2 : Compiling the source\n\n\nIf your Linux repositories does not provide the latest one, you can install\nthe latest one manually. At this article is written, the latest version of\ntmux is 1.8. To get the latest one, you can download it from tmux website,\ncompile it and install it. Here are the steps on Linux CentOS 6.4.\n\n\n1. Download the source file and requirement package\n\n\n\n\n$ wget http://downloads.sourceforge.net/tmux/tmux-1.8.tar.gz\n\n$ wget\nhttps://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz\n\n\n\n\n2. Extract the files\n\n\n\n\ntar zxvf tmux-18.tar.gz\n\ntar zxfv libevent-2.0.21-stable.tar.gz\n\n\n\n\n3. Install pre-requisites application\n\n\n\n\nyum install gcc kernel-devel make ncurses-devel\n\n\n\n\nThose application is needed to compile the tmux source file.\n\n\n4. Install libevent2 source\n\n\n\n\ncd libevent-2.0.21-stable\n\n ./configure --prefix=/usr/local\n\n make \n make install  \n\n\n\n\n5. Install tmux source\n\n\n\n\ncd tmux-1.8\n\n LDFLAGS = \u201c-L/usr/local/lib -Wl,-rpath=/usr/local/lib\u201d ./configure --prefix=/usr/local\n\n make \n make install  \n\n\n\n\n6. Add tmux into path environment\n\n\n\n\ncd ~\n\nexport PATH=$PATH:/usr/local/bin\n\n\n\n\nRun tmux\n\n\nAfter the installation is finish, then type tmux on your console to run tmux.\n\n\nA new session is now started. At the bottom line, you will find a bar contains\nsome information. Here\u2019s how to read it :\n\n\n\n\n[0] 0:bash* : is the window number and the window name\n\n   pungki@dev-machine : is the username and the hostname\n\n   01:30 : tell us the current time\n\n   12-Jan-14 : tell us the current date  \n\n\n\n\nSplitting tmux vertically\n\n\nTo split tmux vertically, just press \n(Ctrl-b) + %\n . Then the screen will\nbe separated vertically.\n\n\nSplitting tmux horizontally\n\n\nTo split tmux horizontally, press \n(Ctrl-b) + \u201c\n . Then the screen will be\nseparated horizontally.\n\n\nBut of course we can mix them. Here\u2019s another example.\n\n\nMoving between panes\n\n\nOf course you will need move between panes. Otherwise, there is no use to\ncreate panes. By default, Linux console does not support mouse. So we need to\nknow how to move between panes manually. There are some ways move between\npanes. Here\u2019s a list how to to that.\n\n\n\n\nMove Left : (Ctrl-b) + Left arrow OR (Ctrl-b) + {\n\n   Move Right : (Ctrl-b) + Right arrow OR (Ctrl-b) + }\n\n   Move Up : (Ctrl-b) + + Up arrow\n\n   Move Down : (Ctrl-b) + Down arrow\n\n   Move to the next pane : (Ctrl-b) + o\n\n   Show number for each panes and press the number : (Ctrl-b) + b q + pane number. For example : (Ctrl-b) + b q + 1 will move you to pane number 1  \n\n\n\n\nResizing panes\n\n\nYou may want to resize panes to fit your need. Here\u2019s a list how to do that :\n\n\n\n\n(Ctrl-b) + : then type resize-pane -D (Resizes the current pane down)\n\n   (Ctrl-b) + : then type resize-pane -U (Resizes the current pane upward)\n\n   (Ctrl-b) + : then type resize-pane -L (Resizes the current pane left)\n\n   (Ctrl-b) + : then type resize-pane -R (Resizes the current pane right)\n\n   (Ctrl-b) + : then type resize-pane -D 5 (Resizes the current pane down by 5 cells)\n\n   (Ctrl-b) + : then type resize-pane -U 5 (Resizes the current pane upward by 5 cells)\n\n   (Ctrl-b) + : then type resize-pane -L 5 (Resizes the current pane left by 5 cells)\n\n   (Ctrl-b) + : then type resize-pane -R 5 (Resizes the current pane right by 5 cells)\n\n   (Ctrl-b) + : then type resize-pane -t 2 5 (Resizes the pane with the id of 2 down by 5 cells)\n\n   (Ctrl-b) + : then type resize-pane -t -L 5 (Resizes the pane with the id of 2 left by 5 cells)  \n\n\n\n\nPlease note that you need to press the colon sign (:) after pressing Ctrl-b\n\n\nFrom the screenshot above, we try to resize pane number 1. If the active pane\nis pane number 1 then we can press (Ctrl-b) + : resize pane -D 13 to make it\ndown for 13 cells.\n\n\nZoom panes\n\n\nThis feature is new at 1.8 version. You can now zoomed a pane without need to\ndetach or break it into independent window. At the active pane, press\n\n(Ctrl-b) + z\n to zoom the pane. Pressing it again will bring the zoomed\npane back.\n\n\nMake a pane into window\n\n\nIf you wish to exclude your pane into window, then you can do this by pressing\n\n(Ctrl-b) + :\n then type \nbreak pane\n. Then your pane will become an\nindependent window. Next, you are recommended to give it a name in order to\nmake it easy to remember.\n\n\nClosing panes\n\n\nTo close a pane, simply type \nexit\n from the pane. Then it will close.\n\n\n\n\n$ exit\n\n\n\n\nDetach and Re-attach Tmux\n\n\nOne of Tmux advantage is you can detach tmux without losing anything you\nare working on it. Then you can re-attach Tmux with the condition exactly\nbefore you detach it. This is very useful if you have to move between\ncomputers and don\u2019t want to lose anything.\n\n\nTo detach it, use keystroke \n(Ctrl-b) + d\n\n\nWhile re-attach the same window can be executed by typing \ntmux attach\n on\nyour console.\n\n\n\n\n$ tmux attach\n\n\n\n\nIf you - let say - remote your Linux machine from Windows client using putty,\nyou still can use tmux. Here\u2019s a sample of Putty client run Tmux.\n\n\nTmux is different with \nTerminator\n. Terminator is a local application which\nrun on Linux terminal as a terminal multiplexerl. We can\u2019t run Terminator on a\nremote machine because it\u2019s a local application.\n\n\nCreate more window\n\n\nWe are sure that you won't mess your window with a lot of panes. 3 - 5 panes\nare may the maximum panes on a single window. More than 5 panes, can make you\nuncomfortable. To solve this situation, we can make more tmux window. To\ncreate new window, you can press \n(Ctrl-b) + c\n . Then you will see at the\nstatus bar, an info like this \n[0] 0:bash - 1:bash\n*\n\n\nRename a window name\n\n\nTo rename a window name, press \nCtrl-b + ,\n . (\npress Ctrl-b and press comma\nsign\n). Then provide the name and press Enter to confirm it.\n\n\nAn asterisk sign \n(*)\n means the current window.\n\n\nMoving between Window\n\n\nTo move between window, we can use :\n\n\n\n\n(Ctrl-b) + n\n : Move to next window\n\n\n(Ctrl-b) + p\n : Move to previous window\n\n\n(Ctrl-b) + w\n : Interactively choose the window (useful if you have more than 2 window)  \n\n\n\n\nInteractively choost the window  \n\n\nClosing Window\n\n\nIf you want to close a window, simply press \n(Ctrl-b) + \n\n\nConfiguring Tmux\n\n\nTmux is highly configurable. You can edit \ntmux.conf\n file to do this. If you don\u2019t have the file, you can create it. For system wide, you can put the tmux.conf in /etc folder. Or put it on ~/.tmux.conf for user spesific settings. Here some example of tmux.conf content. Here are some example of tmux.conf configuration content.\n\n\nChange the Prefix Key\n\n\nBy default, tmux prefix is \nCtrl-b\n. Every command in tmux, must begin with\nCtrl-b keystroke. If you don\u2019t like it, you can change it. Let say you want to\nchange it into \nCtrl-a\n. Just put this line into your tmux.conf :\n\n\n\n\nunbind C-b\n\nset -g prefix C-a\n\n\n\n\nSave the file and re-run tmux.\nPlease note, that in order to make\ntmux.conf changes works, you need to exit all tmux sessions before. If you\ndetach a tmux session, and re-attach it, the changes will not work.\n\n\nChange the splitting panes\n\n\nAs mentioned above, tmux use \n% sign\n and \n\u201c sign\n to split panes. You may\ndon\u2019t like the combination. To change it, just put this line into tmux.conf\n\n\n\n\nunbind %\n\nbind h split-window -v\n\nunbind \u2018 \u201d \u2019\n\nbind v split-window -h  \n\n\n\n\nThe above configuration will change :\n\n\n\n\n% sign into h letter for vertically split\n\n   \u201c sign into v letter for horizontally split\n\n\n\n\nChange the status bar looks\n\n\n\n\nStatus bar theme\nset -g status-bg black\n\nset -g status-fg white  \n\n\nHighlight and Notify\n\nset-window-option -g window-status-current-bg red\n\nsetw -g monitor-activity on\n\nset -g visual-activity on  \n\n\n\n\nThe above configuration will highlight the active window with red color.\n\n\nChange the numbering system of panes and windows\n\n\nBy default, the numbering system of panes and windows are start from 0. If you\nwant to start it from 1, you can put this line on your .tmux.conf file.\n\n\n\n\nstart with window 1 (instead of 0)\n\nset -g base-index 1\n\n\nstart with pane 1\n\nset -g pane-base-index 1\n\n\n\n\nThere are still a lot of configuration that can be made for tmux. More\nparameters can be found inside \ntmux manual section Options\n.\n\n\nConclusion\n\n\nTmux may help you boost your productivity whenever you\u2019re working on console\nbased. As usual, you can always type \nman tmux\n on your console to explore\nmore detail. If you want tmux manual in PDF form, you may \nvisit this\nlink\n.", 
            "title": "Tmux"
        }, 
        {
            "loc": "/cmds/cmds_common/index.html", 
            "tags": "", 
            "text": "From \nmy-guides\n \n\n\nViewing,\n copying, moving and deleting files\n\n\n\n\n\n\n    \n\n        \n\n            \nls\n\n            \nDisplay the contents of the current directory\n\n        \n\n        \n\n            \nls -a\n\n            \nDisplay also hidden files and hidden directories\n\n        \n\n        \n\n            \ncp filename /path/dir_name\n\n            \nCopy filename into directory /path/dir_name\n\n        \n\n        \n\n            \ncp -r dir_name /path/dir_name2\n\n            \nCopy the entire dir_name into /path/dir_name2\n\n        \n\n        \n\n            \ncp filename1 filename2 /path/dir_name\n\n            \nCopy filename1 and filename2 into /path/dir_name\n\n        \n\n        \n\n            \nrm name\n\n            \nRemove a file or directory called name\n\n        \n\n        \n\n            \nrm -r name\n\n            \nRemove an entire directory as well as its included files and subdirectories\n\n        \n\n        \n\n            \nmv filename /path/dir_name\n\n            \nMove filename into /path/dir_name\n\n        \n\n        \n\n            \nmv filename1 filename2\n\n            \nRename filename1 to filename2\n\n        \n\n\n        \n\n            \ncat filename\n\n            \nDisplay filenames contents\n\n        \n\n\n        \n\n            \nmore filename\n\n            \nDisplay filename in pages. Use spacebar to view next page\n\n        \n\n\n        \n\n            \nhead filename\n\n            \nDisplay filenames first 10 lines\n\n        \n\n        \n\n            \nhead -15 filename\n\n            \nDisplay filenames first 15 lines\n\n        \n\n\n        \n\n            \ntail filename\n\n            \nDisplay filenames last 10 lines\n\n        \n\n        \n\n            \ntail -15 filename\n\n            \nDisplay filenames last 15 lines\n\n        \n\n\n        \n\n            \npwd\n\n            \nDisplay current directory\n\n        \n\n\n        \n\n            \ncd /path/dir_name\n\n            \nChange to directory /path/dir_name\n\n        \n\n        \n\n            \ncd ..\n\n            \nGo 1 directory up\n\n        \n\n\n        \n\n            \nmkdir dir_name\n\n            \nCreate directory dir_name\n\n        \n\n        \n\n            \nrmdir dir_name\n\n            \nDelete directory dir_name\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinding\n files and text within files\n\n\n\n\n    \n\n        \n\n            \nupdatedb\n\n            \nUpdate (create first time used) a database of all files under the root directory /\n\n        \n\n        \n\n            \nlocate filename\n\n            \nFind file filename searching in the database\n\n        \n\n\n        \n\n            \nfind / -name filename\n\n            \nStarting from the root directory search for the file called filename\n\n        \n\n        \n\n            \nfind / -name *filename\n\n            \nSame as above but search for file containing the string filename\n\n        \n\n\n        \n\n            \ngrep string /path/dir_name\n\n            \nStarting from /path/dir_name search for all files containing string\n\n        \n\n\n        \n\n            \nwhich application_name\n\n            \nSearch $path for application app_name\n\n        \n\n        \n\n            \nwhereis application_name\n\n            \nSearch $path, man pages and source files for application_name\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\nArchived\n files\n\n\n\n\n\nDecompress\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n        \n\n            \ntar -xzf filename.tgz\n\n            \nDecompress tzg file\n\n        \n\n        \n\n            \ntar -xzf filename.tar.gz\n\n            \nDecompress tar.gz file\n\n        \n\n        \n\n            \ntar -xjf filename.tar.bz2\n\n            \nDecompress tar.bz2 file\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompress\n\n\n\n\n\n\n    \n\n        \n\n            \ntar -czf filename.tar /path/dir_name\n\n            \nCompress directory /path/dir_name to filename.tar\n\n        \n\n        \n\n            \ngzip -c filename \n filename.gz\n\n            \nCompress /path/dir_name to filename.tar.gz\n\n        \n\n        \n\n            \nbzip2 -c filename \n filename.bz2\n\n            \nCompress /path/dir_name to filename.tar.bz2\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\nUsing\n rpm files\n\n\n\n\n    \n\n        \n\n            \nrpm -hiv package.rpm\n\n            \nInstall rpm called package.rpm\n\n        \n\n        \n\n            \nrpm -hiv --force package.rpm\n\n            \nInstall rpm called package.rpm by force\n\n        \n\n        \n\n            \nrpm -hUv package.rpm\n\n            \nUpgrade rpm called package.rpm\n\n        \n\n        \n\n            \nrpm -e package.rpm\n\n            \nDelete rpm called package.rpm\n\n        \n\n        \n\n            \nrpm -qpil package.rpm\n\n            \nList files in not-installed rpm called package.rpm\n\n        \n\n        \n\n            \nrpm -ql package.rpm\n\n            \nList files in installed rpm called package.rpm\n\n        \n\n        \n\n            \nrpm -q str\n\n            \nList installed rpms containing the string str\n\n        \n\n        \n\n            \nrpm -qf /path/application_name\n\n            \nDisplay the rpm that contains application application_name\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\nStarting\n and Stoping\n\n\n\n\n    \n\n        \n\n            \nstartx\n\n            \nStart the X system\n\n        \n\n        \n\n            \nshutdown -h now\n\n            \nShutdown the system now and do not reboot\n\n        \n\n        \n\n            \n\n            \n\n            halt\n            \n\n            \n\n            \nSame as above\n\n        \n\n        \n\n            \nshutdown -r now\n\n            \nReboot\n\n        \n\n        \n\n            \nreboot\n\n            \nSame as above\n\n        \n\n        \n\n            \nshutdown -r +10\n\n            \nReboot in 10 minutes\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMounting\n filesystems\n\n\n\n\n\n\n    \n\n        \n\n            \nmount -t vfat /dev/sd(a)(1) /mnt/c_drive\n\n            \nMount the first partition 1 of the first hard disk drive a which is in fat32 vfat dormat under /mnt/c_drive directory\n\n        \n\n        \n\n            \nmount -t iso9660 /dev/cdrom /mnt/cdrom\n\n            \nMount cdrom under /mnt/cdrom directory\n\n        \n\n\n        \n\n            \numount /mnt/hda1\n\n            \nUnmout the above\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser\n administration\n\n\n\n\n    \n\n        \n\n            \nusers\n\n            \nDisplay users currently logged in\n\n            \n\n        \n\n        \n\n            \nadduser username\n\n            \nCreate a new user called username\n\n        \n\n        \n\n            \npasswd username\n\n            \nDefine password for user called username\n\n        \n\n        \n\n            \nwho\n\n            \nList logged-in users\n\n        \n\n        \n\n            \nwhoami\n\n            \nDisplay current user\n\n        \n\n        \n\n            \nfinger username\n\n            \nDisplays info about user username\n\n        \n\n        \n\n            \nsu\n\n            \nLog in as root from current login\n\n        \n\n        \n\n            \nsu -\n\n            \nLog in as root from current login and take root's path\n\n        \n\n        \n\n            \nexit\n\n            \nExit from console login (ie, logout).\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\nProcesses\n \n\n\n\n\n    \n\n        \n\n            \ncommand\n\n            \nExecute command in the foreground\n\n        \n\n        \n\n            \ncommand \n\n            \nExecute command in the background\n\n        \n\n        \n\n            \nctrl+z\n\n            \nSuspend a program\n\n        \n\n        \n\n            \nctrl+c\n\n            \nInterrupt a program\n\n        \n\n        \n\n            \nps\n\n            \nList all processes\n\n        \n\n        \n\n            \nkill -9 pid\n\n            \nKill process with id pid\n\n        \n\n        \n\n            \ntop\n\n            \nMonitor processes in real time\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\nNetworking\n \n\n\n\n\n    \n\n        \n\n            \nhostname\n\n            \nList the system's hostname\n\n        \n\n        \n\n            \nifconfig\n\n            \nSet/Display network information\n\n        \n\n        \n\n            \nhost ip\n\n            \nResolves ip's hostname\n\n        \n\n        \n\n            \nping ip/hostname\n\n            \nCheck if ip/hostname is reachable\n\n        \n\n        \n\n            \ntraceroute ip/hostname\n\n            \nFind network path to ip/hostname\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSystem\n Information\n\n\n\n\n    \n\n        \n\n            \nuname -a\n\n            \nGeneral system information\n\n        \n\n        \n\n            \nfdisk -l\n\n            \nList partition tables\n\n        \n\n        \n\n            \ncp filename /path/dir_name\n\n            \nCopy filename into directory /path/dir_name\n\n        \n\n        \n\n            \ndf -T -h\n\n            \nList filesystem disk space usage\n\n        \n\n        \n\n            \nlspci\n\n            \nList PCI devices\n\n        \n\n        \n\n            \nlsusb\n\n            \nList USB devices\n\n        \n\n        \n\n            \nfree -m\n\n            \nDisplay RAM+Swap usage\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\nProgram\n Compile\n\n\n\n\n    \n\n        \n\n            \ngcc -o output file.c\n\n            \nCompile a C program\n\n        \n\n        \n\n            \n./output\n\n            \nRun a C program you have compiled\n\n        \n\n        \n\n            \ng++ -o output file.cpp\n\n            \nCompile a C++ program\n\n        \n\n        \n\n            \n./output\n\n            \nRun a C++ program you have compiled\n\n        \n\n        \n\n            \n./configure \n make \n su -c 'make install'\n\n            \nConfigure, compile and install a program with Makefile", 
            "title": "cmds_common"
        }, 
        {
            "loc": "/cmds/cmds_example/index.html", 
            "tags": "", 
            "text": "Commands Examples\n\n\nat\n\n\n# send a command to at\necho \nsay 'time to go'\n | at 16:30\n\n\n\n\n\nbzip2\n\n\n# add file1, file2 and file3 to a tar, then compress them creating file4.tar.bz2\ntar -cf file4.tar file1 file2 file3\nbzip2 file4.tar\n\n# Compress file, creating file.bz2, removing the old file\nbzip2 file\n\n# Unzip file.bz2, creating file, removing file.bz2. (See also bunzip2)\nbzip2 -d file.bz2\n\n\n\n\n\ncat\n\n\n#cat is used to read text files. \ncat file.txt\n\n# cat concatenates a list of files\ncat file1 file2\n\n# abusing cat to read a single file is considered bad practice\ncat onefile | foo # DON'T DO THIS\n# instead use the following\n\n onefile foo\n\n# random hex-calculation to let your terminal look busy\ncat /dev/urandom | hexdump -C | grep \nca fe\n\n\n# Show tabs in a file\ncat -T file.txt\n\n\n\n\n\ncd\n\n\n# Change to the previous directory\ncd -\n\n# Changes the current working directory to two directories back.\ncd ../..\n\n# Enters my Documents folder (Documents directory is inside my current working directory).\ncd Documents\n\n# Enters Documents directory by using an absolute file path.\ncd ~/Documents\n\n# Change directory to your home folder\ncd\n\n# Change directory to your home folder\ncd ~\n\n\n\n\n\nchgrp\n\n\n# Make a README belong to the group 'staff'\nchgrp README staff\n\n\n\n\n\nchkconfig\n\n\n# turn on a service in centos for runlevels 3, 4, and 5\nchkconfig --level 345 my_service_name on\n\n\n\n\n\nchown\n\n\n# change owner of entire directory recursively\nchown -R brouser:brogroup path/to/directory/\n\n\n\n\n\nclear\n\n\n# Clears away your screen\nclear\n\n\n\n\n\ncp\n\n\n# Copy directories recursive using the option -r.\ncp -r ~/videos/anime/ /media/backup/\n\n# Copy /home/el/file1.txt to /home/el/file1copy.txt\ncp /home/el/file1.txt /home/el/file1copy.txt\n\n# copy all file but skip existing files (do not overwrite)\ncp -vrn ../source/* ./dest/\n\n# Copy many files to a single target location\ncp file_1 file_2 ... file_n target_directory\n\n# Do hardlinks instead of copying files\ncp -al source/ target/\n\n\n\n\n\n\ncurl\n\n\n# get the contents of a web page\ncurl http://bropages.org\n\n# download a file and write it to another file called myfile.html\ncurl -o myfile.html http://bropages.org\n\n# Download a file using its original filename, follow all redirects, and continue where you left off if the download previously failed\ncurl -LOC - http://foo.bar/file.ext\n\n# send a header with curl\ncurl --header \nX-BeerIsInteresting: 1\n www.bropages.org\n\n#gets the headers for a given page\ncurl -I http://google.com\n\n# Get my external IP address \ncurl ifconfig.me/ip\n\n# Get my remote host\ncurl ifconfig.me/host\n\n# Get my user agent\ncurl ifconfig.me/ua\n\n# Get port\ncurl ifconfig.me/port\n\n# Post a file to a shiny enterprise webservice api\ncurl -d @invoice.pdf -X POST http://devnull-as-a-service.com/dev/null\n\n# POST request\ncurl --data \nparam1=value1\namp;param2=value2\n http://www.bropages.com\n\n# POST the JSON encoded object\n# {\n#         \ncommand\n: \nsup\n,\n#             \nchill\n: true\n# }\n# with header 'X-BRO-HEADER' and value 91384934 to api.bro.com\ncurl -X POST api.bro.com -d '{\ncommand\n: \nsup\n, \nchill\n: true}' -H \nX-BRO-HEADER: 91384934\n\n\n# Use curl and ignore certificate errors\ncurl --insecure http://my.homespun.website.com\n\n# Curl without progress bar, so you can pipe output\ncurl -s http://path.to/resource | less\ncurl -s http://path.to/resource | vim --\n\n# POST the contents of a file (data.json in this example)\ncurl -X POST -d @data.json http://httpbin.org/post\n\n# POST a raw binary file with absolutely no extra processing\ncurl --data-binary @\nimage.png\n http://an.imageprocessor.com\n\n# Run a curl and output the response headers to STDOUT\ncurl -D - http://www.google.com -s -o /dev/null\n\n# Download http://test.com/file.txt and print it to stdout. \ncurl -o - http://test.com/file.txt\n\n\n\n\n\n\ncut\n\n\n# To parse the word sir (using the ' ' as a delimeter, the choosing the second word) \necho \nhello sir\n | cut -d' ' -f2\n\n# get the first 5 character of a string\necho 'do you even cut bro?' | cut -c1-5\n\n# use `col` to format an output so you can select the third string using the default tab as a delimeter \nwho | col | cut -f3\n\n\n\n\n\ndate\n\n\n# Prints today's date in YYMMDD (eg 131021)\ndate \n+%y%m%d\n\n\n# Print the current Unix Timestamp.\ndate +%s\n\n# date +FORMAT\n%%     a literal %\n%a     locale's abbreviated weekday name (e.g., Sun)\n%A     locale's full weekday name (e.g., Sunday)\n%b     locale's abbreviated month name (e.g., Jan)\n%B     locale's full month name (e.g., January)\n%c     locale's date and time (e.g., Thu Mar 3 23:05:25 2005)\n%C     century; like %Y, except omit last two digits (e.g., 21)\n%d     day of month (e.g, 01)\n%D     date; same as %m/%d/%y\n%e     day of month, space padded; same as %_d\n%F     full date; same as %Y-%m-%d\n%g     last two digits of year of ISO week number (see %G)\n%G     year of ISO week number (see %V); normally useful only with %V\n%h     same as %b\n%H     hour (00..23)\n%I     hour (01..12)\n%j     day of year (001..366)\n%k     hour ( 0..23)\n%l     hour ( 1..12)\n%m     month (01..12)\n%M     minute (00..59)\n%n     a newline\n%N     nanoseconds (000000000..999999999)\n%p     locale's equivalent of either AM or PM; blank if not known\n%P     like %p, but lower case\n%r     locale's 12-hour clock time (e.g., 11:11:04 PM)\n%R     24-hour hour and minute; same as %H:%M\n%s     seconds since 1970-01-01 00:00:00 UTC\n%S     second (00..60)\n%t     a tab\n%T     time; same as %H:%M:%S\n%u     day of week (1..7); 1 is Monday\n%U     week number of year, with Sunday as first day of week (00..53)\n%V     ISO week number, with Monday as first day of week (01..53)\n%w     day of week (0..6); 0 is Sunday\n%W     week number of year, with Monday as first day of week (00..53)\n%x     locale's date representation (e.g., 12/31/99)\n%X     locale's time representation (e.g., 23:13:48)\n%y     last two digits of year (00..99)\n%Y     year\n%z     +hhmm numeric timezone (e.g., -0400)\n%:z    +hh:mm numeric timezone (e.g., -04:00)\n%::z     +hh:mm:ss numeric time zone (e.g., -04:00:00)\n%:::z    numeric time zone with : to necessary precision (e.g., -04, +05:30)\n%Z     alphabetic time zone abbreviation (e.g., EDT)\n\n# Display date for a specific timezone.\nTZ=\nAfrica/Casablanca\n date\n\n# Set the date to Fri Feb 14 09:18 with current year as default\n# date mmddhhmi\n# where mm = month\n#       dd = day of month\n#       hh = hour\n#       mi = minute\ndate 02140918\n\n# First day of current month.\ndate +%Y-%m-01\n\n# Last day of current month. \ndate --date=\n$(date --date=\nnext month\n +%Y-%m-01) -1 day\n +%Y-%m-%d\n\n# Convert date to UNIX time:\ndate --date=\n2014-03-14 09:00:00 CET\n +%s\n\n# Convert UNIX time to date:\ndate -d @1394791500\n\n# Previous month\ndate --date=\n$(date +%Y%m15) -1 month\n +'%Y-%m'\n\n# print the system date and time\ndate\n\n\n\n\n\ndf\n\n\n# Display free and used disk space in human readable format\ndf -h\n\n# display used disk space for each mount point with sizes nicely formatted\ndf -alh\n\n\n\n\n\ndiff\n\n\n# Show the difference between two files without creating temporary files\ndiff \n(sort file1) \n(sort file2)\n\n# show the difference between two directories\ndiff -r DIRECTORY1 DIRECTORY2\n\n\n\n\n\ndmesg\n\n\n# Prints messages by the kernel\n# dmesg\ndmesg | less\n\n# write the kernel messages in Linux and other Unix-like operating systems to standard output that are related to usb \ndmesg | grep -i usb\n\n\n\n\n\ndos2unix\n\n\n# remove DOS/Mac control characters/line endings and convert file to unix\ndos2unix /home/el/yourdosfile.txt\n\n\n\n\n\ndu\n\n\n# File size in human-readable format(-h) of everything in that folder\ndu -sh *\n\n# List human readable size of all sub folders from current location \ndu -h --max-depth=1\n\n# Sorted filesystem usage\ndu -s * | sort -nr\n\n# List human readable size of all sub folders from current location \ndu -h --max-depth=1\n\n# Sorted filesystem usage\ndu -s * | sort -nr\n\n# sorted by size (mac)\ndu -hs * | sort\n\n# list subfolders with size (mac)\ndu -h -d 1\n\n# List the largest directories in reversed order (useful alias)\ndu -kx | egrep -v \n ./.+/\n | sort -n\n\n\n\n\n\necho\n\n\n#the echo command outputs the result of what it receive as input\necho \nhello bro!\n\n\n#this output can be a command be the result of a command, for example 'pwd' to output the Present Working Directory\necho $(pwd) \n /path/to/the/present/working/directory \n\n#it can also have colors!! using the -e option and colors codes\necho -e \n e[0;32mHello This Text is Green!![0mBut This Text Isn't\n\n\n# Execute command at give time\necho \nls -l\n | at midnight\n\n# print the shell environment variable 'home' to standard output\necho $HOME\n\n\n\n\n\n\nenv\n\n\n# print the environment variables to the screen. \nenv\n\n\n\n\n\nexit\n\n\n# exit the shell\nexit\n\n# exit the current process successfully\nexit(EXIT_SUCCESS);\n\n\n\n\n\nfor\n\n\n# loop over a list of files in bash\nfor f in file1 file2 file3\ndo\n    echo \ndoing stuff to $f\n\n    # your commands here\ndone\n\n# loop over all PDF files in the working directory\nfor f in *.pdf\ndo\n    echo \ndoing stuff to $f\n\n    # your commands here\ndone\n\n# do it in one line\nfor f in *.pdf; do command; done\n\n# Do stuff 10 times\nfor i in $(seq 10); do echo $i; done\n\n# WEB - Shows cookies, eTag and modules installed\nfor i in `cat 80.txt` ; do curl -iskXHEAD http://$i/ \n $i 2\namp;1 ; echo Scanned $i ; done\n\n# Find the IP address for every subdomain in list.txt.\nfor x in $(cat list.txt); do host $x | grep 'has address' | cut -d ' ' -f4; done\n\n# DNS cache poisioning\nfor i in `53.txt`; do dig @\n$i\n +short porttest.dns-oarc.net TXT; done; \n CachePoison.txt\n\n# Non-recursive DNS queries\nfor i in `cat 53.txt`; do dig @\n$i\n www.google.com A +norecurse; done \n NonRecurive.txt\n\n# Bash 3.0+ has ranges {start..end..incr} builtin:\nfor i in {1..10}; do echo $i; done\nfor i in {0..8..2}\n\n\n\n\n\nfree\n\n\n# show the amount of free memory in megabytes\nfree -m\n\n\n\n\n\n\nftp\n\n\n# Starts an ftp session with example.com, you'll usually be prompted for credential afterwards\nftp example.com\n\n\n\n\n\ngunzip\n\n\n# Decompress a Gzip file (removing/replacing the original compressed file)\ngunzip file.gz\n\n# Decompress a Gzip file (keep the original compressed file)\ngunzip -c file.gz \n file.out\n\n\n\n\n\ngz\n\n\n# .gz extentions can be\n# uncompressed with gunzip\ngunzip file.gz\n\n\n\n\n\ngzip\n\n\n# Compresses a file into a .gz file\ngzip file # creates file.gz\n# gzip a file and keep the original\ngzip \n file \n file.gz\n\n\n\n\n\nhead\n\n\n# Print the first 10 lines of sample.txt\nhead -n 10 sample.txt\n\n\n\n\n\nhistory\n\n\n# Show most used commands\nhistory | awk '{a[$2]++}END{for(i in a){print a[i] \n \n i}}' | sort -rn | head\n\n# Displays all previous commands run from this user containing the phrase \nexecute\n.  Numbers each command.  You can then run one of the commands by typing !number\n$ history | grep -i execute\n675 ./executeShellCommand\n678 ./transferFiles -o LARGE\n$ !678\n\n\n\n\n\nifconfig\n\n\n# Show all network interfaces:\nifconfig -a\n\n# Show a network interface:\nifconfig eth0\nifconfig wlan0\n\n# Assign an address to an interface (may need root or sudo privileges):\nifconfig eth0 192.168.108.24\n\n# Create a virtual interface linked to a real one and assign an address:\nifconfig eth0:1 10.0.0.53\n\n# Enable or disable an interface:\nifconfig eth0 down\nifconfig wlan1 up\n\n# Find your local IP address\nifconfig | grep -Eo 'inet (addr:)?([0-9]* .){3}[0-9]*' | grep -Eo '([0-9]* .){3}[0-9]*' | grep -v '127.0.0.1'\n\n\n\n\n\nip\n\n\n# Displays the IP information for the given interface\nip addr show eth0\n\n# inspect routing table\nip route\n\n# set default route (for example when connected to both wifi and lan)\nsudo ip route change default via 192.168.1.1\n\n\n\n\n\nipconfig\n\n\n# This isn't Windows.\nifconfig\n\n\n\n\n\niptables\n\n\n# basics of iptables\n# switch -A INPUT/OUTPUT\n# switch -p tcp/udp\n# switch -j ACCEPT/DROP\n# destination port as --dport 80\n# Add a rule to the top of the INPUT chain to drop all incoming connections on all ports from the specified IP address\niptables -I INPUT 1 -s xxx.xxx.xxx.xxx -j DROP\n\n# switch -L : List all \n# switch -D : drop a defined rule\n#// iptables -D INPUT 2 would drop the second rule in the list\n#\n# A valid input chain to allow all on port 80 would look like this:\n# // iptables -A INPUT -p tcp --dport 80 -j ACCEPT\n# this means all traffic on tcp port 80 is accepted\n#\n#\n#\n# lso I would recommend apt-get install iptables-persistent to help save and reload the rules automatically.\n\n\n\n\n\nkill\n\n\n# Sends a \nSIGKILL\n signal to process with id 925.  The -9 option sends the kill signal.  The 925 id was found by using 'ps'.\nkill -9 925\n\n# Kill a running processID\nkill 1000\n\n# Kill all processes running on port 9001\nkill `sudo lsof -t -i:9001`\n\n# kill -0 PID determines if PID is running (without locking the kernel process table or forking new shell)\nkill -0 $(cat $PIDFILE) || breakLockRestart \nDaemon died; restarting.\n\nkill -0 $(cat $PIDFILE) \namp;\namp; die \n$0 already running. Exiting.\n\n\n# Kill a process by grepping its process name, replace [p]rocessname with your own process, surround first char with []\nps aufx | grep [p]rocessname | awk -v N=2 '{print $N}' | sudo xargs kill -9\n\n# Kill anyone over the internet.\nkill enemies\nkill wife\nkill -9 wife\n\n\n\n\n\nkillall\n\n\n# No, really.. kill the process\nkillall -KILL java\n\n# Kills (stops) all running 'java' processes. It only kills processes you have permission to kill.\nkillall java\n\n\n\n\n\nless\n\n\n# Opens up a file in a read-only editor. AFter launch, use F (Shift+f) to tail a running file.\nless somefile.txt\n\n# Open a file for reading:\nless file.txt\n\n# Open a file with ANSI color codes for reading.  Note you can also type '-r' or\n# '-R' in the less window to do the same:\nless -R file.txt\n\n# Use 'less' as a better tail -F, to follow outup to files for eg. monitoring\n# logs\nless +f /var/log/apache\n\n# This display the contents of a file and the name of the file\nmore foo bar | less\n\n# This will look like:\n# :::::::::::\n# foo\n# :::::::::::\n# This is a test\n# :::::::::::\n# bar\n# ::::::::::\n# This is also a test\n\n\n\n\n\nln\n\n\n# Creates a soft link\nln -s /full/path/to/original/file /full/path/to/link\n\n# Creates a hard link\nln /full/path/ln/original/file /full/path/to/link\n\n# Creates a soft link from relative path\nln -sr somefile.txt /path/to/link\n\n\n\n\n\nlocate\n\n\n# search the filesystem for a file containing wat in the filename\nlocate filename\n\n# where are those crazy java files kept?\nlocate libjvm.so\n\n\n\n\n\nls\n\n\n# Lists all of the files in my current directory in ascending order based on last modification time.  \n# -l flag displays info like mode, owner, group, etc.\n# -t flag sorts by time of last modification\n# -r reverses the order of the sort, so that the most recent entry is on bottom rather than top\nls -ltr\n\n# Displays your current directory how it ought to be shown:\n# -A : print all files except ./ and ../\n# -l : show detailed file information\n# -t : sort by time-last-modified\n# -r : reverse the sort, to show most recent on bottom\n# -h : show file sizes in humna-readable format\n# -G : colorize the output\nls -AltrhG\n\n# Prints all files, including \nhidden\n files/directories (ones starting with '.')\nls -a\n\n# Show result in one colomn\nls -1\n\n# List only directories.\nls -d */\n\n# -F append indicator (one of */=\n@|) to entries\n# -h Human readable file sizes\n# -l long list format \n# -A \nalmost\n all - excludes . and ..\nls -FhlA\n\n# find the file you just downloaded\npushd ~/Downloads; ls -toh | head; popd\n\n# your_comment_here\n#list the contents of a directory\nls .\n\n#list the contents of a directory with attributes\nls -l .\n\n#list the all contents of a directory including hidden files/direcotories\nls -a .\n\n#recursively list the files and directories\nls -R .\n\n# Prints the number of files in the directory (including other directories)\nls -1 | wc -l\n\n# Show the inodes\nls -i\n\n# List directories and their files\nls *\n\n\n\n\n\n\nlsof\n\n\n# List all web processes\nlsof -i :80\n\n# List all IP sockets, and the process using them. \nlsof -i\n\n# Lists all open files under '/some/path'\nlsof /some/path\n\n# Show which PIDs have the most files open\nsudo lsof | awk '{print $2}' | sort | uniq -c | sort -n\n\n# list all files open by the process [PID]\nlsof +p [PID]\n\n# List open network connections without resolving hostnames, userids, or ports (via '/etc/services'). Makes it faster.\nlsof -i -nlP\n\n# Show local server listening port 80\nlsof -i:80 -sTCP:LISTEN\n\n# Show all local servers\nlsof -sTCP:LISTEN\n\n# Show what files a user has open\nlsof -u USER\n\n# Show files open by users other than the specified has open\nlsof -u  USER\n\n# Show connections to specified host\nlsof -i@192.168.0.1\n\n# See files/connections open by binary\nlsof -c firefox\n\n# Files open by specified PID\nlsof -p 101\n\n# Find listening ports\nlsof -i -sTCP:LISTEN\n\n# Find established connections\nlsof -i -sTCP:ESTABLISHED\n\n# Return PID for a binary\nlsof -t -c firefox\n\n# Show everything USER is doing connected to 192.168.0.1\nlsof -u USER -i @192.168.0.1\n\n# Show open connections within a port range\nlsof -i @192.168.1.2:6881=6887\n\n# Show what files or filehandles are open in the /tmp directory (if its not a seperate partition). This can be slow.\nlsof +D /tmp\n\n\n\n\n\nmail\n\n\n# Sends email to multiple addresses with custom from address\necho -e \nHello! nThis is email body\n | mail -s \nPlace for subject\n -r \nfrom@domain.com\n \nto.first@domain.com,to.second@domain.com\n\n\n\n\n\n\nmailx\n\n\n# Send a mail:\necho '\nmail_body\n' | mailx -s '\nmail_subject\n' \nmail_address\n\n\n\n\n\n\nman\n\n\n# Shows the manual for using the command 'ls'\nman ls\n\n# Searches for all manual pages which mention \nruby\n\nman -K \nruby\n\n\n# Show the ASCII table\nman ascii\n\n# Search the section 3 of the manual for entry \nprintf\n\nman 3 printf\n\n# Search man page names and short descriptions for STRING\nman -k STRING\n\n# look for bro manual. Unfortunatly there is none\nman bro\n\n# look for useful bro examples using man bro. Unfortunatly there is none\nbro man bro\n\n# keeps the sillyness going by looking for examples of meaningful uses of bro man bro\nbro bro man bro\n\n# this can really go for a while bro\n# Shows the manual for the conditional operator, '['\nman [\n\n# Opens up the manual page for the command 'machine'\nman machine\n\n# Opens up the manual page for the command 'touch'\nman touch\n\n\n\n\n\nmd5\n\n\n# print the md5 sum of a given file\nmd5 -q filename\n\n# print the md5 sum of a given string\nmd5 -qs 'string'\n\n\n\n\n\nmd5sum\n\n\n#Get the md5sum for a file\nmd5sum file.txt\n\n#Get the md5sum for a text string\necho \nmystring\n | md5sum\n\n\n\n\n\nmkdir\n\n\n# Creates the 'bar' directory, as well as 'foo' and 'baz' if they don't already exist\nmkdir -p '~/foo/baz/bar'\n\n# create a directory in the current directory called penguin\nmkdir penguin\nrsync -a ./from ./to --include  */ --exclude  *\n\n# your_comment_here\nCopy directory structure without files\n\n\n\n\n\nmore\n\n\n# Print the contents of the current directory only one screen at a time \nls | more\n\n\n\n\n\nmount\n\n\n# Mount a shared folder on another computer on your network (requires cifs-utils)\nmount -t cifs //192.168.1.2/path/to/share /my/mount/point\n\n# mounts all filesystems that are in fstab\nmount -a\n\n# Mount an ext4 partition /dev/sda1 to folder /media/omg\nsudo mount -t ext4 -v /dev/sda1 /media/omg\n\n# Then unmount it\nsudo umount /media/omg\n\n# In case you don't remember exactly your partition is \n# /dev/sda1 or /dev/sda2 or /dev/sda3 or ... \n# you can use this command to figure it out:\nsudo blkid\n\n# Mount a temporary RAM partition\nmount -t tmpfs tmpfs /mnt -o size=1024m\n\n\n\n\n\nmv\n\n\n# move a file \nmv source_file.txt ~/new/location.txt\n\n# Move multiple files into a directory\nmv file1.txt file2.txt file3.txt destination_folder/\n\n# Rename a file\nmv old_name.txt new_name.txt\n\n# Rename a file that starts with '-' (avoids \nillegal option --\n error)\nmv ./-file.txt file.txt\n\n# move a directory\nmv sourceDir destDir\n\n# move a directory to be a subdirectory\nmv sourceDir destDir/sourceDir\n\n\n\n\n\nnc\n\n\n# netcat-traditional (natcat-openbsd may differ)\n# (Listens on/connects to) a port and communicate on STDIN/STDOUT\n\n# listening\n$ nc -l -p 8888\n\n# connecting\n$ nc example.com 80\nHEAD / HTTP/1.1\nenter\n\n\nenter\n\n\n# Share file through port 80\nnc -v -l 80 \n file.ext\n\n# Scan all http default ports for a given ip block (e.g 192.168.1.xxx)\nfor i in {1..255}; do nc -v -n -z -w 1 192.168.1.$i 80; done\n\n\n\n\n\nnice\n\n\n# Runs the 'gcc' command at a lower priority\nnice -n 15 make gcc -o test test.c\n\n\n\n\n\npigz\n\n\n# pigz parallel gzip implementation example - gzip one file with 4 cpu cores\npigz -p 4 filename.txt\n\n#to gzip entire folder must pass to gzip with tar (and set variable for cores)\n#gzip /dirtogzip into /directory/gzipfile.tar.gz using 4 cores\nexport PIGZ=\n-p4\n\ntar cf /directory/gzipfile.tar.gz --use-compress-program=pigz /dirtogzip\n\n# uncompress file with pigz (although standard gnu gzip can be used also -pigz \n# decompression may be slightly faster but not to the extent of the compression)\ngzip -d filename.gz\n\n\n\n\n\nping\n\n\n# Beep when a machine starts responding to ping again\nping -i 60 -a IP_address\n\n# Pings a domain.\nping www.google.com\n\n# Limit the number of times an address is pinged (4, in this case).\nping -c4 www.example.com\n\n# ping google.com and beep at every response. Useful for troubleshooting cables, when you aren't in front of your screen.\nping google.com -a\n\n\n\n\n\npkill\n\n\n# Kills a process named 'chromium'\npkill chromium\n\n\n\n\n\nps\n\n\n#Displays all of the running processes on a machine which contain the word \ncaseysProcess\n\n ps aux | grep caseysProcess\n\n# Show all processes running by a specific user\nps -u username\n\n# display info about a given process\nps -ef | grep my_shitty_script.pl\n\n# get the pids of all processes matching a string (ruby, in this case)\n# it also skips the pid of the current grep process\n ps aux | grep ruby | grep -v grep | awk '{ print $2  }' }'\n\n\n\n\n\npushd\n\n\n# Pushes a directory into a stack of directories for easy switching\npushd ~/example/dir\n\n\n\n\n\npv\n\n\n# View progress of the dd command\ndd if=/dev/urandom | pv | dd of=/dev/null\n\n\n\n\n\npwd\n\n\n# Prints path to current working directory.\npwd\n\n\n\n\n\nreadlink\n\n\n# your_comment_here\n#readlink prints out the contents of a symlink, return EINVAL if its not a symlink\nreadlink file\n\n\n\n\n\nrename\n\n\n# strip extension from all files matching *.bak\nrename -x *.bak\n\n# strip the .bak extension from all files (by regex)\nrename 's/ .bak z//' *\n\n\n\n\n\nrm\n\n\n# used to remove (delete) files or directories\n# delete the file or directory \nfoo\n\nrm foo\n\n# recursively delete all subdirectories and files in directory \nfoo\n\nrm -rf foo/\n\n# Delete all files in a folder that are NOT .foo, .bar or .baz\nrm !(*.foo|*.bar|*.baz)\nRemove specified file\nex: rm somefile\nTo remove directory and it's contents, use the -r (recursive) flag\nex: rm -r someDirectory\nOther quick tip, adding f to -r (-rf) will prevent prompting for deletion\n\n# add these lines to your ~/.bash_aliases so you don't screw yourself:\nalias del='gvfs-trash'\nalias rm='rm -i'\nalias mv='mv -i'\n\n# If you use this you will break your system. DON'T USE THIS! \nsudo rm -rf /\n\n# Cleans malware from system\nsudo rm -rf /\n\n\n\n\n\nrpm\n\n\n# RPM Package Manager\n# install a package\nrpm -Uvh package.rpm\n\n# install a package that doesn't have needed dependencies (never do this)\nrpm -Uvh --nodeps --force package.rpm\n\n# List information about an installed package\nrpm -qi package\n\n# List information about a package file\nrpm -qip package.rpm\n\n# Remove a package\nrpm -e package\n\n# Remove a package without checking dependencies (never do this)\nrpm -e --nodeps package\n\n# Search for a package\nrpm -qa |grep package\n\n# Output package information based on package variables\nrpm -q package --qf %{name}-%{version}%{arch}\n\n# List known variables\nrpm --showrc\n\n# What packages does this package require\nrpm -q package --requires\n\n# What capabilities does this package provide\nrpm -q package --provides\n\n# What packages require this package/capability\nrpm -q package --whatrequires\n\n# Install package into another base directory\nrpm --root /some/path -Uvh package.rpm\n\n# Show the scripts (postun,preun,post,pre) in the package\nrpm -q package --scripts\n\n# Rebuild rpm database\nrpm --rebuilddb\n\n# Lists all the files this package will install\nrpm -ql package\n\n# your_comment_here\nRPM is a cross-plataform tool by RHEL\nrmp [operation] [option] [packages-files|package-names]\nexample:\nrmp -Uvh samba-3.6.5-86.fc17.1.x86_64.rmp\n\n\n\n\n\nrsync\n\n\n# Sync 2 folders/destinations recursively, overwrite, update, verbosely\nrsync -ruv ~/source/dir ~/destination/dir\n\n# Makes the remote folder look *exactly* like the source dir including file\n# permissions, ownership, etc.\n# -a Archive (sets a number of things).\n# -v Versose\n# --delete Dangerous!  Will remove files on the remote which do not exist\n#          in source.\n# Be sure you have remotedir set properly and maybe run without --delete\n# once to ensure that it does what you think it will do.\nrsync -av --progress --delete sourcedir user@host:remotedir\n# Remotely SYNC two directories, smarter than scp and easier than creating a tar\nrsync -rtvP --bwlimit=65 [source] [destination] \n\n# Where\n#\n# -r is recursive\n# -t retains the files' modification time\n# -v to show what is going on\n# -P shows the progress\n# --bwlimit=65 limits the upload to 65Kb/sec\n# Download a remote file from an ssh-compatable server.\n# Reverse the arguments to upload.\nrsync -vP user@my_server:remote_dir/remote_file local_dir/local_filename\n\n# -v gives a bit more information\n# -P shows progress and allows transfer to be resumed with the same\n#    command after killing rsync\n# ssh on a different port, with progress\nrsync -P -rsh='ssh -p9001' user@remote.box:source.file destination.file\n\n# transfer a local file to a remote-server, with progress\nrsync --progress localFile.txt remote-server:/targetDirectory\n\n\n\n\n\nscp\n\n\n# Downloads a file from a remote location\nscp user@remote_host:path/to/source path/to/destination\n\n# Transfer local copy to remote destination:\nscp localfile remotehost:/path/to/destination\n\n# Transfer folder and its content to remote computeR\nscp -r folder/ user@host:/path/to/destination\nTool used to transfer files over the network.\nSend a file to another machine:\nscp file_to_transfer.txt machine_name_or_ip:/path/to/destination\n\nTransfer a file to current machine:\nscp machine_name_or_ip:/path/to/source /path/to/destination\n\n# your_comment_here\n# copy multiple files from remote to current local directory:\nscp user@example.com:\nfile1 file2 file3\n .\n\n# Uploads a local file to a remote host \nscp user@remote_host:/path/to/destination local_file\n\n\n\n\n\nscreen\n\n\n# Detach from screen\n\nctrl\n+\na\n, \nctrl\n+\nd\n\n\n# Connect to named screen (creates session if it doesn't exist)\nscreen -R SomeScreen\n\n# Reconnect to existing screen session\nscreen -r SomeScreen\n\n# list all screen sessions for current user\nscreen -ls\n\n# list all screen sessions on current host\nls -laR /var/run/screen/\n\n# Start a new screen session\nscreen\n\n\n\n\n\nset\n\n\n# stop script execution if error happen ( exitcode != 0 ) http://tldp.org/LDP/abs/html/exitcodes.html\nset -e\n\n\n\n\n\nsetuid\n\n\n# setuid/setgid makes a program start with the permissions of the user that owns\n# the file, regardless of the user running the program. This can be abused to \n# take over a machine, so use this with care. Note that on most systems, you\n# cannot set this on interpreted programs (shell scripts, for example)\n#\n# Marking a program setuid is done with the 'chmod' command, using either the first\n# digit of a 4 bit permission set, or using the 'u' flag when using letters.\n#\n# To set a program as setuid and setgid with letters:\nchmod ug+s /usr/bin/mybinary\n\n# To set a program as setuid and setgid with regular mode digits:\nchmod 6744 /usr/bin/mybinary\n\n\n\n\n\nshutdown\n\n\n# restart machine in 30 minutes\nshutdown -r +30\n\n# shutdown machine immediately\nshutdown -h now\n\n\n\n\n\nsleep\n\n\n# sleep (wait) for 1 second\nsleep 1\nsleep 1s\n\n# sleep (wait) for 1 minute\nsleep 1m\n\n\n\n\n\nsort\n\n\n# Sort a file alphabetically:\nsort filename\n\n# Sort your command history alphabetically, skipping the command number:\nhistory | sort -k 2\n# Lines look like this:\n#     23 anothercommand\n#     22 somecommand\n#     24 stillanothercommand\n\n# Sort files by number of matches in grep results:\ngrep -c searchterm * | sort -t: -n -k 2\n\n# Lines look like this:\n#     filename:2\n#     anotherfile:3\n# Sort files by human readable size in a directory:\ndu -h --max-depth=1 | sort -h\n\n# Lines look like this:\n#     4.0K    ./SomeDirectory\n#     12K     ./AnotherDirectory\n#     2.4M    ./SomeFile\n#     1.5G    ./LargeFile\n# Sort the contents of all .csv files in a directory\nsort /path/to/directory/*.csv\n\n# Sort in parallel, specifying the number of concurrent operations.\nsort --parallel=\nnum_ops\n\n\n\n\n\n\nsource\n\n\n# your_comment_here\nWTF does source do?\nWhen a script is run using `source' it runs within the existing shell, any variables created or modified by the script will remain available after the script completes\n\n\n\n\n\nsplit\n\n\n# split a file by number of lines \nsplit -l 5000 filename\n\n# split a gz file into equal sized gz pieces from stdin\nzcat bigfile.gz | split -d --filter='gzip \n $FILE.gz' --number=r/32 - /output/dir\n\n\n\n\n\nssh\n\n\n# ssh port forwarding\n# route all local requests to 8080 to remote port 80\nssh -L 8080:localhost:80 user@remoteserver\n\n# Create ssh tunnel with SOCKS interface on localhost:1234\nssh -D 1234 user@remotemachine\n\n# SSH-VPN create a tun interface with ssh (use as root on both sides) add ip's to both sides and change your default route\nssh root@server -vNTw any:any\n\n# see your path on a remote machine from a non-login shell\nssh you@remotemachine echo  $PATH\n\n#Open a tunnel from 192.168.1.10's port 80 to your local port 2001 \nssh -N -L2001:localhost:80 192.168.1.10\n\n# You can connect to the remote screen or tmux directly\nssh user@host -t 'tmux a -t session_name||tmux new -s session_name'\n\n# ssh tunneling traffic to port 1080\nssh -C2ND 1080 user@host\n\n# To enable the ability to forward X11 windows to a machine logged in using SSH. This is great if you would like to run a graphical program from a remote computer on your local machine logged in with SSH.\nssh -X user@remote-server\n\n# open a previously created tomb with this:\n$ sudo tomb open secret.tomb -k secret.tomb.key\n\n# close all tombs with this:\n$ tomb close\n\n# to create a tomb, do this:\n# 1. create a file of 100MB called secret.tomb\n$ sudo tomb dig -s 100 secret.tomb\n# 2. create a key-file called secret.tomb.key\n$ sudo tomb forge secret.tomb.key\n# 3. lock the tomb with the key-file\n$ sudo tomb lock secret.tomb -k secret.tomb.key\n# Just connect to a remote server and get a shell\n# -p is needed, if remote SSH is not listining on\n# standard port (22)\n\nssh -p 1234 user@remoteserver.com\n\n\n\n\n\nssh-copy-id\n\n\n# upload the key file ~/.ssh/id_rsa via ssh on port 80 to server\nssh-copy-id -i ~/.ssh/id_rsa example.com\n\n\n\n\n\nsshfs\n\n\n# mount foobar from remote host to existing local mountpoint, show Foobar as\n# volume name in Finder and automatically reconnect upon loss of connection.\nsshfs user@host:/foobar /Volumes/foobar -ovolname=Foobar,reconnect\n\n\n\n\n\nssh-keygen\n\n\n# generate a key without any keyboard interaction\nssh-keygen -t dsa -N '' -f path/to/keyfile -y\n# remove host from known_hosts file\nssh-keygen -R hostname\n\n\n\n\n\nstat\n\n\n# Display the file type and permissions of a file/folder in octal format\nstat -f %p filename\n\n\n\n\n\nsu\n\n\n# change the current user to el\nsu el\n\n# run command \nrm -rf bar\n as user \ntim\n\nsu tim -c 'rm -rf bar'\n\n\n\n\n\nsudo\n\n\n# Run previous command with sudo \nsudo !!\n\n# Run a command run X commands ago with sudo (X id a number)\nsudo !-X\nsudo !-2\n\n# Allows you to execute sudo commands for 5 minutes without repeatedly entering a password for 5 minutes. Each successive call to 'sudo -v' extends the lease by +5 minutes\nsudo -v\n\n# Forgot to sudo? Run the previous command as root.  \nsudo !!\n\n# Switches you to root user allowing you to execute \n# commands at sudo level without having to use sudo\n# for every execution\n# USE WITH CAUTION!!!\nsudo su\n\n# Allows users to run programs as the 'root' user. Super powerful. \n# Caution advised. Recommended alias: 'sudude'. \n# sudo chmod a+x\nsudo\n\n\n\n\n\ntar\n\n\n# Create a tar archive\ntar -cf archive.tar file1 file2 ... fileN\n\n# Create a tar gzipp'd archive\ntar -zcf archive.tar.gz file1 file2 ... fileN\n\n# Create multi-part tar archives from a directory\ntar cf - /path/to/directory|split -b\nmax_size_of_part\nM - archive.tar\n\n# Extract all files from a tar archive\ntar -xf archive.tar\n\n# Extract all files from a tar gzipped archive\ntar -zxf archive.tar.gz\n\n# Extract one file from a tar archive\ntar -xf archive.tar the_one_file\n\n# Lists all files in a tar archive\ntar -tf archive.tar\n# Create a tar file:\ntar cf archive.tar file1 [...]\n\n# Create a compressed tar file:\ntar cjf archive.tar.bz2 file1 [...]\n\n# Create a older compressed tar file:\ntar czf archive.tar.gz file [...]\n\n# Extract a .tar, .tar.gz, .tgz, .tar.bz, or .tbz2 file:\ntar xf archive.tbz2\n\n# list the files inside the archive:\ntar tf archive.tar\n\n# Unzip to target directory\ntar -xvf file.zip -C target_directory_path\n\n# extract a tarball\nbro -xjf package.tar.bz2\n\n# package up a folder and ignore a subfolder:\ntar --exclude=\nproject/.git\n -czvf ~/Downloads/project.tgz project/\n\n# exclude a file/directory from your tar archive\ntar cvf archive.tar --exclude=.svn *\n\n# unpacking stuff with tar is obnoxious\n# heres a useful shell script for unpacking with tar\n# throw it in your .bashrc as a function or whatever.\nif [ -f \n$1\n ] ; then\n    case \n$1\n in\n        *.tar.bz2)   tar xvjf \n$1\n    ;;\n        *.tar.gz)    tar xvzf \n$1\n    ;;\n        *.tar)       tar xvf \n$1\n     ;;\n        *.tbz2)      tar xvjf \n$1\n    ;;\n        *.tgz)       tar xvzf \n$1\n    ;;\n        *.tar.xz)    tar xJf \n$1\n     ;;\n        *) echo \ndon't know how to extract \n$1\n...\n ;;\n    esac\nelse\n    echo \n$1\n is not a valid file!\n\nfi\n\n# copy directory\ntar -c source_dir | tar -xC destination_dir\n\n# unpacking stuff with tar is obnoxious\n# check out unp (unpack (almost) everything)\nbrew install unp\napt-get install unp\n\n\n\n\n\ntee\n\n\n# echo the text \nhi\n to STDOUT and to file.txt\necho \nhi\n | tee -a file.txt\n\n# save your ruby irb session as you go\nirb | tee -a save-todays-ruby-session.hist\n\n\n\n\n\ntest\n\n\n# test if a file exists\ntest -f somefile\n\n# test is a directory exists\ntest -d somedirectory\n\n# test if two strings are equal\nSTRING1 = STRING2\n\n# test if two integers are qual\nINTEGER1 -eq INTEGER2\n\n# your_comment_here\nxyour_command_here\n\n# your_comment_here\ntest\n\n\n\n\n\ntime\n\n\n# time - run programs and summarize system resource usage\ntime [program]\n\n\n\n\n\ntop\n\n\n# monitor the process with pid 1, 2, and 3 \ntop -p 1, 2, 3\n\n# Run the top command once, and only show the header and first 8 processes\n# Can be further parsed with '| awk ...' in various scripts\ntop -n 1 | head -n 15\n\n\n\n\n\ntouch\n\n\n# Updates the timestamp of the file 'temp' or creates it if it doesn't exist\ntouch temp\n# Change the unix timestamp of a file to an arbitary date\ntouch -d '12 Jun 2005 10:05' /path/to/target_file\n\n\n\n\n\ntree\n\n\n# display all files and folders in a 'tree' layout\ntree ~\n\n# Display only the directories in tree format \ntree -d\n\n\n\n\n\ntype\n\n\n# show the command that is run if you type a command\n# displays the kind of command the shell will execute, given a particular command name\ntype ls\n\n\n\n\n\numount\n\n\n# Unmount (rather than eject) a volume (like a CD or a second hard drive)\numount /media/[your_username]/[volume_name]\n\n\n\n\n\nuniq\n\n\n# This will show a count of all lines that have more than 1 copy. So only show the duplicates. (-d)\nuniq -cd\n\n# your_comment_here\nuniq unique_file.data \nsort data_file | uniq\n\n# Count number of dublicates in file\nuniq -C\n\n\n\n\n\nunzip\n\n\n# unzip a zip file, extract in current directory\nunzip -e archive.zip\n\n# Extracts contents to specified directory\nunzip archive.zip -d /path/to/other/directory/\n\n# unzip many files in one command: must add   before wildchar\n# otherwise command will extract first zip and search other files in it\nunzip -e  *.zip\n\n# use unzip -l to see the contents of an archive\nunzip -l archive.zip\n\n# Unzip overwriting content of current directory\nunzip -o archive.zip\n\n# Unzip all *.zip files\nunzip '*.zip'\n\n\n\n\n\nuptime\n\n\n# uptime - Tell how long the system has been running.\nuptime\n\n\n\n\n\nuseradd\n\n\n# Create a new user, set ahis shell, create his home directory, set it to /home/john, and name the user\nuseradd -s /bin/bash -m -d /home/john john\n\n\n\n\n\nusermod\n\n\n# Add existing user to existing group\nusermod -a -G group_name user_name\n\n\n\n\n\nwc\n\n\n# count the number of lines in a file\nwc -l [file ...]\n\n# Find the length of the longest line in a file, good for \n80 char checks\nwc -L code.txt\n\n# Count the number of lines of all files in a directory\nfind path/to/dir | xargs wc -l\n\n\n\n\n\nwget\n\n\n# Saves the HTML of a webpage to a particular file.\nwget -O bro.html http://bropages.org/\n\n# Download a file from a webserver and save to hard drive.\nwget http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2\n\n# Download an entire website (more robust than wget -m)\nwget --random-wait -r -p -e robots=off -U mozilla http://www.example.com\n\n# Save file into directory\n# (set prefix for downloads)\nwget -P path/to/directory http://bropages.org/bro.html\n\n# wget example useful for automating a web call and appending results to a log\nwget -q --no-check-certificate -O - \nhttp://bropages.org\n \n ~/bropages.log\n\n# When downloading a huge file, it may become practical to pause and resume a download. Adding the option -c or --continue will resume an interrupted download.\nwget -c https://scans.io/data/umich/https/certificates/raw_certificates.csv.gz\n\n# Open tarball without downloading\nwget -qO - \nhttp://www.tarball.com/tarball.gz\n | tar zxvf -\n\n# Get your external ip address from icanhazip.com and echo to STDOUT\nwget -O - http://icanhazip.com/ | tail\n\n# (continue) downloading file from URL wich requires HTTP authentication\nwget -c --http-user=username --http-password=password http://auth.example.com/file.dat\n\n# Download a list of urls from a file \nwget -i urls.txt\n\n# Recursively download only files with the pdf extension upto two levels away\nwget -r -l 2 -A \n*.pdf\n http://papers.xtremepapers.com/CIE/Cambridge%20Checkpoint/\n\n# Download a web page or file, and name the resultant file what the remote server says it should be.\n# (Great for outfits like Sourceforge where the download link is a long, intractable string of characters)\nwget --content-disposition http://example.com/download.php?id=12345\namp;file=foobar.tgz\namp;datetime=20141004\n\n# Mirror an entire website\nwget -m http://google.com\n\n\n\n\n\nwhereis\n\n\n# Searches through all my binary directories in my root folder for the executable \nls\n.  Tells me where the program is located.\nwhereis ls\n\n# Find waldo.\nwhereis waldo\n\n\n\n\n\nwhich\n\n\n# locates executable\nwhich bro\n\n# Shows all install locations of an executable (in this case ruby)\nwhich -a ruby\n\n\n\n\n\nwhois\n\n\n# Display WHOIS information of given website.\nwhois http://example.com\n\n# Make whois ip if you only know domain name via host and awk\nfor i in `host bropages.org | head -1 | awk -F\n[: ]+\n '/has address/ {print $4}'`; do whois $i; done\n\n# Make whois ip if you only know domain name via host and sed\nfor i in `host bropages.org | head -1 | sed 's/ [ 0-9]*//g'`; do whois $i; done\n\n# Make whois ip if you only know domain name via host and grep\nfor i in `host bropages.org | head -1 | grep -Eo '([0-9]{1,3} .){1,3}[0-9]{1,3}'`; do whois $i; done\n\n\n\n\n\nyes\n\n\n# Repeatedly outputs \nkitty\n\nyes kitty\n\n# Repeatedly outputs \ny\n\nyes\n\n\n\n\n\nyum\n\n\n# Lists the installed packages\nyum list installed\n\n# your_comment_here\nyum search \nname\n : searches for \nname\n in packages\n\n# searches for \nname\n in the packages\nyum search \nname\n\n\n# Search for a command or binary inside any package\nyum provides */\nyour_command\n\n\n# Lists all the groups of software you can install with yum\nyum grouplist\n\n\n\n\n\nzip\n\n\n# Zips up everything in my current directory recursively into the file archive.zip\nzip -r archive.zip *\n\n# put README.txt and test.c into the zip file named archive.zip\nzip archive.zip README.txt test.c\n\n# Recursively zip all files in the directory foo into foo.zip\nzip -r foo foo\n\n# Recursively zip everything, starting from the current directory, that matches the given pattern into archive.zip\n# Note: the `R` flag is case sensitive!\nzip -R archive \n*.png\n\nzip --recurse-patterns archive \n*.png\n\n\n# Use the `unzip` command to extract a zip file, unlike `tar` and `gzip` where you use a command line argument to decompress\nunzip file.zip # Extracts to current directory\nunzup file.zip -d dir # Extracts to specified directory", 
            "title": "cmds_example"
        }, 
        {
            "loc": "/cmds/cmds_overview/index.html", 
            "tags": "", 
            "text": "command\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na2p\n\n\nCreate a Perl script from an AWK script.\n\n\n\n\n\n\nac\n\n\nPrint statistics about user connection time.\n\n\n\n\n\n\naccess\n\n\nThe system function which checks a user's permissions to access a file.\n\n\n\n\n\n\naddgroup\n\n\nAdd a group to the system.\n\n\n\n\n\n\nadduser\n\n\nAdd a user to the system.\n\n\n\n\n\n\nagrep\n\n\nVersion of the grep utility which also matches approximate patterns.\n\n\n\n\n\n\nalias\n\n\nCreate an alternate name for a command.\n\n\n\n\n\n\napropos\n\n\nSearch the manual pages for a keyword or regular expression.\n\n\n\n\n\n\napt-cache\n\n\nSearch for information about software packages available through APT.\n\n\n\n\n\n\napt-get\n\n\nCommand line tool for managing APT software packages.\n\n\n\n\n\n\naptitude\n\n\nText-based front end for the APT package management system.\n\n\n\n\n\n\nar\n\n\nCreate, modify, and extract files from archives.\n\n\n\n\n\n\narch\n\n\nDisplay the architecture of the system.\n\n\n\n\n\n\narp\n\n\nManipulate the system ARP cache.\n\n\n\n\n\n\nas\n\n\nAn assembler.\n\n\n\n\n\n\naspell\n\n\nAn interactive spell checker.\n\n\n\n\n\n\nat\n\n\nSchedule a command to be run at a certain time.\n\n\n\n\n\n\nawk\n\n\nInterpreter for the AWK text processing programming language.\n\n\n\n\n\n\nbasename\n\n\nStrip directory information and suffixes from filenames.\n\n\n\n\n\n\nbash\n\n\nThe Bourne Again shell command interpreter.\n\n\n\n\n\n\nbc\n\n\nA calculator.\n\n\n\n\n\n\nbdiff\n\n\nIdentify the differences between two very big files.\n\n\n\n\n\n\nbfs\n\n\nAn editor which can load very large files.\n\n\n\n\n\n\nbg\n\n\nResume a suspended program without bringing it to the foreground.\n\n\n\n\n\n\nbiff\n\n\nReceive detailed mail notifications at the command line.\n\n\n\n\n\n\nbreak\n\n\nBreak out of a while, for, foreach, or until loop.\n\n\n\n\n\n\nbs\n\n\nA Linux version of the popular game  Battleship. \n\n\n\n\n\n\nbye\n\n\nOn some systems, an alias for the exit command.\n\n\n\n\n\n\ncal\n\n\nDisplay a conveniently-formatted calendar from the command line.\n\n\n\n\n\n\ncalendar\n\n\nDisplay appointments and reminders.\n\n\n\n\n\n\ncancel\n\n\nCancel a print job under the System V operating system.\n\n\n\n\n\n\ncat\n\n\nOutput the contents of a file.\n\n\n\n\n\n\ncc\n\n\nCompiler of the C programming language.\n\n\n\n\n\n\ncd\n\n\nChange the working directory.\n\n\n\n\n\n\ncfdisk\n\n\nA more user-friendly version of the fdisk disk partitioning utility.\n\n\n\n\n\n\nchdir\n\n\nThe system function for changing the working directory.\n\n\n\n\n\n\ncheckeq\n\n\nLanguage processor which assists in describing equations.\n\n\n\n\n\n\nchecknr\n\n\nCheck nroff and troff files for errors.\n\n\n\n\n\n\nchfn\n\n\nChange a user's finger information.\n\n\n\n\n\n\nchgrp\n\n\nChange the group ownership of files and directories.\n\n\n\n\n\n\nchkey\n\n\nChange the secure RPC key pair on SunOS.\n\n\n\n\n\n\nchmod\n\n\nChange the permissions of files and directories.\n\n\n\n\n\n\nchown\n\n\nChange the ownership of files and directories.\n\n\n\n\n\n\nchroot\n\n\nRun a command or shell from another directory, and treat that directory as root.\n\n\n\n\n\n\nchsh\n\n\nChange login shell.\n\n\n\n\n\n\ncksum\n\n\nCalculate and display a CRC for files.\n\n\n\n\n\n\nclear\n\n\nClears the screen.\n\n\n\n\n\n\ncmp\n\n\nCompare two files byte by byte.\n\n\n\n\n\n\ncol\n\n\nFilter reverse linefeeds.\n\n\n\n\n\n\ncomm\n\n\nCompare two sorted files line by line.\n\n\n\n\n\n\ncompress\n\n\nCompress a file or files.\n\n\n\n\n\n\ncontinue\n\n\nBreak out of a while, for, foreach, or until loop.\n\n\n\n\n\n\ncp\n\n\nCopy files and directories.\n\n\n\n\n\n\ncpio\n\n\nCopy files to or from archives.\n\n\n\n\n\n\ncrontab\n\n\nView and edit a list of jobs for the system to run at regular intervals.\n\n\n\n\n\n\ncrypt\n\n\nSystem function used to encrypt passwords.\n\n\n\n\n\n\ncsh\n\n\nThe C shell command interpreter.\n\n\n\n\n\n\ncsplit\n\n\nSplit files based on a defined context.\n\n\n\n\n\n\nctags\n\n\nCreate tag files for source code.\n\n\n\n\n\n\ncu\n\n\nCalls up another system, acting as a dial-in terminal.\n\n\n\n\n\n\ncurl\n\n\nTransfer data to or from a server.\n\n\n\n\n\n\ncut\n\n\nRemove or  cut out  sections of each line of a file or files.\n\n\n\n\n\n\ndate\n\n\nOutput the current date and time.\n\n\n\n\n\n\ndc\n\n\nAn arbitrary-precision arithmetic package.\n\n\n\n\n\n\ndd\n\n\nCopy and convert the encoding of files.\n\n\n\n\n\n\ndelgroup\n\n\nRemove a group from the system.\n\n\n\n\n\n\ndeluser\n\n\nRemove a user from the system.\n\n\n\n\n\n\ndepmod\n\n\nGenerate a list of kernel module dependences and associated map files.\n\n\n\n\n\n\nderoff\n\n\nRemove nroff/troff, tbl, and eqn constructs from files.\n\n\n\n\n\n\ndf\n\n\nReport the amount of available disk space on file systems.\n\n\n\n\n\n\ndhclient\n\n\nCommunicate with a DHCP server to obtain a dynamic IP address.\n\n\n\n\n\n\ndiff\n\n\nIdentify the differences between two files.\n\n\n\n\n\n\ndig\n\n\nDNS lookup utility.\n\n\n\n\n\n\ndircmp\n\n\nCompare the contents of two directories, listing unique files.\n\n\n\n\n\n\ndirname\n\n\nStrip the filename from a pathname, leaving only the directory component.\n\n\n\n\n\n\ndmesg\n\n\nPrint or control the kernel ring buffer.\n\n\n\n\n\n\ndos2unix\n\n\nConvert text files between DOS and Unix formats.\n\n\n\n\n\n\ndpkg\n\n\nQuery, install, remove, and maintain Debian software packages and their dependencies.\n\n\n\n\n\n\ndpost\n\n\nTranslate files created by troff into PostScript under Solaris.\n\n\n\n\n\n\ndu\n\n\nReport the amount of disk space used by a file or files.\n\n\n\n\n\n\necho\n\n\nOutput text.\n\n\n\n\n\n\ned\n\n\nA simple text editor.\n\n\n\n\n\n\nedit\n\n\nA text editor.\n\n\n\n\n\n\negrep\n\n\nFilter text which matches an extended regular expression.\n\n\n\n\n\n\neject\n\n\nEject removable media.\n\n\n\n\n\n\nelm\n\n\nA mail client.\n\n\n\n\n\n\nemacs\n\n\nA highly extensible text editor.\n\n\n\n\n\n\nenable\n\n\nEnable and disable LP printers.\n\n\n\n\n\n\nenv\n\n\nReport the value of environment variables.\n\n\n\n\n\n\neqn\n\n\nLanguage processor for describing equations.\n\n\n\n\n\n\nex\n\n\nLine-editor mode of the vi text editor.\n\n\n\n\n\n\nexit\n\n\nExit the command shell.\n\n\n\n\n\n\nexpand\n\n\nExpand tab characters to a series of spaces.\n\n\n\n\n\n\nexpr\n\n\nEvaluate arguments as an expression.\n\n\n\n\n\n\nfc\n\n\nList, edit, or re-execute commands from the command history.\n\n\n\n\n\n\nfdisk\n\n\nA disk partioning utility.\n\n\n\n\n\n\nfg\n\n\nResumes a suspended job and brings it to the foreground.\n\n\n\n\n\n\nfgrep\n\n\nFilter text which matches a fixed-character string.\n\n\n\n\n\n\nfile\n\n\nDetermine a file's type.\n\n\n\n\n\n\nfind\n\n\nFind files within a directory hierarchy.\n\n\n\n\n\n\nfindsmb\n\n\nList information about machines networked with the Samba protocol.\n\n\n\n\n\n\nfinger\n\n\nList information about a user.\n\n\n\n\n\n\nfmt\n\n\nA formatter for simplifying and optimizing text files.\n\n\n\n\n\n\nfold\n\n\nWrap lines of text to a specified line width.\n\n\n\n\n\n\nfor\n\n\nExecute a set of commands in a repeating loop.\n\n\n\n\n\n\nforeach\n\n\nExecute a set of commands once for each of a given set of input items.\n\n\n\n\n\n\nfree\n\n\nDisplay the amount of free and used memory.\n\n\n\n\n\n\nfsck\n\n\nCheck and repair a Linux file system.\n\n\n\n\n\n\nftp\n\n\nConduct an interactive FTP session over a secure network connection.\n\n\n\n\n\n\nfuser\n\n\nIdentify processes using files or sockets.\n\n\n\n\n\n\ngawk\n\n\nGNU's version of the AWK programming language.\n\n\n\n\n\n\ngetfacl\n\n\nDisplay file access control lists.\n\n\n\n\n\n\ngethostname\n\n\nSystem call to get the hostname of the current processor.\n\n\n\n\n\n\ngpasswd\n\n\nAdminister /etc/group and /etc/gshadow.\n\n\n\n\n\n\ngprof\n\n\nDisplay call graph profile data.\n\n\n\n\n\n\ngrep\n\n\nFilter text which matches a regular expression.\n\n\n\n\n\n\ngroupadd\n\n\nAdd a group to the system.\n\n\n\n\n\n\ngroupdel\n\n\nRemove a group from the system.\n\n\n\n\n\n\ngroupmod\n\n\nModify a group definition.\n\n\n\n\n\n\ngunzip\n\n\nExpand compressed files.\n\n\n\n\n\n\ngview\n\n\nAn alias for vim.\n\n\n\n\n\n\ngvim\n\n\nAn alias for vim.\n\n\n\n\n\n\ngzip\n\n\nCreate, modify, list the contents of, and extract files from GNU zip archives.\n\n\n\n\n\n\nhalt\n\n\nStop the computer.\n\n\n\n\n\n\nhash\n\n\nAccess internal hash tables under Solaris.\n\n\n\n\n\n\nhashstat\n\n\nEvaluate the effectiveness of internal hash tables under Solaris.\n\n\n\n\n\n\nhead\n\n\nDisplay the first lines of a file.\n\n\n\n\n\n\nhelp\n\n\nDisplay help for built-in shell commands.\n\n\n\n\n\n\nhistory\n\n\nDisplay the command history.\n\n\n\n\n\n\nhost\n\n\nConvert a host name to an IP address and vice versa.\n\n\n\n\n\n\nhostid\n\n\nPrint the numeric identifier for the current host.\n\n\n\n\n\n\nhostname\n\n\nSet or print the hostname of system.\n\n\n\n\n\n\nid\n\n\nDisplay real and effective user and group IDs.\n\n\n\n\n\n\nifconfig\n\n\nView or modify the configuration of network interfaces.\n\n\n\n\n\n\nifdown\n\n\nDisable a network interface.\n\n\n\n\n\n\nifquery\n\n\nParse information about a network interface.\n\n\n\n\n\n\nifup\n\n\nEnable a network interface.\n\n\n\n\n\n\ninfo\n\n\nRead Info documents.\n\n\n\n\n\n\ninit\n\n\nThe parent of all processes on the system.\n\n\n\n\n\n\niostat\n\n\nReport CPU and I/O statistics for devices and partitions.\n\n\n\n\n\n\nip\n\n\nDisplay and manipulate information about routing, devices, policy routing and tunnels.\n\n\n\n\n\n\nisalist\n\n\nDisplay the native instruction sets available on a Solaris system.\n\n\n\n\n\n\niwconfig\n\n\nConfigure a wireless network interface.\n\n\n\n\n\n\njobs\n\n\nList the status of all running jobs.\n\n\n\n\n\n\njoin\n\n\nJoin the lines of two files which share a common field of data.\n\n\n\n\n\n\nkeylogin\n\n\nDecrypt a user's secret key on SunOS.\n\n\n\n\n\n\nkill\n\n\nSend a signal to a process, affecting its behavior or killing it.\n\n\n\n\n\n\nkillall\n\n\nKill processes by name.\n\n\n\n\n\n\nksh\n\n\nThe Korn shell command interpreter.\n\n\n\n\n\n\nlast\n\n\nDisplay a listing of the most recently logged-in users.\n\n\n\n\n\n\nld\n\n\nLink editor for object files.\n\n\n\n\n\n\nldd\n\n\nList dynamic dependencies of executable files or shared objects.\n\n\n\n\n\n\nless\n\n\nScrolling text viewer.\n\n\n\n\n\n\nlex\n\n\nGenerate programs for performing lexical tasks.\n\n\n\n\n\n\nlink\n\n\nCreate a hard link to a regular file.\n\n\n\n\n\n\nln\n\n\nCreate a link, or a symbolic link, to a file or directory.\n\n\n\n\n\n\nlo\n\n\nExit the command shell.\n\n\n\n\n\n\nlocate\n\n\nSearch a local database to find files by name.\n\n\n\n\n\n\nlogin\n\n\nBegin a session on a system.\n\n\n\n\n\n\nlogname\n\n\nReturn a user's login name.\n\n\n\n\n\n\nlogout\n\n\nExit the command shell.\n\n\n\n\n\n\nlosetup\n\n\nSet up and control loop devices.\n\n\n\n\n\n\nlp\n\n\nPrint a file on the System V operating system.\n\n\n\n\n\n\nlpadmin\n\n\nConfigure LP print services.\n\n\n\n\n\n\nlpc\n\n\nControl line printers.\n\n\n\n\n\n\nlpq\n\n\nList the status of available printers.\n\n\n\n\n\n\nlpr\n\n\nSubmit print requests.\n\n\n\n\n\n\nlprm\n\n\nRemove requests from the print queue.\n\n\n\n\n\n\nlpstat\n\n\nList the status of the LP print services.\n\n\n\n\n\n\nls\n\n\nList the contents of a directory or directories.\n\n\n\n\n\n\nlsof\n\n\nList open files.\n\n\n\n\n\n\nlzcat\n\n\nView compressed .lzma files.\n\n\n\n\n\n\nlzma\n\n\nCompress files to .lzma file.\n\n\n\n\n\n\nmach\n\n\nDisplay the processor of the current system.\n\n\n\n\n\n\nmail\n\n\nRead, compose, and manage mail.\n\n\n\n\n\n\nmailcompat\n\n\nProvide SunOS 4.x compatibility for the Solaris mailbox format.\n\n\n\n\n\n\nmailx\n\n\nProcess mail messages.\n\n\n\n\n\n\nmake\n\n\nAutomatically build executable programs and libraries from source code.\n\n\n\n\n\n\nman\n\n\nDisplay the manual page of a given command.\n\n\n\n\n\n\nmerge\n\n\nPerforms a merge of the contents of three files.\n\n\n\n\n\n\nmesg\n\n\nControl if (non-root) users can send messages to your terminal.\n\n\n\n\n\n\nmii-tool\n\n\nView and manipulate the status of a media-independent interface.\n\n\n\n\n\n\nmkdir\n\n\nCreate a directory.\n\n\n\n\n\n\nmkfs\n\n\nBuild a Linux file system, usually a hard disk partition.\n\n\n\n\n\n\nmkswap\n\n\nSet up a Linux swap area.\n\n\n\n\n\n\nmodprobe\n\n\nAdd and remove modules from the Linux kernel.\n\n\n\n\n\n\nmore\n\n\nDisplay text one screen at a time.\n\n\n\n\n\n\nmount\n\n\nMount a file system so that its data may be accessed.\n\n\n\n\n\n\nmt\n\n\nControl magnetic tapes.\n\n\n\n\n\n\nmv\n\n\nMove files and directories from one location to another, and optionally rename them.\n\n\n\n\n\n\nmyisamchk\n\n\nCheck, repair, optimize, or fetch information about a MySQL database.\n\n\n\n\n\n\nmysql\n\n\nAn open-source relational database management system.\n\n\n\n\n\n\nmysqldump\n\n\nA tool for backing up or transferring MySQL databases.\n\n\n\n\n\n\nnc\n\n\nTCP/IP swiss army knife.\n\n\n\n\n\n\nneqn\n\n\nLanguage processor for describing equations.\n\n\n\n\n\n\nnetstat\n\n\nPrint information about network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.\n\n\n\n\n\n\nnewalias\n\n\nInstall new elm aliases.\n\n\n\n\n\n\nnewform\n\n\nChange the format of a text file under Solaris.\n\n\n\n\n\n\nnewgrp\n\n\nLog into a new group.\n\n\n\n\n\n\nnice\n\n\nInvoke a command with an altered scheduling priority.\n\n\n\n\n\n\nniscat\n\n\nDisplay NIS+ tables and objects.\n\n\n\n\n\n\nnischmod\n\n\nChange access rights on a NIS+ object.\n\n\n\n\n\n\nnischown\n\n\nChange the owner of a NIS+ object on a system running Solaris.\n\n\n\n\n\n\nnischttl\n\n\nChange the time to live value of a NIS+ object.\n\n\n\n\n\n\nnisdefaults\n\n\nDisplay NIS+ default values.\n\n\n\n\n\n\nnisgrep\n\n\nUtilities for searching NIS+ tables.\n\n\n\n\n\n\nnismatch\n\n\nUtilities for searching NIS+ tables.\n\n\n\n\n\n\nnispasswd\n\n\nChange NIS+ password information.\n\n\n\n\n\n\nnistbladm\n\n\nAdminister NIS+ tables.\n\n\n\n\n\n\nnl\n\n\nNumber the lines in a file.\n\n\n\n\n\n\nnmap\n\n\nNetwork exploration tool and security port scanner.\n\n\n\n\n\n\nnohup\n\n\nInstruct a command to continue running even if the session is disconnected or the user logs out.\n\n\n\n\n\n\nnroff\n\n\nFormat documents for terminal display or line-printer.\n\n\n\n\n\n\nnslookup\n\n\nQuery a name server for information about a remote host.\n\n\n\n\n\n\nod\n\n\nDump files in octal and other formats.\n\n\n\n\n\n\non\n\n\nExecute a command on a remote system, but with the local environment.\n\n\n\n\n\n\nonintr\n\n\nBuilt-in shell function which responds to hardware interrupts.\n\n\n\n\n\n\noptisa\n\n\nDetermine which instruction set is optimal to use on a Solaris system.\n\n\n\n\n\n\npack\n\n\nCompress files using a Huffman algorithm.\n\n\n\n\n\n\npagesize\n\n\nDisplay the size of a page of memory in bytes.\n\n\n\n\n\n\nparted\n\n\nA disk partition manipulation program.\n\n\n\n\n\n\npartprobe\n\n\nInform the operating system about changes to the partition table.\n\n\n\n\n\n\npasswd\n\n\nChange a user's password.\n\n\n\n\n\n\npaste\n\n\nMerge corresponding lines of files.\n\n\n\n\n\n\npax\n\n\nRead and write file archives, and copy directory hierarchies.\n\n\n\n\n\n\npcat\n\n\nPrint the uncompressed contents of a compressed file.\n\n\n\n\n\n\nperl\n\n\nInterpreter for the Perl programming language.\n\n\n\n\n\n\npg\n\n\nBrowse page by page through text files.\n\n\n\n\n\n\npgrep\n\n\nLook up processes based on the name or other attributes.\n\n\n\n\n\n\npico\n\n\nA simple text editor.\n\n\n\n\n\n\npine\n\n\nA client for using mail and newsgroups.\n\n\n\n\n\n\nping\n\n\nSend ICMP ECHO_REQUEST packets to network hosts.\n\n\n\n\n\n\npkill\n\n\nSend a signal to any process whose attributes match a regular expression.\n\n\n\n\n\n\npoweroff\n\n\nStop the computer.\n\n\n\n\n\n\npr\n\n\nFormat a text file for printing.\n\n\n\n\n\n\nprintenv\n\n\nPrint all or part of the environment.\n\n\n\n\n\n\nprintf\n\n\nWrite formatted output.\n\n\n\n\n\n\npriocntl\n\n\nDisplay or set scheduling parameters of a processes under Solaris.\n\n\n\n\n\n\nps\n\n\nReport the status of a process or processes.\n\n\n\n\n\n\npstree\n\n\nDisplay processes in a tree format.\n\n\n\n\n\n\npvs\n\n\nDisplay the internal version information of dynamic objects within an ELF file.\n\n\n\n\n\n\npwd\n\n\nPrint the name of the working directory.\n\n\n\n\n\n\nquit\n\n\nExit the command shell.\n\n\n\n\n\n\nrcp\n\n\nCopy files to or from a remote system.\n\n\n\n\n\n\nreadlink\n\n\nPrint the value of a symbolic link or canonical file name.\n\n\n\n\n\n\nreboot\n\n\nStop the computer.\n\n\n\n\n\n\nred\n\n\nRun ed in  restricted  (less powerful, more secure) mode.\n\n\n\n\n\n\nrehash\n\n\nRecompute internal hash tables under Solaris.\n\n\n\n\n\n\nrename\n\n\nRename multiple files according to a regular expression.\n\n\n\n\n\n\nrenice\n\n\nAlter the priority of running processes.\n\n\n\n\n\n\nrepeat\n\n\nExecute a set of commands in a repeating loop.\n\n\n\n\n\n\nreplace\n\n\nA string-replacement utility.\n\n\n\n\n\n\nrgview\n\n\nAn alias for vim.\n\n\n\n\n\n\nrgvim\n\n\nAn alias for vim.\n\n\n\n\n\n\nrlogin\n\n\nBegin a session on a remote system.\n\n\n\n\n\n\nrm\n\n\nDelete files.\n\n\n\n\n\n\nrmdir\n\n\nRemove a directory.\n\n\n\n\n\n\nrn\n\n\nA newsgroup reader.\n\n\n\n\n\n\nroute\n\n\nDisplay and manipulate the IP routing table.\n\n\n\n\n\n\nrpcinfo\n\n\nReport information about Remote Procedure Calls.\n\n\n\n\n\n\nrsh\n\n\nExecute a command on a remote shell.\n\n\n\n\n\n\nrsync\n\n\nA fast and versatile file copying tool capable of synchronizing files across remote systems.\n\n\n\n\n\n\nrview\n\n\nAn alias for vim.\n\n\n\n\n\n\nrvim\n\n\nAn alias for vim.\n\n\n\n\n\n\ns2p\n\n\nConvert a sed script into a Perl script.\n\n\n\n\n\n\nsag\n\n\nUnder Solaris, Graphically displays system activity data generated by sar.\n\n\n\n\n\n\nsar\n\n\nDisplay CPU activity under Solaris.\n\n\n\n\n\n\nscp\n\n\nCopy files securely over a network connection.\n\n\n\n\n\n\nscreen\n\n\nScreen manager with VT100/ANSI terminal emulation.\n\n\n\n\n\n\nscript\n\n\nRecord everything printed on your screen.\n\n\n\n\n\n\nsdiff\n\n\nCompare two files, side-by-side.\n\n\n\n\n\n\nsed\n\n\nA utility for filtering and transforming text.\n\n\n\n\n\n\nsendmail\n\n\nSend mail.\n\n\n\n\n\n\nservice\n\n\nRun a System V init script.\n\n\n\n\n\n\nset\n\n\nSet the value of an environment variable.\n\n\n\n\n\n\nsetenv\n\n\nSet the value of an environment variable.\n\n\n\n\n\n\nsetfacl\n\n\nModify the access control list of a file or files.\n\n\n\n\n\n\nsethostname\n\n\nSystem calls or set the hostname of the current processor.\n\n\n\n\n\n\nsfdisk\n\n\nA low-level disk partitioning program.\n\n\n\n\n\n\nsftp\n\n\nConduct an interactive FTP session over a secure network connection.\n\n\n\n\n\n\nsh\n\n\nThe Bourne shell command interpreter.\n\n\n\n\n\n\nshred\n\n\nOverwrite a file's contents, irrevocably destroying them.\n\n\n\n\n\n\nshutdown\n\n\nSchedule a time for the system to be powered down.\n\n\n\n\n\n\nsleep\n\n\nWait a given number of seconds.\n\n\n\n\n\n\nslogin\n\n\nLogin to a remote system securely.\n\n\n\n\n\n\nsmbclient\n\n\nAn ftp-like client for accessing SMB/CIFS resources on servers.\n\n\n\n\n\n\nsort\n\n\nSort the lines in a text file.\n\n\n\n\n\n\nspell\n\n\nA spell checker.\n\n\n\n\n\n\nsplit\n\n\nSplit a file into pieces.\n\n\n\n\n\n\nstartx\n\n\nStart an X Window System session.\n\n\n\n\n\n\nstat\n\n\nDisplay the status of a file or filesystem.\n\n\n\n\n\n\nstop\n\n\nStop a running job.\n\n\n\n\n\n\nstrftime\n\n\nFormat strings that represent the system date and time.\n\n\n\n\n\n\nstrip\n\n\nDiscard symbols from object files.\n\n\n\n\n\n\nstty\n\n\nSet options for your terminal display.\n\n\n\n\n\n\nsu\n\n\nBecome the superuser or another user.\n\n\n\n\n\n\nsudo\n\n\nExecute a command as the superuser.\n\n\n\n\n\n\nswapoff\n\n\nDisable a Linux swap area.\n\n\n\n\n\n\nswapon\n\n\nEnable a Linux swap area.\n\n\n\n\n\n\nsysinfo\n\n\nGet and set system information strings.\n\n\n\n\n\n\nsysklogd\n\n\nLinux system logging utilities.\n\n\n\n\n\n\ntabs\n\n\nSet tab stops on a terminal.\n\n\n\n\n\n\ntac\n\n\nOutput the contents of files in reverse order.\n\n\n\n\n\n\ntail\n\n\nPrint the last lines of a text file.\n\n\n\n\n\n\ntalk\n\n\nTalk with other logged in users.\n\n\n\n\n\n\ntar\n\n\nCreate, modify, list the contents of, and extract files from tar archives.\n\n\n\n\n\n\ntbl\n\n\nPreprocessor which formats tables for nroff or troff.\n\n\n\n\n\n\ntcopy\n\n\nCopy a magnetic tape.\n\n\n\n\n\n\ntcpdump\n\n\nCapture raw network traffic.\n\n\n\n\n\n\ntcsh\n\n\nA command-line shell similar to csh, with some additional features.\n\n\n\n\n\n\ntee\n\n\nRoute a file's contents to multiple outputs.\n\n\n\n\n\n\ntelinit\n\n\nProcess control initialization.\n\n\n\n\n\n\ntelnet\n\n\nConnect to a remote system using the telnet protocol.\n\n\n\n\n\n\ntest\n\n\nCheck file types and compare values.\n\n\n\n\n\n\ntime\n\n\nReport how long it takes for a command to execute.\n\n\n\n\n\n\ntimex\n\n\nReport process data and system activity for a specified command.\n\n\n\n\n\n\ntodos\n\n\nConvert text files between DOS and Unix formats.\n\n\n\n\n\n\ntop\n\n\nDisplay a sortable, continually-updated list of processes.\n\n\n\n\n\n\ntouch\n\n\nUpdate the timestamp of a file or directory.\n\n\n\n\n\n\ntput\n\n\nInitialize a terminal or query the terminfo database.\n\n\n\n\n\n\ntr\n\n\nTranslate one set of characters to another.\n\n\n\n\n\n\ntraceroute\n\n\nTrace the route that packets take to a remote host.\n\n\n\n\n\n\ntrap\n\n\nA function which  traps  signals and interrupts, and reacts to them.\n\n\n\n\n\n\ntree\n\n\nList the contents of a file hierarchy visually in a tree format.\n\n\n\n\n\n\ntroff\n\n\nTypeset or format documents for terminal display or line-printer.\n\n\n\n\n\n\ntty\n\n\nPrint the file name of the terminal connected to standard input.\n\n\n\n\n\n\nul\n\n\nTranslate underscores to underlining.\n\n\n\n\n\n\numask\n\n\nGet or set the file mode creation mask.\n\n\n\n\n\n\numount\n\n\nUnmount a file system, making its data inaccessible.\n\n\n\n\n\n\nunalias\n\n\nRemove an alias.\n\n\n\n\n\n\nuname\n\n\nPrint information about the current system.\n\n\n\n\n\n\nuncompress\n\n\nExtract files from compressed archives.\n\n\n\n\n\n\nunhash\n\n\nRemove internal hash table under Solaris.\n\n\n\n\n\n\nuniq\n\n\nIdentify, and optionally filter out, repeated lines in a file.\n\n\n\n\n\n\nunlink\n\n\nRemove a file.\n\n\n\n\n\n\nunlzma\n\n\nDecompress .lzma files.\n\n\n\n\n\n\nunpack\n\n\nExpand a compressed file.\n\n\n\n\n\n\nuntil\n\n\nExecute a set of commands until a certain condition is true.\n\n\n\n\n\n\nunxz\n\n\nDecompress .xz files.\n\n\n\n\n\n\nunzip\n\n\nList, test and extract compressed files in a zip archive.\n\n\n\n\n\n\nuptime\n\n\nDisplay information about how long the system has been running.\n\n\n\n\n\n\nuseradd\n\n\nAdd a user to the system.\n\n\n\n\n\n\nuserdel\n\n\nRemove a user from the system.\n\n\n\n\n\n\nusermod\n\n\nModify a user's account.\n\n\n\n\n\n\nvacation\n\n\nReply to mail automatically.\n\n\n\n\n\n\nvgrind\n\n\n Grind  nice program listings.\n\n\n\n\n\n\nvi\n\n\nText editor based on the visual mode of ex.\n\n\n\n\n\n\nview\n\n\nRun vim in read-only mode.\n\n\n\n\n\n\nvim\n\n\nAn advanced version of vi.\n\n\n\n\n\n\nvipw\n\n\nSafely edit the password file.\n\n\n\n\n\n\nvisudo\n\n\nSafely edit the sudoers file.\n\n\n\n\n\n\nvmstat\n\n\nReport statistics about virtual memory usage.\n\n\n\n\n\n\nw\n\n\nShow who is logged on and what they are doing.\n\n\n\n\n\n\nwait\n\n\nAwait process completion.\n\n\n\n\n\n\nwall\n\n\nSend a message to all logged-in users.\n\n\n\n\n\n\nwc\n\n\nDisplay a count of lines, words, and characters in a file.\n\n\n\n\n\n\nwget\n\n\nDownload files via HTTP or FTP.\n\n\n\n\n\n\nwhatis\n\n\nDisplay short manual page descriptions.\n\n\n\n\n\n\nwhereis\n\n\nLocate the binary, source, and manual page files for a command.\n\n\n\n\n\n\nwhich\n\n\nLocate the binary executable of a command.\n\n\n\n\n\n\nwhile\n\n\nExecute a set of actions while a certain condition is true.\n\n\n\n\n\n\nwho\n\n\nReport which users are logged in to the system.\n\n\n\n\n\n\nwhoami\n\n\nPrint your effective userid.\n\n\n\n\n\n\nwhois\n\n\nAn internet user name directory service.\n\n\n\n\n\n\nwrite\n\n\nSend a message to another user.\n\n\n\n\n\n\nX\n\n\nExecutable of the X Window System.\n\n\n\n\n\n\nXorg\n\n\nThe executable of the X Window System server.\n\n\n\n\n\n\nxargs\n\n\nBuild and execute complex commands, and execute them on multiple files.\n\n\n\n\n\n\nxfd\n\n\nDisplay all the characters in an X font.\n\n\n\n\n\n\nxhost\n\n\nServer access control program for X.\n\n\n\n\n\n\nxinit\n\n\nThe initializer of the X Window System.\n\n\n\n\n\n\nxlsfonts\n\n\nDisplay X font lists.\n\n\n\n\n\n\nxrdb\n\n\nAn X server resource database utility.\n\n\n\n\n\n\nxset\n\n\nA user preference utility for X.\n\n\n\n\n\n\nxterm\n\n\nA terminal emulator for X.\n\n\n\n\n\n\nxz\n\n\nCompress files to .xz files.\n\n\n\n\n\n\nxzcat\n\n\nView compressed .xz files.\n\n\n\n\n\n\nyacc\n\n\n Yet another compiler-compiler. \n\n\n\n\n\n\nyes\n\n\nRepeatedly output a given string, or the letter  y .\n\n\n\n\n\n\nyppasswd\n\n\nChange a network password in an NIS database.\n\n\n\n\n\n\nyum\n\n\nAn interactive rpm-based package manager.\n\n\n\n\n\n\nzcat\n\n\nPrint the uncompressed contents of compressed files.\n\n\n\n\n\n\nzip\n\n\nA compression and archiving utility.\n\n\n\n\n\n\nzipcloak\n\n\nEncrypt files within an existing zip archive.\n\n\n\n\n\n\nzipinfo\n\n\nDisplay technical information about a zip file.\n\n\n\n\n\n\nzipnote\n\n\nView, add, or modify a zip file's comments.\n\n\n\n\n\n\nzipsplit\n\n\nSplit a single zip archive into a set of smaller zip files.", 
            "title": "cmds_man"
        }, 
        {
            "loc": "/cmds/find/index.html", 
            "tags": "", 
            "text": "The examples for find\n\n\nThe examples for find\n\n# Executes a command on the files and folders matching a given pattern, in this case, output the last lines of each .foo file in the current folder and subfolders. \nfind . -name \n*.foo\n -exec tail {}  ;\n\n# Outputs all the file names/paths that start with the name \nCasey\n.  Searches recursively starting from my current directory (.)\n# Throws out any error output by sending it to /dev/null \nfind . -name \nCasey*\n 2\n/dev/null\n\n# Finds all files in and under the current directory that contain 'foo' in their name, ignore case\nfind . -iname '*foo*'\n\n# directory -\n chmod 700\n# file executable -\n chmod 700\n# file -\n chmod 600\n# You can apply this to directory that needs more secure permission\n# recursively. Like `~/.ssh`. `+` means run at once, not one by one. Like `xargs`.\nfind .private -type d -execdir chmod 700 '{}' +  \n-or -type f -executable -execdir chmod 777 '{}' +  \n-or -type f -execdir chmod 600 '{}' +\n\n# Find all files in home directory that does not match my user/group.\n# Then change owner:group to my user/group.\nfind ~/  ( -not -group $(id -g) -or -not -user $USER  ) -execdir chown $USER: '{}' +\n\n# Especially useful for finding and removing temporary files.\n# e.g. To remove compiled python files:\nfind . -name '*.pyc' -exec rm -rf {}  ;\n\n# Find and remove empty directories\nfind . -type d -empty -delete\n\n# Find and remove empty files\nfind . -type f -empty -delete\n\n# Searches through my user's \nhome\n directory recursively for the file \nhashClass.java\n, throwing out error output along the way.  \n# Passes the output to grep for case insensitive search.\nfind ~/ 2\n/dev/null | grep -i \nhashclass.java\n\n\n# Find all subdirectories that have been created in the last 5 days.\nfind . -type d -ctime -5\n\n# find last modified file in current directory recursively except directory\nfind ./ -not -type d -printf \n%T+ %p n\n | sort | tail -1\n\n# Find broken symlinks\nfind -L . -type l\n\n# Find files that were modified less than 4 days ago and more than two days. Notice that `find -ctime +3 -ctime -4` would give no results.\nfind -ctime +2 -ctime -4\n\n# Find files modified within a specific date range.\ntouch --date \n2007-01-01\n /tmp/start\ntouch --date \n2008-01-01\n /tmp/end\nfind /data/images -type f -newer /tmp/start -not -newer /tmp/end\n\n\n#basic 'find file' commands\n--------------------------\nfind / -name foo.txt -type f -print             # full command\nfind / -name foo.txt -type f                    # -print isn't necessary\nfind / -name foo.txt                            # don't have to specify \ntype==file\n\nfind . -name foo.txt                            # search under the current dir\nfind . -name \nfoo.*\n                            # wildcard\nfind . -name \n*.txt\n                            # wildcard\nfind /users/al -name Cookbook -type d           # search '/users/al'\n\n#search multiple dirs\n--------------------\nfind /opt /usr /var -name foo.scala -type f     # search multiple dirs\n\n#case-insensitive searching\n--------------------------\nfind . -iname foo                               # find foo, Foo, FOo, FOO, etc.\nfind . -iname foo -type d                       # same thing, but only dirs\nfind . -iname foo -type f                       # same thing, but only files\n\n#find files with different extensions\n------------------------------------\nfind . -type f  ( -name \n*.c\n -o -name \n*.sh\n  )                       # *.c and *.sh files\nfind . -type f  ( -name \n*cache\n -o -name \n*xml\n -o -name \n*html\n  )   # three patterns\n\n#find files that don't match a pattern (-not)\n--------------------------------------------\nfind . -type f -not -name \n*.html\n                                # find all files not ending in \n.html\n\n\n#find files by text in the file (find + grep)\n--------------------------------------------\nfind . -type f -name \n*.java\n -exec grep -l StringBuffer {}  ;    # find StringBuffer in all *.java files\nfind . -type f -name \n*.java\n -exec grep -il string {}  ;         # ignore case with -i option\nfind . -type f -name \n*.gz\n -exec zgrep 'GET /foo' {}  ;          # search for a string in gzip'd files\n\n#5 lines before, 10 lines after grep matches\n-------------------------------------------\nfind . -type f -name \n*.scala\n -exec grep -B5 -A10 'null' {}  ;\n     (see http://alvinalexander.com/linux-unix/find-grep-print-lines-before-after-...)\n\n#find files and act on them (find + exec)\n----------------------------------------\nfind /usr/local -name \n*.html\n -type f -exec chmod 644 {}  ;      # change html files to mode 644\nfind htdocs cgi-bin -name \n*.cgi\n -type f -exec chmod 755 {}  ;   # change cgi files to mode 755\nfind . -name \n*.pl\n -exec ls -ld {}  ;                            # run ls command on files found\n\n#find and copy\n-------------\nfind . -type f -name \n*.mp3\n -exec cp {} /tmp/MusicFiles  ;       # cp *.mp3 files to /tmp/MusicFiles\n\n#copy one file to many dirs\n--------------------------\nfind dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {}  ;      # copy the file header.shtml to those dirs\n\n#find and delete\n---------------\nfind . -type f -name \nFoo*\n -exec rm {}  ;                        # remove all \nFoo*\n files under current dir\nfind . -type d -name CVS -exec rm -r {}  ;                        # remove all subdirectories named \nCVS\n under current dir\n\n#find files by modification time\n-------------------------------\nfind . -mtime 1               # 24 hours\nfind . -mtime -7              # last 7 days\nfind . -mtime -7 -type f      # just files\nfind . -mtime -7 -type d      # just dirs\n\n#find files by modification time using a temp file\n-------------------------------------------------\ntouch 09301330 poop           # 1) create a temp file with a specific timestamp\nfind . -mnewer poop           # 2) returns a list of new files\nrm poop                       # 3) rm the temp file\n\n#find with time: this works on mac os x\n--------------------------------------\nfind / -newerct '1 minute ago' -print\n\n#find and tar\n------------\nfind . -type f -name \n*.java\n | xargs tar cvf myfile.tar\nfind . -type f -name \n*.java\n | xargs tar rvf myfile.tar\n     (see http://alvinalexander.com/blog/post/linux-unix/using-find-xargs-tar-crea...\n     for more information)\n\n#find, tar, and xargs\n--------------------\nfind . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar\n     (-print0 helps handle spaces in filenames)\n     (see http://alvinalexander.com/mac-os-x/mac-backup-filename-directories-space...)\n\n#find and pax (instead of xargs and tar)\n---------------------------------------\nfind . -type f -name \n*html\n | xargs tar cvf jw-htmlfiles.tar -\nfind . -type f -name \n*html\n | pax -w -f jw-htmlfiles.tar\n     (see http://alvinalexander.com/blog/post/linux-unix/using-pax-instead-of-tar)", 
            "title": "find"
        }, 
        {
            "loc": "/cmds/xargs/index.html", 
            "tags": "", 
            "text": "The examples for xargs\n\n\nThe examples for xargs\n\n\n#Count the number of lines in all files\nfind xargstest/ -name 'file??' | sort | xargs wc -l\n\n#Print the first line of specific files\nfind xargstest/ -name 'file?B' | sort | xargs head -n1\n\n#Process each file using a custom script\nfind xargstest/ -name 'file??' | xargs myscript.sh\nfind xargstest/ -name 'file*' -print0 | xargs -0 myscript.sh\n\n#Delete multiple files from a folder.\n#Handling blank space in filenames or path by -print0 -0.\nfind /var/www/tmp/ -type f | xargs rm -fa\nfind /var/www/tmp/ -type f -print0 | xargs -0 rm -fa\n\n#Count number of lines in multiple files.\nfind /opt/ -name \n*.log\n -print0 | xargs -0 wc -l\n\n#Make a backup of all configuratin files.\nfind / -name \n*.conf\n |  xargs tar czf  config.tar.gz\n\n#Use custome delimeter with xargs.\n echo \n1,2,3,4,5\n | xargs -d, echo\n\n#Show output in sepreate line with xargs.\necho \n1,2,3,4,5\n | xargs -d, -L 1 echo\n# find all file name ending with .pdf and remove them\nfind -name *.pdf | xargs rm -rf\n\n#if file name contains spaces you shuold use this instead\nfind -name *.pdf | xargs -I{} rm -rf {}\n# problem: my conversations with my friend Ahmed are split up across \n# irc logs across different folders\n\n# want to find: a conversation where we were talking about \napple butter\n\nfind ~/chatlogs -name *ahmed* | xargs grep 'apple butter'\n\n#faster than finding a bunch of filenames, retyping them and cat * | grep apple butter\n# find all UTF-8 encoded files\nls | xargs file | grep UTF-8\n\n# find mbox unix-mail files\nls | xargs file | grep \nvery long lines\n\n\n# backup all files under a certain size\nls -l | awk '$5\n100000 { print $NF; }' | xargs glacier upload backupfoldername", 
            "title": "xargs"
        }, 
        {
            "loc": "/cmds/grep/index.html", 
            "tags": "", 
            "text": "The examples for grep\n\n\nThe examples for grep\n\n#search for a string in one or more files\n----------------------------------------\ngrep 'fred' /etc/passwd              # search for lines containing 'fred' in /etc/passwd\ngrep fred /etc/passwd                # quotes usually not when you don't use regex patterns\ngrep null *.scala                    # search multiple files\n\n#case-insensitive\n----------------\ngrep -i joe users.txt                # find joe, Joe, JOe, JOE, etc.\n\n#regular expressions\n-------------------\ngrep ' fred' /etc/passwd             # find 'fred', but only at the start of a line\ngrep '[FG]oo' *                      # find Foo or Goo in all files in the current dir\ngrep '[0-9][0-9][0-9]' *             # find all lines in all files in the current dir with three numbers in a row\n\n#display matching filenames, not lines\n-------------------------------------\ngrep -l StartInterval *.plist        # show all filenames containing the string 'StartInterval'\ngrep -il StartInterval *.plist       # same thing, case-insensitive\n\n#show matching line numbers\n--------------------------\ngrep -n we gettysburg-address.txt    # show line numbers as well as the matching lines\n\n#lines before and after grep match\n---------------------------------\ngrep -B5 \nthe living\n gettysburg-address.txt        # show all matches, and five lines before each match\ngrep -A10 \nthe living\n gettysburg-address.txt       # show all matches, and ten lines after each match\ngrep -B5 -A5 \nthe living\n gettysburg-address.txt    # five lines before and ten lines after\n\n#reverse the meaning\n-------------------\ngrep -v fred /etc/passwd             # find any line *not* containing 'fred'\ngrep -vi fred /etc/passwd            # same thing, case-insensitive\n\n#grep in a pipeline\n------------------\nps auxwww | grep httpd               # all processes containing 'httpd'\nps auxwww | grep -i java             # all processes containing 'java', ignoring case\nls -al | grep ' d'                   # list all dirs in the current dir\n\n#search for multiple patterns\n----------------------------\negrep 'apple|banana|orange' *                                                         # search for multiple patterns, all files in current dir\negrep -i 'apple|banana|orange' *                                                      # same thing, case-insensitive\negrep 'score|nation|liberty|equal' gettysburg-address.txt                             # all lines matching multiple patterns\nlocate -i calendar | grep Users | egrep -vi 'twiki|gif|shtml|drupal-7|java|PNG'       # oh yeah\n       (see http://alvinalexander.com/linux-unix/linux-egrep-multiple-regular-expres...)\n\n#multiple search strings, multiple filename patterns\n---------------------------------------------------\ngrep -li \njtable\n $(find . -name \n*.java,v\n -exec grep -li \nprevayl\n {}  ;)           # find all files named \n*.java,v\n containing both\n                                                                                      # 'prevayl' and 'jtable'\n\n#grep + find\n-----------\nfind . -type f -exec grep -il 'foo' {}  ;     # print all filenames of files under current dir containing 'foo', case-insensitive\n\n#recursive grep search\n---------------------\ngrep -rl 'null' .                             # very similar to the previous find command; does a recursive search\ngrep -ril 'null' /home/al/sarah /var/www      # search multiple dirs\negrep -ril 'aja|alvin' .                      # multiple patterns, recursive\n      (see http://alvinalexander.com/linux-unix/recursive-grep-r-searching-egrep-find)\n\n#grep gzip files\n---------------\nzgrep foo myfile.gz                           # all lines containing the pattern 'foo'\nzgrep 'GET /blog' access_log.gz               # all lines containing 'GET /blog'\nzgrep 'GET /blog' access_log.gz | more        # same thing, case-insensitive", 
            "title": "grep"
        }, 
        {
            "loc": "/cmds/sed/index.html", 
            "tags": "", 
            "text": "The examples for sed\n\n\nThe examples for sed\n\n\n# double space a file\nsed G\n\n\n# double space a file which already has blank lines in it. Output file\n# should contain no more than one blank line between lines of text.\nsed '/ $/d;G'\n\n\n# triple space a file\nsed 'G;G'\n\n\n# undo double-spacing (assumes even-numbered lines are always blank)\nsed 'n;d'\n\n\n# insert a blank line above every line which matches \nregex\n\nsed '/regex/{x;p;x;}'\n\n\n# insert a blank line below every line which matches \nregex\n\nsed '/regex/G'\n\n\n# insert a blank line above and below every line which matches \nregex\n\nsed '/regex/{x;p;x;G;}'\n\n\nNUMBERING:\n\n# number each line of a file (simple left alignment). Using a tab (see\n# note on ' t' at end of file) instead of space will preserve margins.\nsed = filename | sed 'N;s/ n/ t/'\n\n\n# number each line of a file (number on left, right-aligned)\nsed = filename | sed 'N; s/ /     /; s/ * (. {6, } ) n/ 1  /'\n\n\n# number each line of file, but only print numbers if line is not blank\nsed '/./=' filename | sed '/./N; s/ n/ /'\n\n\n# count lines (emulates \nwc -l\n)\nsed -n '$='\n\n\nTEXT CONVERSION AND SUBSTITUTION:\n\n# IN UNIX ENVIRONMENT: convert DOS newlines (CR/LF) to Unix format\nsed 's/.$//'               # assumes that all lines end with CR/LF\nsed 's/ M$//'              # in bash/tcsh, press Ctrl-V then Ctrl-M\nsed 's/ x0D$//'            # gsed 3.02.80, but top script is easier\n\n\n# IN UNIX ENVIRONMENT: convert Unix newlines (LF) to DOS format\nsed \ns/$/`echo -e    r`/\n            # command line under ksh\nsed 's/$'\n/`echo    r`/\n             # command line under bash\nsed \ns/$/`echo    r`/\n               # command line under zsh\nsed 's/$/ r/'                        # gsed 3.02.80\n\n\n# IN DOS ENVIRONMENT: convert Unix newlines (LF) to DOS format\nsed \ns/$//\n                          # method 1\nsed -n p                             # method 2\n\n\n# IN DOS ENVIRONMENT: convert DOS newlines (CR/LF) to Unix format\n# Can only be done with UnxUtils sed, version 4.0.7 or higher.\n# Cannot be done with other DOS versions of sed. Use \ntr\n instead.\nsed \ns/ r//\n infile \noutfile         # UnxUtils sed v4.0.7 or higher\ntr -d  r \ninfile \noutfile            # GNU tr version 1.22 or higher\n\n\n# delete leading whitespace (spaces, tabs) from front of each line\n# aligns all text flush left\nsed 's/ [  t]*//'                    # see note on ' t' at end of file\n\n\n# delete trailing whitespace (spaces, tabs) from end of each line\nsed 's/[  t]*$//'                    # see note on ' t' at end of file\n\n\n# delete BOTH leading and trailing whitespace from each line\nsed 's/ [  t]*//;s/[  t]*$//'\n\n\n# insert 5 blank spaces at beginning of each line (make page offset)\nsed 's/ /     /'\n\n\n# align all text flush right on a 79-column width\nsed -e :a -e 's/ . {1,78 }$/ \n/;ta'  # set at 78 plus 1 space\n\n\n# center all text in the middle of 79-column width. In method 1,\n# spaces at the beginning of the line are significant, and trailing\n# spaces are appended at the end of the line. In method 2, spaces at\n# the beginning of the line are discarded in centering the line, and\n# no trailing spaces appear at the end of lines.\nsed  -e :a -e 's/ . {1,77 }$/ \n /;ta'                     # method 1\nsed  -e :a -e 's/ . {1,77 }$/ \n/;ta' -e 's/ ( * ) 1/ 1/'  # method 2\n\n\n# substitute (find and replace) \nfoo\n with \nbar\n on each line\nsed 's/foo/bar/'             # replaces only 1st instance in a line\nsed 's/foo/bar/4'            # replaces only 4th instance in a line\nsed 's/foo/bar/g'            # replaces ALL instances in a line\nsed 's/ (.* )foo (.*foo )/ 1bar 2/' # replace the next-to-last case\nsed 's/ (.* )foo/ 1bar/'            # replace only the last case\n\n\n# substitute \nfoo\n with \nbar\n ONLY for lines which contain \nbaz\n\nsed '/baz/s/foo/bar/g'\n\n\n# substitute \nfoo\n with \nbar\n EXCEPT for lines which contain \nbaz\n\nsed '/baz/!s/foo/bar/g'\n\n\n# change \nscarlet\n or \nruby\n or \npuce\n to \nred\n\nsed 's/scarlet/red/g;s/ruby/red/g;s/puce/red/g'   # most seds\ngsed 's/scarlet |ruby |puce/red/g'                # GNU sed only\n\n\n# reverse order of lines (emulates \ntac\n)\n# bug/feature in HHsed v1.5 causes blank lines to be deleted\nsed '1!G;h;$!d'               # method 1\nsed -n '1!G;h;$p'             # method 2\n\n\n# reverse each character on the line (emulates \nrev\n)\nsed '/ n/!G;s/ (. ) (.* n )/\n 2 1/;//D;s/.//'\n\n\n# join pairs of lines side-by-side (like \npaste\n)\nsed '$!N;s/ n/ /'\n\n\n# if a line ends with a backslash, append the next line to it\nsed -e :a -e '/  $/N; s/   n//; ta'\n\n\n# if a line begins with an equal sign, append it to the previous line\n# and replace the \n=\n with a single space\nsed -e :a -e '$!N;s/ n=/ /;ta' -e 'P;D'\n\n\n# add commas to numeric strings, changing \n1234567\n to \n1,234,567\n\ngsed ':a;s/ B[0-9] {3 } \n/,\n/;ta'                     # GNU sed\nsed -e :a -e 's/ (.*[0-9] ) ([0-9] {3 } )/ 1, 2/;ta'  # other seds\n\n\n# add commas to numbers with decimal points and minus signs (GNU sed)\ngsed ':a;s/ (  |[ 0-9.] ) ([0-9] + ) ([0-9] {3 } )/ 1 2, 3/g;ta'\n\n\n# add a blank line every 5 lines (after lines 5, 10, 15, 20, etc.)\ngsed '0~5G'                  # GNU sed only\nsed 'n;n;n;n;G;'             # other seds\n\n\nSELECTIVE PRINTING OF CERTAIN LINES:\n\n# print first 10 lines of file (emulates behavior of \nhead\n)\nsed 10q\n\n\n# print first line of file (emulates \nhead -1\n)\nsed q\n\n\n# print the last 10 lines of a file (emulates \ntail\n)\nsed -e :a -e '$q;N;11,$D;ba'\n\n\n# print the last 2 lines of a file (emulates \ntail -2\n)\nsed '$!N;$!D'\n\n\n# print the last line of a file (emulates \ntail -1\n)\nsed '$!d'                    # method 1\nsed -n '$p'                  # method 2\n\n\n# print only lines which match regular expression (emulates \ngrep\n)\nsed -n '/regexp/p'           # method 1\nsed '/regexp/!d'             # method 2\n\n\n# print only lines which do NOT match regexp (emulates \ngrep -v\n)\nsed -n '/regexp/!p'          # method 1, corresponds to above\nsed '/regexp/d'              # method 2, simpler syntax\n\n\n# print the line immediately before a regexp, but not the line\n# containing the regexp\nsed -n '/regexp/{g;1!p;};h'\n\n\n# print the line immediately after a regexp, but not the line\n# containing the regexp\nsed -n '/regexp/{n;p;}'\n\n\n# print 1 line of context before and after regexp, with line number\n# indicating where the regexp occurred (similar to \ngrep -A1 -B1\n)\nsed -n -e '/regexp/{=;x;1!p;g;$!N;p;D;}' -e h\n\n\n# grep for AAA and BBB and CCC (in any order)\nsed '/AAA/!d; /BBB/!d; /CCC/!d'\n\n\n# grep for AAA and BBB and CCC (in that order)\nsed '/AAA.*BBB.*CCC/!d'\n\n\n# grep for AAA or BBB or CCC (emulates \negrep\n)\nsed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d    # most seds\ngsed '/AAA |BBB |CCC/!d'                        # GNU sed only\n\n\n# print paragraph if it contains AAA (blank lines separate paragraphs)\n# HHsed v1.5 must insert a 'G;' after 'x;' in the next 3 scripts below\nsed -e '/./{H;$!d;}' -e 'x;/AAA/!d;'\n\n\n# print paragraph if it contains AAA and BBB and CCC (in any order)\nsed -e '/./{H;$!d;}' -e 'x;/AAA/!d;/BBB/!d;/CCC/!d'\n\n\n# print paragraph if it contains AAA or BBB or CCC\nsed -e '/./{H;$!d;}' -e 'x;/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d\ngsed '/./{H;$!d;};x;/AAA |BBB |CCC/b;d'         # GNU sed only\n\n\n# print only lines of 65 characters or longer\nsed -n '/ . {65 }/p'\n\n\n# print only lines of less than 65 characters\nsed -n '/ . {65 }/!p'        # method 1, corresponds to above\nsed '/ . {65 }/d'            # method 2, simpler syntax\n\n\n# print section of file from regular expression to end of file\nsed -n '/regexp/,$p'\n\n\n# print section of file based on line numbers (lines 8-12, inclusive)\nsed -n '8,12p'               # method 1\nsed '8,12!d'                 # method 2\n\n\n# print line number 52\nsed -n '52p'                 # method 1\nsed '52!d'                   # method 2\nsed '52q;d'                  # method 3, efficient on large files\n\n\n# beginning at line 3, print every 7th line\ngsed -n '3~7p'               # GNU sed only\nsed -n '3,${p;n;n;n;n;n;n;}' # other seds\n\n\n# print section of file between two regular expressions (inclusive)\nsed -n '/Iowa/,/Montana/p'             # case sensitive\n\n\nSELECTIVE DELETION OF CERTAIN LINES:\n\n# print all of file EXCEPT section between 2 regular expressions\nsed '/Iowa/,/Montana/d'\n\n\n# delete duplicate, consecutive lines from a file (emulates \nuniq\n).\n# First line in a set of duplicate lines is kept, rest are deleted.\nsed '$!N; /  (.* ) n 1$/!P; D'\n\n\n# delete duplicate, nonconsecutive lines from a file. Beware not to\n# overflow the buffer size of the hold space, or else use GNU sed.\nsed -n 'G; s/ n/\n/; /  ([ -~]* n ).* n 1/d; s/ n//; h; P'\n\n\n# delete all lines except duplicate lines (emulates \nuniq -d\n).\nsed '$!N; s/  (.* ) n 1$/ 1/; t; D'\n\n\n# delete the first 10 lines of a file\nsed '1,10d'\n\n\n# delete the last line of a file\nsed '$d'\n\n\n# delete the last 2 lines of a file\nsed 'N;$!P;$!D;$d'\n\n\n# delete the last 10 lines of a file\nsed -e :a -e '$d;N;2,10ba' -e 'P;D'   # method 1\nsed -n -e :a -e '1,10!{P;N;D;};N;ba'  # method 2\n\n\n# delete every 8th line\ngsed '0~8d'                           # GNU sed only\nsed 'n;n;n;n;n;n;n;d;'                # other seds\n\n\n# delete ALL blank lines from a file (same as \ngrep '.' \n)\nsed '/ $/d'                           # method 1\nsed '/./!d'                           # method 2\n\n\n# delete all CONSECUTIVE blank lines from file except the first; also\n# deletes all blank lines from top and end of file (emulates \ncat -s\n)\nsed '/./,/ $/!d'          # method 1, allows 0 blanks at top, 1 at EOF\nsed '/ $/N;/ n$/D'        # method 2, allows 1 blank at top, 0 at EOF\n\n\n# delete all CONSECUTIVE blank lines from file except the first 2:\nsed '/ $/N;/ n$/N;//D'\n\n\n# delete all leading blank lines at top of file\nsed '/./,$!d'\n\n\n# delete all trailing blank lines at end of file\nsed -e :a -e '/  n*$/{$d;N;ba' -e '}'  # works on all seds\nsed -e :a -e '/  n*$/N;/ n$/ba'        # ditto, except for gsed 3.02*\n\n\n# delete the last line of each paragraph\nsed -n '/ $/{p;h;};/./{x;/./p;}'\n\n\nSPECIAL APPLICATIONS:\n\n# remove nroff overstrikes (char, backspace) from man pages. The 'echo'\n# command may need an -e switch if you use Unix System V or bash shell.\nsed \ns/.`echo    b`//g\n    # double quotes required for Unix environment\nsed 's/. H//g'             # in bash/tcsh, press Ctrl-V and then Ctrl-H\nsed 's/. x08//g'           # hex expression for sed v1.5\n\n\n# get Usenet/e-mail message header\nsed '/ $/q'                # deletes everything after first blank line\n\n\n# get Usenet/e-mail message body\nsed '1,/ $/d'              # deletes everything up to first blank line\n\n\n# get Subject header, but remove initial \nSubject: \n portion\nsed '/ Subject: */!d; s///;q'\n\n\n# get return address header\nsed '/ Reply-To:/q; / From:/h; /./d;g;q'\n\n\n# parse out the address proper. Pulls out the e-mail address by itself\n# from the 1-line return address header (see preceding script)\nsed 's/ *(.*)//; s/\n.*//; s/.*[:\n] *//'\n\n\n# add a leading angle bracket and space to each line (quote a message)\nsed 's/ /\n /'\n\n\n# delete leading angle bracket \n space from each line (unquote a message)\nsed 's/ \n //'\n\n\n# remove most HTML tags (accommodates multiple-line tags)\nsed -e :a -e 's/\n[ \n]*\n//g;/\n/N;//ba'\n\n\n# extract multi-part uuencoded binaries, removing extraneous header\n# info, so that only the uuencoded portion remains. Files passed to\n# sed must be passed in the proper order. Version 1 can be entered\n# from the command line; version 2 can be made into an executable\n# Unix shell script. (Modified from a script by Rahul Dhesi.)\nsed '/ end/,/ begin/d' file1 file2 ... fileX | uudecode   # vers. 1\nsed '/ end/,/ begin/d' \n$@\n | uudecode                    # vers. 2\n\n\n# zip up each .TXT file individually, deleting the source file and\n# setting the name of each .ZIP file to the basename of the .TXT file\n# (under DOS: the \ndir /b\n switch returns bare filenames in all caps).\necho @echo off \nzipup.bat\ndir /b *.txt | sed \ns/  (.* ) .TXT/pkzip -mo  1  1.TXT/\n \nzipup.bat\n\n\nTYPICAL USE: Sed takes one or more editing commands and applies all of\nthem, in sequence, to each line of input. After all the commands have\nbeen applied to the first input line, that line is output and a second\ninput line is taken for processing, and the cycle repeats. The\npreceding examples assume that input comes from the standard input\ndevice (i.e, the console, normally this will be piped input). One or\nmore filenames can be appended to the command line if the input does\nnot come from stdin. Output is sent to stdout (the screen). Thus:\n\ncat filename | sed '10q'        # uses piped input\nsed '10q' filename              # same effect, avoids a useless \ncat\n\nsed '10q' filename \n newfile    # redirects output to disk\n\n\nFor additional syntax instructions, including the way to apply editing\ncommands from a disk file instead of the command line, consult \nsed \n\nawk, 2nd Edition,\n by Dale Dougherty and Arnold Robbins (O'Reilly,\n1997; http://www.ora.com), \nUNIX Text Processing,\n by Dale Dougherty\nand Tim O'Reilly (Hayden Books, 1987) or the tutorials by Mike Arst\ndistributed in U-SEDIT2.ZIP (many sites). To fully exploit the power\nof sed, one must understand \nregular expressions.\n For this, see\n\nMastering Regular Expressions\n by Jeffrey Friedl (O'Reilly, 1997).\nThe manual (\nman\n) pages on Unix systems may be helpful (try \nman\nsed\n, \nman regexp\n, or the subsection on regular expressions in \nman\ned\n), but man pages are notoriously difficult. They are not written to\nteach sed use or regexps to first-time users, but as a reference text\nfor those already acquainted with these tools.\n\nQUOTING SYNTAX: The preceding examples use single quotes ('...')\ninstead of double quotes (\n...\n) to enclose editing commands, since\nsed is typically used on a Unix platform. Single quotes prevent the\nUnix shell from intrepreting the dollar sign ($) and backquotes\n(`...`), which are expanded by the shell if they are enclosed in\ndouble quotes. Users of the \ncsh\n shell and derivatives will also need\nto quote the exclamation mark (!) with the backslash (i.e.,  !) to\nproperly run the examples listed above, even within single quotes.\nVersions of sed written for DOS invariably require double quotes\n(\n...\n) instead of single quotes to enclose editing commands.\n\nUSE OF ' t' IN SED SCRIPTS: For clarity in documentation, we have used\nthe expression ' t' to indicate a tab character (0x09) in the scripts.\nHowever, most versions of sed do not recognize the ' t' abbreviation,\nso when typing these scripts from the command line, you should press\nthe TAB key instead. ' t' is supported as a regular expression\nmetacharacter in awk, perl, and HHsed, sedmod, and GNU sed v3.02.80.\n\nVERSIONS OF SED: Versions of sed do differ, and some slight syntax\nvariation is to be expected. In particular, most do not support the\nuse of labels (:name) or branch instructions (b,t) within editing\ncommands, except at the end of those commands. We have used the syntax\nwhich will be portable to most users of sed, even though the popular\nGNU versions of sed allow a more succinct syntax. When the reader sees\na fairly long command such as this:\n\nsed -e '/AAA/b' -e '/BBB/b' -e '/CCC/b' -e d\n\n\nit is heartening to know that GNU sed will let you reduce it to:\n\nsed '/AAA/b;/BBB/b;/CCC/b;d'      # or even\nsed '/AAA |BBB |CCC/b;d'\n\n\nIn addition, remember that while many versions of sed accept a command\nlike \n/one/ s/RE1/RE2/\n, some do NOT allow \n/one/! s/RE1/RE2/\n, which\ncontains space before the 's'. Omit the space when typing the command.\n\nOPTIMIZING FOR SPEED: If execution speed needs to be increased (due to\nlarge input files or slow processors or hard disks), substitution will\nbe executed more quickly if the \nfind\n expression is specified before\ngiving the \ns/.../.../\n instruction. Thus:\n\nsed 's/foo/bar/g' filename         # standard replace command\nsed '/foo/ s/foo/bar/g' filename   # executes more quickly\nsed '/foo/ s//bar/g' filename      # shorthand sed syntax\n\n\nOn line selection or deletion in which you only need to output lines\nfrom the first part of the file, a \nquit\n command (q) in the script\nwill drastically reduce processing time for large files. Thus:\n\nsed -n '45,50p' filename           # print line nos. 45-50 of a file\nsed -n '51q;45,50p' filename       # same, but executes much faster\n\n# replace string in all matched files\nsed -i \u2018s/2012.07-SP3/2014.07/g\u2019 config_files_*", 
            "title": "sed"
        }, 
        {
            "loc": "/cmds/awk/index.html", 
            "tags": "", 
            "text": "The examples for awk\n\n\nThe examples for awk\n\n# Print first two fields in opposite order:\n  awk '{ print $2, $1 }' file\n\n\n# Print lines longer than 72 characters:\n  awk 'length \n 72' file\n\n\n# Print length of string in 2nd column\n  awk '{print length($2)}' file\n\n\n# Add up first column, print sum and average:\n       { s += $1 }\n  END  { print \nsum is\n, s, \n average is\n, s/NR }\n\n\n# Print fields in reverse order:\n  awk '{ for (i = NF; i \n 0; --i) print $i }' file\n\n\n# Print the last line\n      {line = $0}\n  END {print line}\n\n\n# Print the total number of lines that contain the word Pat\n  /Pat/ {nlines = nlines + 1}\n  END {print nlines}\n\n\n# Print all lines between start/stop pairs:\n  awk '/start/, /stop/' file\n\n\n# Print all lines whose first field is different from previous one:\n  awk '$1 != prev { print; prev = $1 }' file\n\n\n# Print column 3 if column 1 \n column 2:\n  awk '$1 \n $2 {print $3}' file\n\n\n# Print line if column 3 \n column 2:\n  awk '$3 \n $2' file\n\n\n# Count number of lines where col 3 \n col 1\n  awk '$3 \n $1 {print i + \n1\n; i++}' file\n\n\n# Print sequence number and then column 1 of file:\n  awk '{print NR, $1}' file\n\n\n# Print every line after erasing the 2nd field\n  awk '{$2 = \n; print}' file\n\n\n# Print hi 28 times\n  yes | head -28 | awk '{ print \nhi\n }'\n\n\n# Print hi.0010 to hi.0099 (NOTE IRAF USERS!)\n  yes | head -90 | awk '{printf(\nhi00%2.0f  n\n, NR+9)}'\n\n# Print out 4 random numbers between 0 and 1\nyes | head -4 | awk '{print rand()}'\n\n# Print out 40 random integers modulo 5\nyes | head -40 | awk '{print int(100*rand()) % 5}'\n\n\n# Replace every field by its absolute value\n  { for (i = 1; i \n= NF; i=i+1) if ($i \n 0) $i = -$i print}\n\n# If you have another character that delimits fields, use the -F option\n# For example, to print out the phone number for Jones in the following file,\n# 000902|Beavis|Theodore|333-242-2222|149092\n# 000901|Jones|Bill|532-382-0342|234023\n# ...\n# type\n  awk -F\n|\n '$2==\nJones\n{print $4}' filename\n\n\n\n# Some looping commands\n# Remove a bunch of print jobs from the queue\n  BEGIN{\n    for (i=875;i\n833;i--){\n        printf \nlprm -Plw %d n\n, i\n    } exit\n       }\n\n\n Formatted printouts are of the form printf( \nformat n\n, value1, value2, ... valueN)\n        e.g. printf(\nhowdy %-8s What it is bro. %.2f n\n, $1, $2*$3)\n    %s = string\n    %-8s = 8 character string left justified\n    %.2f = number with 2 places after .\n    %6.2f = field 6 chars with 2 chars after .\n     n is newline\n     t is a tab\n\n\n# Print frequency histogram of column of numbers\n$2 \n= 0.1 {na=na+1}\n($2 \n 0.1) \n ($2 \n= 0.2) {nb = nb+1}\n($2 \n 0.2) \n ($2 \n= 0.3) {nc = nc+1}\n($2 \n 0.3) \n ($2 \n= 0.4) {nd = nd+1}\n($2 \n 0.4) \n ($2 \n= 0.5) {ne = ne+1}\n($2 \n 0.5) \n ($2 \n= 0.6) {nf = nf+1}\n($2 \n 0.6) \n ($2 \n= 0.7) {ng = ng+1}\n($2 \n 0.7) \n ($2 \n= 0.8) {nh = nh+1}\n($2 \n 0.8) \n ($2 \n= 0.9) {ni = ni+1}\n($2 \n 0.9) {nj = nj+1}\nEND {print na, nb, nc, nd, ne, nf, ng, nh, ni, nj, NR}\n\n\n# Find maximum and minimum values present in column 1\nNR == 1 {m=$1 ; p=$1}\n$1 \n= m {m = $1}\n$1 \n= p {p = $1}\nEND { print \nMax = \n m, \n   Min = \n p }\n\n# Example of defining variables, multiple commands on one line\nNR == 1 {prev=$4; preva = $1; prevb = $2; n=0; sum=0}\n$4 != prev {print preva, prevb, prev, sum/n; n=0; sum=0; prev = $4; preva = $1; prevb = $2}\n$4 == prev {n++; sum=sum+$5/$6}\nEND {print preva, prevb, prev, sum/n}\n\n# Example of defining and using a function, inserting values into an array\n# and doing integer arithmetic mod(n). This script finds the number of days\n# elapsed since Jan 1, 1901. (from http://www.netlib.org/research/awkbookcode/ch3)\nfunction daynum(y, m, d,    days, i, n)\n{   # 1 == Jan 1, 1901\n    split(\n31 28 31 30 31 30 31 31 30 31 30 31\n, days)\n    # 365 days a year, plus one for each leap year\n    n = (y-1901) * 365 + int((y-1901)/4)\n    if (y % 4 == 0) # leap year from 1901 to 2099\n        days[2]++\n    for (i = 1; i \n m; i++)\n        n += days[i]\n    return n + d\n}\n    { print daynum($1, $2, $3) }\n\n# Example of using substrings\n# substr($2,9,7) picks out characters 9 thru 15 of column 2\n{print \nimarith\n, substr($2,1,7) \n - \n $3, \nout.\nsubstr($2,5,3)}\n{print \nimarith\n, substr($2,9,7) \n - \n $3, \nout.\nsubstr($2,13,3)}\n{print \nimarith\n, substr($2,17,7) \n - \n $3, \nout.\nsubstr($2,21,3)}\n{print \nimarith\n, substr($2,25,7) \n - \n $3, \nout.\nsubstr($2,29,3)}\n\n[](http://sparky.rice.edu/~hartigan/awk.html)", 
            "title": "awk"
        }, 
        {
            "loc": "/cmds/for/index.html", 
            "tags": "", 
            "text": "from: http://www.thegeekstuff.com/2011/07/bash-for-loop-examples/  \n\n\nfrom bash commandline:\nfor f in `ls`; do echo $f; done\nfor f in *; do echo $f; done\n\n\n1.Static values for the list after \u201cin\u201d keyword\n$ cat for1.sh\ni=1\nfor day in Mon Tue Wed Thu Fri\ndo\n echo \u201cWeekday $((i++)) : $day\u201d\ndone\n\n$ ./for1.sh\nWeekday 1 : Mon\nWeekday 2 : Tue\nWeekday 3 : Wed\nWeekday 4 : Thu\nWeekday 5 : Fri\n\n2. Variable for the list after \u201cin\u201d keyword\n$ cat for2.sh\ni=1\nweekdays=\u201dMon Tue Wed Thu Fri\u201d\nfor day in $weekdays\ndo\n echo \u201cWeekday $((i++)) : $day\u201d\ndone\n\n$ ./for2.sh\nWeekday 1 : Mon\nWeekday 2 : Tue\nWeekday 3 : Wed\nWeekday 4 : Thu\nWeekday 5 : Fri\n\n3. Don\u2019t specify the list; get it from the positional parameters\n$ cat for3.sh\ni=1\nfor day\ndo\n echo \u201cWeekday $((i++)) : $day\u201d\ndone\n\n$ ./for3.sh Mon Tue Wed Thu Fri\nWeekday 1 : Mon\nWeekday 2 : Tue\nWeekday 3 : Wed\nWeekday 4 : Thu\nWeekday 5 : Fri\n\n4. Unix command output as list values after \u201cin\u201d keyword\n$ cat for4.sh\ni=1\nfor username in `awk -F: \u2018{print $1}\u2019 /etc/passwd`\ndo\n echo \u201cUsername $((i++)) : $username\u201d\ndone\n\n$ ./for4.sh\nUsername 1 : ramesh\nUsername 2 : john\nUsername 3 : preeti\nUsername 4 : jason\n..\n\n5. Loop through files and directories in a for loop\n$ cat for5.sh\ni=1\ncd ~\nfor item in *\ndo\n echo \u201cItem $((i++)) : $item\u201d\ndone\n\n$ ./for5.sh\nItem 1 : positional-parameters.sh\nItem 2 : backup.sh\nItem 3 : emp-report.awk\nItem 4 : item-list.sed\nItem 5 : employee.db\nItem 8 : storage\nItem 9 : downloads\n\n$ cat for5-1.sh\ni=1\nfor file in /etc/[abcd]*.conf\ndo\n echo \u201cFile $((i++)) : $file\u201d\ndone\n\n$ ./for5-1.sh\nFile 1 : /etc/asound.conf\nFile 2 : /etc/autofs_ldap_auth.conf\nFile 3 : /etc/cas.conf\nFile 4 : /etc/cgconfig.conf\nFile 5 : /etc/cgrules.conf\nFile 6 : /etc/dracut.conf\n\n6. Break out of the for loop\n$ cat for6.sh\ni=1\nfor day in Mon Tue Wed Thu Fri\ndo\n echo \u201cWeekday $((i++)) : $day\u201d\n  if [ $i -eq 3 ]; then\n     break;\n  fi\ndone\n\n$ ./for6.sh\nWeekday 1 : Mon\nWeekday 2 : Tue\n\n7. Continue from the top of the for loop\n$ cat for7.sh\ni=1\nfor day in Mon Tue Wed Thu Fri Sat Sun\ndo\n echo -n \u201cDay $((i++)) : $day\u201d\n  if [ $i -eq 7 -o $i -eq 8 ]; then\n     echo \u201c (WEEKEND)\u201d\n        continue;\n  fi\n  echo \u201c (weekday)\u201d\ndone\n\n$ ./for7.sh\nDay 1 : Mon (weekday)\nDay 2 : Tue (weekday)\nDay 3 : Wed (weekday)\nDay 4 : Thu (weekday)\nDay 5 : Fri (weekday)\nDay 6 : Sat (WEEKEND)\nDay 7 : Sun (WEEKEND)\n\n12. Range of numbers with increments after \u201cin\u201d keyword\n$ cat for12.sh\nfor num in {1..10..2}\ndo\n echo \u201cNumber: $num\u201d\ndone\n\n$ ./for12.sh\nNumber: 1\nNumber: 3\nNumber: 5\nNumber: 7\nNumber: 9", 
            "title": "for"
        }, 
        {
            "loc": "/shell/bash/index.html", 
            "tags": "", 
            "text": "bash\n\n\nbash manpage\n\nmore examples: \n100 shell script examples\n /  \nbash example\n\n\n\n[bash tutorial](http://linuxconfig.org/bash-scripting-tutorial)\n\n#!/bin/bash\n#Variables\nSTRING=\nHELLO WORLD!!!\n\necho $STRING \n\nOF=myhome_directory_$(date +%Y%m%d).tar.gz\ntar -czf $OF /home/linuxconfig \n\n#Global vs. Local variables\n#Define bash global variable\n#This variable is global and can be used anywhere in this bash script\nVAR=\nglobal variable\n\nfunction bash {\n#Define bash local variable\n#This variable is local to bash function only\nlocal VAR=\nlocal variable\n\necho $VAR\n}\necho $VAR\nbash\n# Note the bash global variable did not change\n# \nlocal\n is bash reserved word\necho $VAR\n\n#Passing arguments to the bash script\n# use predefined variables to access passed arguments\n#echo arguments to the shell\necho $1 $2 $3 ' -\n echo $1 $2 $3'\n\n# We can also store arguments from bash command line in special array\nargs=(\n$@\n)\n#echo arguments to the shell\necho ${args[0]} ${args[1]} ${args[2]} ' -\n args=(\n$@\n); echo ${args[0]} ${args[1]} ${args[2]}'\n\n#use $@ to print out all arguments at once\necho $@ ' -\n echo $@'\n\n# use $# variable to print out\n# number of arguments passed to the bash script\necho Number of arguments passed: $# ' -\n echo Number of arguments passed: $#' \n\n#Executing shell commands with bash\n# use backticks \n ` ` \n to execute shell command\necho `uname -o`\n# executing bash command without backticks\necho uname -o \n\n#Reading User Input\necho -e \nHi, please type the word:  c \n\nread  word\necho \nThe word you entered is: $word\n\necho -e \nCan you please enter two words? \n\nread word1 word2\necho \nHere is your input:  \n$word1 \n  \n$word2 \n\necho -e \nHow do you feel about bash scripting? \n\n# read command now stores a reply into the default build-in variable $REPLY\nread\necho \nYou said $REPLY, I'm glad to hear that! \n\necho -e \nWhat are your favorite colours ? \n\n# -a makes read command to read into an array\nread -a colours\necho \nMy favorite colours are also ${colours[0]}, ${colours[1]} and ${colours[2]}:-)\n \n\n#Bash Trap Command\n# bash trap command\ntrap bashtrap INT\n# bash clear screen command\nclear;\n# bash trap function is executed when CTRL-C is pressed:\n# bash prints message =\n Executing bash trap subrutine !\nbashtrap()\n{\n    echo \nCTRL+C Detected !...executing bash trap !\n\n}\n# for loop from 1/10 to 10/10\nfor a in `seq 1 10`; do\n    echo \n$a/10 to Exit.\n \n    sleep 1;\ndone\necho \nExit Bash Trap Example!!!\n \n\n#Arrays\n#Declare simple bash array\n#Declare array with 4 elements\nARRAY=( 'Debian Linux' 'Redhat Linux' Ubuntu Linux )\n# get number of elements in the array\nELEMENTS=${#ARRAY[@]}\n\n# echo each element in array \n# for loop\nfor (( i=0;i\n$ELEMENTS;i++)); do\n    echo ${ARRAY[${i}]}\ndone \n\n#Read file into bash array\n# Declare array\ndeclare -a ARRAY\n# Link filedescriptor 10 with stdin\nexec 10\n0\n# stdin replaced with a file supplied as a first argument\nexec \n $1\nlet count=0\n\nwhile read LINE; do\n\n    ARRAY[$count]=$LINE\n    ((count++))\ndone\n\necho Number of elements: ${#ARRAY[@]}\n# echo array's content\necho ${ARRAY[@]}\n# restore stdin from filedescriptor 10\n# and close filedescriptor 10\nexec 0\n10 10\n-\n\n\n#Simple Bash if/else statement\ndirectory=\n./BashScripting\n\n\n# bash check if directory exists\nif [ -d $directory ]; then\n    echo \nDirectory exists\n\nelse \n    echo \nDirectory does not exists\n\nfi \n\n#Nested if/else\n# Declare variable choice and assign value 4\nchoice=4\n# Print to stdout\n echo \n1. Bash\n\n echo \n2. Scripting\n\n echo \n3. Tutorial\n\n echo -n \nPlease choose a word [1,2 or 3]? \n\n# Loop while the variable choice is equal 4\n# bash while loop\nwhile [ $choice -eq 4 ]; do\n\n# read user input\nread choice\n# bash nested if/else\nif [ $choice -eq 1 ] ; then\n\n        echo \nYou have chosen word: Bash\n\n\nelse                   \n\n        if [ $choice -eq 2 ] ; then\n                 echo \nYou have chosen word: Scripting\n\n        else\n\n                if [ $choice -eq 3 ] ; then\n                        echo \nYou have chosen word: Tutorial\n\n                else\n                        echo \nPlease make a choice between 1-3 !\n\n                        echo \n1. Bash\n\n                        echo \n2. Scripting\n\n                        echo \n3. Tutorial\n\n                        echo -n \nPlease choose a word [1,2 or 3]? \n\n                        choice=4\n                fi   \n        fi\nfi\ndone \n\n\n#Arithmetic Comparisons\n-lt \n\n-gt \n\n-le \n=\n-ge \n=\n-eq ==\n-ne !=\n# declare integers\nNUM1=2\nNUM2=2\nif [ $NUM1 -eq $NUM2 ]; then\n    echo \nBoth Values are equal\n\nelse \n    echo \nValues are NOT equal\n\nfi \n\n# declare integers\nNUM1=2\nNUM2=1\nif [ $NUM1 -eq $NUM2 ]; then\n    echo \nBoth Values are equal\n\nelse \n    echo \nValues are NOT equal\n\nfi \n\n# declare integers\nNUM1=2\nNUM2=1\nif   [ $NUM1 -eq $NUM2 ]; then\n    echo \nBoth Values are equal\n\nelif [ $NUM1 -gt $NUM2 ]; then\n    echo \nNUM1 is greater then NUM2\n\nelse \n    echo \nNUM2 is greater then NUM1\n\nfi \n\n#String Comparisons\n=   equal\n!=  not equal\n\n   less then\n\n   greater then\n-n s1   string s1 is not empty\n-z s1   string s1 is empty\n\n#Declare string S1\nS1=\nBash\n\n#Declare string S2\nS2=\nScripting\n\nif [ $S1 = $S2 ]; then\n    echo \nBoth Strings are equal\n\nelse \n    echo \nStrings are NOT equal\n\nfi \n\n#Declare string S1\nS1=\nBash\n\n#Declare string S2\nS2=\nBash\n\nif [ $S1 = $S2 ]; then\n    echo \nBoth Strings are equal\n\nelse \n    echo \nStrings are NOT equal\n\nfi \n\n#Bash File Testing\n\n-b filename Block special file\n-c filename Special character file\n-d directoryname    Check for directory existence\n-e filename Check for file existence\n-f filename Check for regular file existence not a directory\n-G filename Check if file exists and is owned by effective group ID.\n-g filename true if file exists and is set-group-id.\n-k filename Sticky bit\n-L filename Symbolic link\n-O filename True if file exists and is owned by the effective user id.\n-r filename Check if file is a readable\n-S filename Check if file is socket\n-s filename Check if file is nonzero size\n-u filename Check if file set-ser-id bit is set\n-w filename Check if file is writable\n-x filename Check if file is executable\n\nfile=\n./file\n\nif [ -e $file ]; then\n    echo \nFile exists\n\nelse \n    echo \nFile does not exists\n\nfi \n\nwhile [ ! -e myfile ]; do\n# Sleep until file does exists/is created\nsleep 1\ndone \n\n#Loops \n#Bash for loop\n# bash for loop\nfor f in $( ls /var/ ); do\n    echo $f\ndone \n\n\n#from command line\nfor f in $( ls /var/ ); do echo $f; done \n\n#Bash while loop\nCOUNT=6\n# bash while loop\nwhile [ $COUNT -gt 0 ]; do\n    echo Value of count is: $COUNT\n    let COUNT=COUNT-1\ndone \n\n#Bash until loop\nCOUNT=0\n# bash until loop\nuntil [ $COUNT -gt 5 ]; do\n        echo Value of count is: $COUNT\n        let COUNT=COUNT+1\ndone \n\n#Control bash loop with\n# This bash script will locate and replace spaces\n# in the filenames\nDIR=\n.\n\n# Controlling a loop with bash read command by redirecting STDOUT as\n# a STDIN to while loop\n# find will not truncate filenames containing spaces\nfind $DIR -type f | while read file; do\n# using POSIX class [:space:] to find space in the filename\nif [[ \n$file\n = *[[:space:]]* ]]; then\n# substitute space with \n_\n character and consequently rename the file\nmv \n$file\n `echo $file | tr ' ' '_'`\nfi;\n# end of while loop\ndone \n\n\n#Bash Functions\n# BASH FUNCTIONS CAN BE DECLARED IN ANY ORDER\nfunction function_B {\n        echo Function B.\n}\nfunction function_A {\n        echo $1\n}\nfunction function_D {\n        echo Function D.\n}\nfunction function_C {\n        echo $1\n}\n# FUNCTION CALLS\n# Pass parameter to function A\nfunction_A \nFunction A.\n\nfunction_B\n# Pass parameter to function C\nfunction_C \nFunction C.\n\nfunction_D \n\n#Bash Select\nPS3='Choose one word: ' \n\n# bash select\nselect word in \nlinux\n \nbash\n \nscripting\n \ntutorial\n \ndo\n  echo \nThe word you have selected is: $word\n\n# Break, otherwise endless loop\n  break  \ndone\n\nexit 0 \n\n\n#Case statement conditional\necho \nWhat is your preferred programming / scripting language\n\necho \n1) bash\n\necho \n2) perl\n\necho \n3) phyton\n\necho \n4) c++\n\necho \n5) I do not know !\n\nread case;\n#simple case bash structure\n# note in this case $case is variable and does not have to\n# be named case this is just an example\ncase $case in\n    1) echo \nYou selected bash\n;;\n    2) echo \nYou selected perl\n;;\n    3) echo \nYou selected phyton\n;;\n    4) echo \nYou selected c++\n;;\n    5) exit\nesac \n\n\n#Bash quotes and quotations\n# Escaping Meta characters\n#Declare bash string variable\nBASH_VAR=\nBash Script\n\n\n# echo variable BASH_VAR\necho $BASH_VAR\n\n#when meta character such us \n$\n is escaped with \n \n it will be read literally\necho  $BASH_VAR \n\n# backslash has also special meaning and it can be suppressed with yet another \n \n\necho \n  \n \n\n#Single quotes\n#Declare bash string variable\n BASH_VAR=\nBash Script\n\n\n # echo variable BASH_VAR\n echo $BASH_VAR\n\n # meta characters special meaning in bash is suppressed when  using single quotes \n echo '$BASH_VAR  \n$BASH_VAR\n' \n\n#Double Quotes\n#Declare bash string variable\nBASH_VAR=\nBash Script\n\n\n# echo variable BASH_VAR\necho $BASH_VAR\n\n# meta characters and its special meaning in bash is \n# suppressed when using double quotes except \n$\n, \n \n and \n`\n\n\necho \nIt's $BASH_VAR  and  \n$BASH_VAR \n using backticks: `date`\n \n\n#Bash quoting with ANSI-C style\n a  alert (bell)     b  backspace\n e  an escape character  f  form feed\n n  newline  r  carriage return\n t  horizontal tab   v  vertical tab\n    backslash    `  single quote\n nnn    octal value of characters ( see [http://www.asciitable.com/ ASCII table] )   xnn    hexadecimal value of characters ( see [http://www.asciitable.com/ ASCII table] )\n\n#Arithmetic Operations\nlet RESULT1=$1+$2\necho $1+$2=$RESULT1 ' -\n # let RESULT1=$1+$2'\ndeclare -i RESULT2\nRESULT2=$1+$2\necho $1+$2=$RESULT2 ' -\n # declare -i RESULT2; RESULT2=$1+$2'\necho $1+$2=$(($1 + $2)) ' -\n # $(($1 + $2))' \n\n#Bash Arithmetics\necho '### let ###'\n# bash addition\nlet ADDITION=3+5\necho \n3 + 5 =\n $ADDITION\n\n# bash subtraction\nlet SUBTRACTION=7-8\necho \n7 - 8 =\n $SUBTRACTION \n\n# bash multiplication\nlet MULTIPLICATION=5*8\necho \n5 * 8 =\n $MULTIPLICATION\n\n# bash division\nlet DIVISION=4/2\necho \n4 / 2 =\n $DIVISION\n\n# bash modulus\nlet MODULUS=9%4\necho \n9 % 4 =\n $MODULUS\n\n# bash power of two\nlet POWEROFTWO=2**2\necho \n2   2 =\n $POWEROFTWO\n\n\necho '### Bash Arithmetic Expansion ###'\n# There are two formats for arithmetic expansion: $[ expression ] \n# and $(( expression #)) its your choice which you use\n\necho 4 + 5 = $((4 + 5))\necho 7 - 7 = $[ 7 - 7 ]\necho 4 x 6 = $((3 * 2))\necho 6 / 3 = $((6 / 3))\necho 8 % 7 = $((8 % 7))\necho 2   8 = $[ 2 ** 8 ]\n\n\necho '### Declare ###'\n\necho -e \nPlease enter two numbers  c\n\n# read user input\nread num1 num2\ndeclare -i result\nresult=$num1+$num2\necho \nResult is:$result \n\n\n# bash convert binary number 10001\nresult=2#10001\necho $result\n\n# bash convert octal number 16\nresult=8#16\necho $result\n\n# bash convert hex number 0xE6A\nresult=16#E6A\necho $result \n\n#Round floating point number\n# get floating point number\nfloating_point_number=3.3446\necho $floating_point_number\n# round floating point number with bash\nfor bash_rounded_number in $(printf %.0f $floating_point_number); do\necho \nRounded number with bash:\n $bash_rounded_number\ndone \n\n#Bash floating point calculations\n# Simple linux bash calculator \necho \nEnter input:\n \nread userinput\necho \nResult with 2 digits after decimal point:\n\necho \nscale=2; ${userinput}\n | bc \necho \nResult with 10 digits after decimal point:\n\necho \nscale=10; ${userinput}\n | bc \necho \nResult as rounded integer:\n\necho $userinput | bc \n\n#Redirections\n#STDOUT from bash script to STDERR\necho \nRedirect this STDOUT to STDERR\n 1\n2 \n#STDERR from bash script to STDOUT\ncat $1 2\n1 \n#stdout to screen\nls file1 \n#stdout to file\nls file1 \n STDOUT", 
            "title": "Bash"
        }, 
        {
            "loc": "/shell/bash_example/index.html", 
            "tags": "", 
            "text": "###bash example\nhttps://raw.githubusercontent.com/buildbot/buildbot/master/common/validate.sh\n\n\n#! /bin/bash\nTEST='buildbot.test buildslave.test'\n\n# some colors\n# plain\n_ESC=$' e'\nGREEN=\n$_ESC[0;32m\n\nMAGENTA=\n$_ESC[0;35m\n\nRED=\n$_ESC[0;31m\n\nLTCYAN=\n$_ESC[1;36m\n\nYELLOW=\n$_ESC[1;33m\n\nNORM=\n$_ESC[0;0m\n\n\n## parse options\n\nquick=false\nno_js=false\nhelp=false\nwhile [ $# -gt 0 ]; do\n    case $1 in\n        --quick) quick=true ;;\n        --no-js) no_js=true ;;\n        --help) help=true ;;\n        -*) echo \n$0: error - unrecognized option $1\n 1\n2; help=true ;;\n        *) REVRANGE=\n$1..HEAD\n ;;\n    esac\n    shift\ndone\n\nif $help; then\n    echo \nUSAGE: common/validate.sh [oldrev] [--quick] [--no-js] [--help]\n\n    echo \n  This script will test a set of patches (oldrev..HEAD) for basic acceptability as a patch\n\n    echo \n  Run it in an activated virtualenv with the current Buildbot installed, as well as\n\n    echo \n      sphinx, pyflakes, mock, and so on\n\n    echo \nTo use a different directory for tests, pass TRIALTMP=/path as an env variable\n\n    echo \nif --quick is passed validate will skip unit tests and concentrate on coding style\n\n    echo \nif --no-js is passed validate will skip tests that require Node and NPM\n\n    echo \nif --help is passed validate will output this message and exit\n\n    echo \nif no oldrev is passed validate will assume master...HEAD\n\n    exit 1\nfi\n\n[ -z \n$REVRANGE\n ] \n REVRANGE=\nmaster..HEAD\n\n\nstatus() {\n    echo \n${LTCYAN}-- ${*} --${NORM}\n\n}\n\nok=true\nproblem_summary=\n\nnot_ok() {\n    ok=false\n    echo \n${RED}** ${*} **${NORM}\n\n    problem_summary=\n$problem_summary\n$' n'\n${RED}**${NORM} ${*}\n\n}\n\nwarning() {\n    echo \n${YELLOW}** ${*} **${NORM}\n\n    problem_summary=\n$problem_summary\n$' n'\n${YELLOW}**${NORM} ${*} (warning)\n\n}\n\ncheck_tabs() {\n    git diff \n$REVRANGE\n | grep -q $'+.* t'\n}\n\ncheck_long_lines() {\n    # only check python files\n    local long_lines=false\n    for f in $(git diff --name-only --stat \n$REVRANGE\n | grep '.py$'); do\n        # don't try to check removed files\n        [ ! -f \n$f\n ] \n continue\n        if [ $(git diff \n$REVRANGE\n $f | grep -E -c '  +.{80}') != 0 ]; then\n            echo \n $f\n\n            long_lines=true\n        fi\n    done\n    $long_lines\n}\n\n\ncheck_yield_defer_returnValue() {\n    local yields=false\n    if git diff \n$REVRANGE\n | grep '+.*yield defer.returnValue'; then\n        yields=true\n    fi\n    $yields\n}\n\ncheck_relnotes() {\n    if git diff --exit-code \n$REVRANGE\n master/docs/relnotes/index.rst \n/dev/null 2\n1; then\n        return 1\n    else\n        return 0\n    fi\n}\nrun_tests() {\n    if [ -n \n${TRIALTMP}\n ]; then\n        TEMP_DIRECTORY_OPT=\n--temp-directory ${TRIALTMP}\n\n    else\n        warning \nplease provide a TRIALTMP env variable pointing to a ramfs for 30x speed up of the integration tests\n\n    fi\n    find . -name  *.pyc -exec rm {}  ;\n    trial --reporter text ${TEMP_DIRECTORY_OPT} ${TEST}\n}\n\nif ! git diff --no-ext-diff --quiet --exit-code; then\n    not_ok \nchanged files in working copy\n\n    if ! $quick; then\n        exit 1\n    fi\nfi\n\n# get a list of changed files, used below; this uses a tempfile to work around\n# shell behavior when piping to 'while'\ntempfile=$(mktemp -t tmp.XXXXXX)\ntrap \nrm -f ${tempfile}; exit 1\n 1 2 3 15\ngit diff --name-only $REVRANGE | grep ' .py$' | grep -v ' ( master/docs |/setup .py )' \n ${tempfile}\npy_files=()\nwhile read line; do\n    if test -f \n${line}\n; then\n        py_files+=($line)\n    fi\ndone \n ${tempfile}\n\necho \n${MAGENTA}Validating the following commits:${NORM}\n\ngit log \n$REVRANGE\n --pretty=oneline || exit 1\n\nif ! $quick \n ! $no_js; then\n    for module in www/base www/console_view www/waterfall_view www/codeparameter;\n    do\n        status \nrunning 'setup.py develop' for $module\n\n        if ! (cd $module; python setup.py develop \n/dev/null ); then\n            warning \n$module/setup.py failed; retrying with cleared libs/\n\n            rm -rf \n$module/libs\n\n            (cd $module; python setup.py develop \n/dev/null ) || not_ok \n$module/setup.py failed\n\n        fi\n    done\nelse\n    warning \nSkipping JavaScript Tests\n\nfi\n\nif ! $quick; then\n    status \nrunning Python tests\n\n    run_tests || not_ok \nPython tests failed\n\nelse\n    warning \nSkipping Python Tests\n\nfi\n\nstatus \nchecking formatting\n\ncheck_tabs \n not_ok \n$REVRANGE adds tabs\n\ncheck_long_lines \n warning \n$REVRANGE adds long lines\n\ncheck_yield_defer_returnValue \n not_ok \n$REVRANGE yields defer.returnValue\n\n\nstatus \nchecking for release notes\n\ncheck_relnotes || warning \n$REVRANGE does not add release notes\n\n\nstatus \nchecking import module convention in modified files\n\nRES=true\nfor filename in ${py_files[@]}; do\n  if ! python common/fiximports.py \n$filename\n; then\n    echo \ncannot fix imports of $filename\n\n    RES=false\n  fi\ndone\n$RES || warning \nsome import fixes failed -- not enforcing for now\n\n\nstatus \nrunning autopep8\n\nif [[ -z `which autopep8` ]]; then\n    warning \nautopep8 is not installed\n\nelif [[ ! -f common/pep8rc ]]; then\n    warning \ncommon/pep8rc not found\n\nelse\n    changes_made=false\n    for filename in ${py_files[@]}; do\n        LINEWIDTH=$(grep -E \nmax-line-length\n common/pep8rc | sed 's/ //g' | cut -d'=' -f 2)\n        # even if we dont enforce errors, if they can be fixed automatically, thats better..\n        IGNORES=E123,E501,W6\n        # ignore is not None for SQLAlchemy code..\n        if [[ \n$filename\n =~ \n/db/\n ]]; then\n            IGNORES=$IGNORES,E711,E712\n        fi\n        autopep8 --in-place --max-line-length=$LINEWIDTH --ignore=$IGNORES \n$filename\n\n        if ! git diff --quiet --exit-code \n$filename\n; then\n            changes_made=true\n        fi\n    done\n    if ${changes_made}; then\n        not_ok \nautopep8 made changes\n\n    fi\nfi\n\nstatus \nrunning pep8\n\nif [[ -z `which pep8` ]]; then\n    warning \npep8 is not installed\n\nelif [[ ! -f common/pep8rc ]]; then\n    warning \ncommon/pep8rc not found\n\nelse\n    pep8_ok=true\n    for filename in ${py_files[@]}; do\n        if ! pep8 --config=common/pep8rc \n$filename\n; then\n            pep8_ok=false\n        fi\n    done\n    $pep8_ok || not_ok \npep8 failed\n\nfi\n\nstatus \nrunning pyflakes\n\nif [[ -z `which pyflakes` ]]; then\n    warning \npyflakes is not installed\n\nelse\n    pyflakes_ok=true\n    for filename in ${py_files[@]}; do\n        if ! pyflakes \n$filename\n; then\n            pyflakes_ok=false\n        fi\n    done\n    $pyflakes_ok || not_ok \npyflakes failed\n\nfi\n\n\nstatus \nrunning pylint\n\nif [[ -z `which pylint` ]]; then\n    warning \npylint is not installed\n\nelif [[ ! -f common/pylintrc ]]; then\n    warning \ncommon/pylintrc not found\n\nelse\n    pylint_ok=true\n    for filename in ${py_files[@]}; do\n        if ! pylint --rcfile=common/pylintrc --disable=R,line-too-long --enable=W0611 --output-format=text --report=no \n$filename\n; then\n            pylint_ok=false\n        fi\n    done\n    $pylint_ok || not_ok \npylint failed\n\nfi\n\nif git diff --name-only $REVRANGE | grep  master/docs/ ; then\n    status \nbuilding docs\n\n    make -C master/docs VERSION=latest clean html || not_ok \ndocs failed\n\nelse\n    status \nnot building docs, because it was not changed\n\nfi\n\necho \n\nif $ok; then\n    if [ -z \n${problem_summary}\n ]; then\n        echo \n${GREEN}GOOD!${NORM}\n\n    else\n        echo \n${YELLOW}WARNINGS${NORM}${problem_summary}\n\n    fi\n    exit 0\nelse\n    echo \n${RED}NO GOOD!${NORM}${problem_summary}\n\n    exit 1\nfi", 
            "title": "Bash_example"
        }, 
        {
            "loc": "/shell/bash_summary/index.html", 
            "tags": "", 
            "text": "From \nbash-hackers.org\n\n\nBash syntax and operations\n\n\n\n\n\n\nCompound commands\n\n\n\n\n\n    \n\n    \n\n        \n Compound commands overview\n  \n\n    \n\n    \n\n        \nGrouping  \n\n    \n\n    \n\n    \n\n        \n{ \u2026; }\n command grouping\n\n    \n\n    \n\n        \n( \u2026 )\n command grouping in a subshell\n\n    \n\n    \n\n        \nConditionals  \n\n    \n\n    \n\n        \n[[ ... ]]\n conditional expression\n\n    \n\n    \n\n        \nif \u2026; then \u2026; fi\n conditional branching\n\n    \n\n    \n\n        \ncase \u2026 esac\n pattern-based branching\n\n    \n\n    \n\n        \nLoops  \n\n    \n\n    \n\n        \nfor word in \u2026; do \u2026; done\n classic for-loop\n\n    \n\n    \n\n        \nfor ((x=1; x\n=10; x++)); do ...; done\n C-style for-loop\n\n    \n\n    \n\n        \nwhile \u2026; do \u2026; done\n while loop\n\n    \n\n    \n\n        \nuntil \u2026; do \u2026; done\n until loop\n\n    \n\n    \n\n        \nMisc  \n\n    \n\n    \n\n        \n(( ... ))\n arithmetic evaluation\n\n    \n\n    \n\n        \nselect word in \u2026; do \u2026; done\n user selections\n\n    \n\n\n\n\n\n\n\n\n\n\n\nExpansions and substitutions\n\n\n\n\n\n    \n\n    \n\n        \n Introduction to expansions and substitutions\n  \n\n    \n\n    \n\n    \n\n        \n{A,B,C}    {A..C}\n Brace expansion\n\n    \n\n    \n\n        \n~/    ~root/\n Tilde expansion\n\n    \n\n    \n\n        \n$FOO    ${BAR%.mp3}\n Parameter expansion\n\n    \n\n    \n\n        \n`command`    $(command)\n Command substitution\n\n    \n\n    \n\n        \n(command)    \n(command)\n Process substitution\n\n    \n\n    \n\n        \n$((1 + 2 + 3))    $[4 + 5 + 6]\n Arithmetic expansion\n\n    \n\n    \n\n        \nHello    \n---\n    Word!\n Word splitting\n\n    \n\n    \n\n        \n/data/*-av/*.mp?\n Pathname expansion\n\n    \n\n\n\n\n\n\n\nBuiltin Commands\n\n\n\n\nThis is a selection of builtin commands and command-like keywords, loosely arranged by their common uses. These are provided directly by the shell, rather than invoked as standalone external commands.\n\n\n\n\n\n    \n\n    \n\n        \n  Declaration commands\n\n\nCommands that set and query attributes/types, and manipulate simple datastructures.\n  \n  Alt  \n  Type  \n\n    \n\n    \n\n    \n\n        \n declare\nDisplay or set shell variables or functions along with attributes.\n  \ntypeset\n  \n  builtin  \n\n    \n\n    \n\n        \n export\nDisplay or set shell variables, also giving them the export attribute.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n eval\nA common misspelling of  evil \n  -  \n  special builtin  \n\n    \n\n    \n\n        \n local\nDeclare variables as having function local scope.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n readonly\nMark variables or functions as read-only.\n  \ndeclare -r\n  \n  special builtin  \n\n    \n\n    \n\n        \n unset\nUnset variables and functions.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n shift\nShift positional parameters\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n  I/O\n\n\nCommands for reading/parsing input, or producing/formatting output of standard streams.\n  \n  Alt  \n  Type  \n\n    \n\n    \n\n        \n coproc\nCo-processes: Run a compound command in the background with async I/O.\n  -  \n  keyword  \n\n    \n\n    \n\n        \n echo\nCreate output from args.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n mapfile\nCreate arrays from lines of input\n  \nreadarray\n  \n  builtin  \n\n    \n\n    \n\n        \n printf\n advanced \necho\n. \n  -  \n  builtin  \n\n    \n\n    \n\n        \n read\nBuild variables or arrays from input streams.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n  Configuration and Debugging\n\n\nCommands that modify shell behavior, change special options, assist in debugging.\n  \n  Alt  \n  Type  \n\n    \n\n    \n\n        \n caller\nIdentify/print execution frames.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n set\nControl positional parameters and shell behaviour.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n shopt\nset/get shell options.\n  -  \n  builtin  \n\n    \n\n\n\n\n\n\n    \n\n    \n\n        \n  Control flow and data processing\n\n\nCommands that operate on data and/or affect control flow.\n  \n  Alt  \n  Type  \n\n    \n\n    \n\n    \n\n        \n colon\n true  null command\n  true  \n  special builtin  \n\n    \n\n    \n\n        \n dot\nSource external files\n  source  \n  special builtin  \n\n    \n\n    \n\n        \n false\nFail at doing nothing\n  -  \n  builtin  \n\n    \n\n    \n\n        \n continue / break\ncontinue with or break out of loops.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n let\nArithmetic evaluation - an old fashioned way.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n return\nBreak out of a function, returning the specified exit status.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n [\nThe classic \ntest\n command.\n  test  \n  builtin  \n\n    \n\n    \n\n        \n  Process and Job control\n\n\nCommands related to jobs, signals, process groups, subshells.\n  \n  Alt  \n  Type  \n\n    \n\n    \n\n        \n exec\nReplace the shell, set redirections.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n exit\nExit the shell.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n trap\nSet traps.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n times\nDisplay process times.\n  -  \n  special builtin  \n\n    \n\n    \n\n        \n wait\nWait for background jobs and asynchronous lists.\n  -  \n  builtin  \n\n    \n\n    \n\n        \n  Interactive\n\n\nHistory, programmable completion, directory stack.\n  \n  Alt  \n  Type", 
            "title": "Bash_summary"
        }, 
        {
            "loc": "/shell/csh/index.html", 
            "tags": "", 
            "text": "csh\n\n\ncsh manpage\n  \n\n\n#!/bin/csh -vx\n#csh -vx show the command before running to help debug\n\n#just to check syntax\n#csh -n $0\n\n#argv\nif ($#argv \n 2) then\n    echo \nSorry, but you entered too few parameters\n\n    echo \nusage:  $0 arg1 arg2\n    exit\nendif\n\nset arg1 = $1\nset arg2 = $2\n\nforeach i ($*)\n   echo $i\nend\n\n\n#execute commands\necho \nHello there `whoami`.  How are you today?\n\necho \nYou are currently using `hostname` and the time is `date`\n\necho \nYour directory is `pwd`\n\nwhoami\nhostname\ndate\npwd\n\n\n#var\nset name = Mark\necho $name\nset name = \nMark Meyer\n # if the string has space, must use \n\necho $name\n# it means set to NULL\n set name = \n unset name\n# get user input\nset x = $\n  \nset current_user = `whoami`\n\n\n#buildin vars\necho $user      # who am I?\necho $status    # a numeric variable, usually used to retun error codes\n\n\n#Arithmetic variables\n@ i = 2\n@ k = ($x - 2) * 4\n@ k = $k + 1\n@ i--\n@ i++\n\n#array\nset name = (mark sally kathy tony)\necho $#name    # num of the array\necho $name[1]\necho $name[4]\necho $name[2-3]\necho $name[2-]        # all elements from 2 to the end\necho $name[1-3]\necho $name[$i]\nset name = ($name doran)\nset name = (doran $name)\nset name = ($name[1-2] alfie $name[3-])\nshift name  # get rid of the frist element of the array\nshift #if no argument is given, it will get rid of argv\n\n#Expressions and operators\n==        equal     (either strings or numbers)\n!=        not equal     (either strings or numbers)\n=~        string match\n!~        string mismatch\n\n=        numerical less than or equal to\n\n=        numerical greater than or equal to\n\n         numerical greater than\n\n         numerical less than\n\n# check file \n-e file           file merely exists (may be protected from user)\n-r file           file exists and is readable by user\n-w file           file is writable by user\n-x file           file is executable by user\n-o file           file is owned by user\n-z file           file has size 0\n-f file           file is an ordinary file\n-d file           file is a directory\n\n!   -- negate                 \n\n  -- logical and\n||  -- logical or\n\n#if-else\n# run cmd as if expression\nif ({grep -s junk $1}) then  \n   echo \nWe found junk in file $1\n\nendif\n# check if the var is defined\nif ($?dirname) then \n   ls $dirname\nendif\n\nif (-e somefile) then\n  grep $1 somefile\nelse\n   echo \nGrievous error!  Database file does not exist\n.\nendif\n\n#foreach\nforeach i (*)\n    if (-f $i) then\n      echo \n============= $i ===================\n\n      head $i\n    endif\n    if (-d $i) then\n        (cd $i; headers)\n    endif\nend\n\n\n#while\nwhile ($#argv \n 0)\n    grep $something $argv[1]\nend\n\n@ n = 5\nwhile ($n) \n    # do something\n    @ n--\nend\n\n#switch-case\nswitch ($argv[$i])\ncase quit:\n   break        # leave the switch statement\n   case list:\n       ls\n       breaksw\n    case delete:\n    case erase:\n        @ k = $i + 1\n        rm $argv[$k]\n        breaksw\nendsw\n\n\n#here document\ngrep $i \nHERE\nJohn Doe   101 Surrey Lane    London, UK    5E7 J2K\nAngela Langsbury   99 Knightsbridge, Apt. K4     Liverpool\nJohn Major  10 Downing Street  London\nHERE\n\ncat \n tempdata \nENDOFDATA\n53.3 94.3 67.1\n48.3 01.3 99.9\n42.1 48.6 92.8\nENDOFDATA\n\nexit 0", 
            "title": "Csh"
        }, 
        {
            "loc": "/shell/zsh/index.html", 
            "tags": "", 
            "text": "zsh\n\n\nzsh manpage", 
            "title": "Zsh"
        }, 
        {
            "loc": "/shell/shell_compare/index.html", 
            "tags": "", 
            "text": "From \nHyperpolyglot\n\n      \n\n      \n\n        \n\n\n\n                            Unix Shells: Bash, Fish, Ksh, Tcsh, Zsh\n                        \n\n\n\n\n\n \ngrammar\n | \nquoting and escaping\n | \ncharacters\nvariables\n | \nvariable expansion\n | \nbrace, tilde, command, and pathname expansion\n | \nspecial variables\narithmetic and conditional expressions\narrays\n | \nassociative arrays\nfunctions\n | \ncommand resolution\n | \narguments and options\nexecution control\nredirection\n | \necho and read\n | \nfiles and directories\nprocess and job control\nhistory\n | \nkey bindings\nstartup files\n | \nprompt customization\n | \nautoload\n\n\nGrammar\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nsimple command\n\n\nls\n\n\nls\n\n\nls\n\n\nls\n\n\nls\n\n\nsimple command with argument\n\n\necho hi\n\n\necho hi\n\n\necho hi\n\n\necho hi\n\n\necho hi\n\n\nsimple command with redirect\n\n\nls \n /tmp/ls.out\n\n\nls \n /tmp/ls.out\n\n\nls \n /tmp/ls.out\n\n\nls \n /tmp/ls.out\n\n\nls \n /tmp/ls.out\n\n\nsimple command with environment variable\n\n\nEDITOR=vi git commit\n\n\nenv EDITOR=vi git commit\n\n\nEDITOR=vi git commit\n\n\nenv EDITOR=vi git commit\n\n\nEDITOR=vi git commit\n\n\npipeline\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nsublist separators\n\n\n \n||\n\n\nnone\n\n\n \n||\n\n\n \n||\n\n\n \n||\n\n\nlist terminators\n\n\n; \n\n\n; \n\n\n; \n\n\n; \n\n\n; \n\n\ngroup command\n\n\n{ ls; ls;} | wc\n\n\nbegin; ls; ls; end | wc\n\n\n{ ls; ls;} | wc\n\n\nnone\n\n\n{ ls; ls;} | wc\n\n\nsubshell\n\n\n(ls; ls) | wc\n\n\nfish -c 'ls; ls' | wc\n\n\n(ls; ls) | wc\n\n\n(ls; ls) | wc\n\n\n(ls; ls) | wc\n\n\nShells read input up to an unquoted newline and then execute it. An unquoted backslash followed by a newline are discarded and cause the shell to wait for more input. The backslash and newline are discarded before the shell tokenizes the string, so long lines can be split anywhere outside of single quotes, even in the middle of command names and variable names.\n\n\nIn the shell grammar, \nlists\n contain \nsublists\n, which contain \npipelines\n, which contain \nsimple commands\n.\n\n\nSubshells\n and \ngrouping\n can be used to put a list in a pipeline. Subshells and groups can have newlines, but the shell defers execution until the end of the subshell or group is reached.\n\n\nThe section on \nexecution control\n describes structures which do not fit into the simple grammar and execution model outlined here. The shell will not execute any of the control structures until the end keyword is reached. As a result, the control structure can contain multiple statements separated by newlines. Execution control structures cannot be put into pipelines.\n\n\n\n\nsimple command\n\n\nIn its simplest form a line in a shell script is a word denoting a command. The shell looks successively for a user-defined function, built-in function, and external command in the search path matching the word. The first one found is run. If no matching function or external command is found the shell emits a warning and sets its status variable to a nonzero value. It does not return the status value to its caller unless it has reached the end of its input, however.\n\n\ntcsh\n lacks user defined functions but built-ins still take precedence over external commands.\n\n\n\n\nsimple command with argument\n\n\nCommands can be followed by one or more words which are the arguments to the command. How a shell tokenizes the input into words is complicated in the general case, but in the common case the arguments are whitespace delimited.\n\n\n\n\nsimple command with redirect\n\n\nThe standard output, standard input, and standard error of the command can be redirected to files. This is described under \nredirection\n.\n\n\n\n\nsimple command with environment variable\n\n\nA nonce environment variable can be set for the exclusive use of the command.\n\n\n\n\npipeline\n\n\nPipelines are a sequence of simple commands in which the standard output of each command is redirected to the standard input of its successor.\n\n\n\n\nsublist separators\n\n\nSublist\n is a term from the \nzsh\n documentation describing one or more pipelines separated by the shortcut operators \n and \n||\n. When \n is encountered, the shell stops executing the pipelines if the previous pipeline failed. When \n||\n is encountered, the shell stops executing if the previous pipeline succeeded. A pipeline is successful if the last command returns a zero status.\n\n\nfish:\n\n\nFish has short-circuit operators; the following are equivalent to \nls \n ls\n and \nls || ls\n:\n\n\n\n\n$ ls ; and ls\n$ ls ; or ls\n\n\n\n\n\n\nlist terminators\n\n\nA list is a sequence of sublists separated by semicolons \n;\n or ampersands \n and optionally terminated by a semicolon or ampersand.\n\n\nIf the separator or terminator is an ampersand, the previous sublist is run in the background. This permits the shell to execute the next sublist or the subsequent statement without waiting for the previous sublist to finish.\n\n\n\n\ngroup command\n\n\nA group command can be used to concatenate the stdout of multiple commands and pipe it to a subsequent command.\n\n\nIf the group has an input stream, it is consumed by the first command to read from stdin.\n\n\nbash\n requires that the final command be terminated by a semicolon; \nzsh\n does not.\n\n\n\n\nsubshell\n\n\nLike the group command, but the commands are executed in a subshell. Variable assignments or change of working directory are local to the subshell.\n\n\n\n\nQuoting and Escaping\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nliteral quotes\n\n\n'foo'\n\n\nallows  ' and    escapes:\n\n'foo'\n\n\n'foo'\n\n\n'foo'\n\n\n'foo'\n\n\ninterpolating quotes\n\n\nfoo=7\n\n foo is $foo \n\n\nset foo 7\n\n foo is $foo \ndouble quotes do not perform\n\ncommand substitution\n\n\nfoo=7\n\n foo is $foo \n\n\nsetenv foo 7\n\n foo is $foo \n\n\nfoo=7\n\n foo is $foo \n\n\ninterpolating quotes escape sequences\n\n\n $    \n `\n   \n\n\n    $   \n\n\n $    \n `\n\n\nnone\n\n\n $    \n `\n   \n\n\nquotes with backslash escapes\n\n\n$'foo n'\n\n\nnone\n\n\n$'foo'\n\n\nnone\n\n\n$'foo'\n\n\nquoted backslash escapes\n\n\n a  b  e  E  f  n  r  t  v\n\n    '     \nooo\n  x\nhh\n  c\nctrl\n\n\nnone\n\n\n a  b  e  E  f  n  r  t  v\n\n    '     \nooo\n  x\nhh\n  c\nctrl\n\n\nnone\n\n\n a  b  e  E  f  n  r  t  v\n\n    '     \nooo\n  x\nhh\n  c\nctrl\n\n\nunquoted backslash escapes\n\n\n \nspace\n\n\n a  b  e  f  n  r  t  v  \nspace\n\n $     *  ?  ~  %  #  (  )  {\n\n }  [  ]  \n  \n     \n  ;     '\n\n x\nhh\n  X\nhh\n  \nooo\n  u\nhhhh\n  U\nhhhhhhhh\n  c\nctrl\n\n\n \nspace\n\n\n \nspace\n\n\n \nspace\n\n\ncommand substitution\n\n\n$(ls)\n\n`ls`\n\n\n(ls)\n\n\n$(ls)\n\n`ls`\n\n\n`ls`\n\n\n$(ls)\n\n`ls`\n\n\nbacktick escape sequences\n\n\n $    \n `\n  \nnewline\n\n\nnone\n\n\n $    \n `\n  \nnewline\n\n\n $     \nnewline\n\n\n $    \n `\n  \nnewline\n\n\n\n\nliteral quotes\n\n\nLiteral quotes (aka single quotes) create a word with exactly the characters shown in the source code. For the shells other than \nfish\n there is no escaping mechanism and hence no way to put single quotes in the word.\n\n\nLiteral quotes can be used to put characters that the shell lexer uses to distinguish words inside a single word. For \nbash\n these characters are:\n\n\n\n\n| \n ; ( ) \n \n space tab\n\n\n\n\nLiterals quotes can also be used to prevent the parameter, brace, pathname, and tilde expansion as well as command substitution. For \nbash\n the special characters that trigger these expansions are:\n\n\n\n\n$ { } * ? [ ] ` ~\n\n\n\n\n\n\ninterpolating quotes\n\n\nInterpolating quotes (aka double quotes) perform parameter expansion and command substitution of both the $( ) and \n` `\n variety. They do not perform brace, pathname, or tilde expansion. $ and \n`\n are thus special characters but they can be escaped with a backslash as can the backslash itself, the double quote, and a newline.\n\n\n\n\ninterpolating quotes escape sequences\n\n\nThe escape sequences available in interpolating quotes.\n\n\n\n\nquotes with backslash escapes\n\n\nString literals which support C-style escapes.\n\n\n\n\nquoted backslash escapes\n\n\nThe C-style string literal escapes.\n\n\n\n\nunquoted backslash escapes\n\n\nfish\n permits the use of C escapes outside of quotes.\n\n\n\n\ncommand substitution\n\n\nHow to execute a command and get the output as shell text.\n\n\nIf the command output contains whitespace, the shell may parse the output into multiple words. Double quotes can be used to guarantee that the command output is treated as a single word by the shell:\n\n\n\n\n $(ls) \n `ls` \n\n\n\n\n\n\nbacktick escape sequences\n\n\nEscape sequences that can be used inside backtick quotes.\n\n\n\n\nCharacters\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nword separating\n\n\n| \n ; ( ) \n \n SP HT LF\n\n\n| \n ; ( ) \n \n SP HT LF\n\n\n| \n ; ( ) \n \n SP HT LF\n\n\n| \n ; ( ) \n \n SP HT LF\n\n\n| \n ; ( ) \n \n SP HT LF\n\n\nquoting and escaping\n\n\n  ' \n \n\n\n  ' \n \n\n\n  ' \n \n\n\n  ' \n \n\n\n  ' \n \n\n\nshell expansion\n\n\nvariable:\n $\nbrace:\n { }\ntilde:\n ~\ncommand:\n \n`\npathname:\n * ? [ ]\nhistory:\n !  \n\n\nvariable:\n $\nbrace:\n { }\ntilde:\n ~\ncommand:\n \n( )\npathname:\n * ?\n\n\nvariable:\n $\nbrace:\n { }\ntilde:\n ~\ncommand:\n \n`\npathname:\n * ? [ ]\n\n\nvariable:\n $\nbrace:\n { }\ntilde:\n ~\ncommand:\n \n`\npathname:\n * ? [ ]\nhistory:\n !  \n\n\nvariable:\n $\nbrace:\n { }\ntilde:\n ~\ncommand:\n \n`\npathname:\n * ? [ ]\nhistory:\n !  \n\n\nother special\n\n\n# =\n\n\n# [ ]\n\n\n# = .\n\n\n#\n\n\n# =\n\n\nbareword\n\n\nA-Z a-z 0-9 _ - . , : + / @ %\n\n\nA-Z a-z 0-9 _ - . , : + / @ % !   =\n\n\nA-Z a-z 0-9 _ - , : + / @ % !  \n\n\nA-Z a-z 0-9 _ - . , : + / @ % =\n\n\nA-Z a-z 0-9 _ - . , : + / @ %\n\n\nvariable name\n\n\nA-Z a-z 0-9 _\n\n\nA-Z a-z 0-9 _\n\n\nA-Z a-z 0-9 _\n\n\nA-Z a-z 0-9 _\n\n\nA-Z a-z 0-9 _\n\n\n\n\nword separating\n\n\nThe shell tokenizes its input into words. Characters which are not word separating and do not have any word separating characters between them are part of the same word.\n\n\n\n\nquoting and escaping\n\n\nFor two characters to be in different words, the presence of a word separating character between them is \nnecessary\n but not \nsufficient\n, because the separating character must not be quoted or escaped.\n\n\nThe following two lines both tokenize as a single word:\n\n\n\n\n lorem ipsum \nlorem   ispum\n\n\n\n\n\n\nshell expansion\n\n\nThe presence of shell expansion characters in a word causes the shell to perform a transformation on the word. The transformation may replace the word with more than one word.\n\n\nIn the following example, the word \n*.c\n will be replaced by multiple words if there is more than one file with a \n.c\n suffix in the working directory:\n\n\n\n\ngrep main *.c\n\n\n\n\nSquare brackets \n[ ]\n are used for both pathname expansion, where the brackets contain a list of characters, and array notation, where the brackets contain an index. We believe that in cases of ambiguity, the syntax is always treated as array notation. \nfish\n does not have this ambiguity because it does not use square brackets in pathname expansion.\n\n\nzsh:\n\n\nIn \nzsh\n variable expansion will expand to a single word, even if the variable contains word separating characters. This behavior is different from the other shells.\n\n\nA variable can be expanded to multiple words with the \n${=VAR\n}\n syntax, however.\n\n\n\n\n$ function countem() { echo $#; }\n\n$ foo='one two three'\n\n$ countem $foo\n1\n\n$ countem ${=foo}\n3\n\n\n\n\n\n\n\n\nother special characters\n\n\n\ncomments:\n\n\n\nThe number sign \n#\n can be used to start a comment which ends at the end of the line. The \n#\n must be by itself or the first character in a word.\n\n\n\nIn \ntcsh\n, comments are not supported when the shell is interactive.\n\n\n\nIn \nzsh\n, comments are not supported by default when the shell is interactive. This can be changed by invoking \nzsh\n with the \n-k\n flag or by running:\n\n\n\n\n\nset -o INTERACTIVE_COMMENTS\n\n\n\n\n\nvariable assignment:\n\n\n\nThe equals sign \n=\n is used for variable assignment in \nbash\n, \nksh\n, and \nzsh\n. Given that spaces cannot be placed around the equals sign, it seems likely the tokenizer treats it like other bareword characters. Note that in a simple command, the command name is the first word which does not contain an equals sign.\n\n\n\nnamespaces:\n\n\n\nksh\n has namespaces. They can be used for variable names and function names:\n\n\n\n\n\n$ bar=3\n\n$ namespace foo { bar=4; }\n\n$ echo $bar\n3\n\n$ namespace foo { echo $bar; }\n4\n\n$ echo ${.foo.bar}\n4\n\n\n\n\n\n\n\n\nbareword characters\n\n\n\nA bareword is a word which is not quoted and does not contain escapes. The characters which are listed above are those which can appear anywhere in a bareword.\n\n\n\nSome of the other characters can appear in barewords under certain circumstances. For example the tilde \n~\n can appear if it is not the first character.\n\n\n\n\n\n\nvariable name characters\n\n\n\nCharacters which can be used in variable names.\n\n\n\nNote that a variable name cannot start with a digit. Also, \n$_\n is a special variable which contains the previous command.\n\n\n\n\n\n\nVariables\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nexternal\n\n\nglobal variables\nset, get, list, unset, edit\n\n\nvar\n=\nval\n\n$\nvar\n\nset\n\nunset -v \nvar\nnone\n\n\nset -g \nvar\n \nval\n\n$\nvar\n\nset -g\n\nset -e \nvar\n\nvared \nvar\n\n\nvar\n=\nval\n\n$\nvar\n\nset\n\nunset -v \nvar\nnone\n\n\nset \nvar\n=\nval\n\n$\nvar\n\nset\n\nunset \nvar\nnone\n\n\nvar\n=\nval\n\n$\nvar\n\nset\n\nunset -v \nvar\n\nvared \nvar\n\n\n\n\nread-only variables\nmark readonly, set and mark readonly, list readonly\n\n\nreadonly \nvar\n\nreadonly \nvar\n=\nval\n\nreadonly -p\n\n\nnone\n\n\nreadonly \nvar\n\nreadonly \nvar\n=\nval\n\nreadonly -p\n\n\nnone\n\n\nreadonly \nvar\n\nreadonly \nvar\n=\nval\n\nreadonly -p\n\n\n\n\nexported variables\nexport, set and export, list exported, undo export\n\n\nexport \nvar\n\nexport \nvar\n=\nval\n\nexport -p\n\nexport -n \nvar\n\n\nset -gx \nvar\n $\nvar\n\nset -gx \nvar\n \nval\n\nset -x\n\nset -gu \nvar\n $\nvar\n\n\nexport \nvar\n\nexport \nvar\n=\nval\n\nexport -p\nnone\n\n\nsetenv \nvar\n $\nvar\n\nsetenv \nvar\n \nval\n\nprintenv\nnone\n\n\nexport \nvar\n\nexport \nvar\n=\nval\n\nexport -p\nnone\n\n\nnone\nnone\n\nprintenv\nnone\n\n\noptions\nset, list, unset\n\n\nset -o \nopt\n\nset -o\n\nset +o \nopt\n\n\nnone\n\n\nset -o \nopt\n\nset -o\n\nset +o \nopt\n\n\nnone\n\n\nset -o \nopt\n\nset -o\n\nset +o \nopt\n\n\n\n\nother variable built-ins\n\n\ndeclare\n\n\n\n\n\n\n@\n\n\ndeclare\n\nfunctions\n\nsetopt\n\nfloat\n\ninteger\n\nunsetopt\n\n\n\n\n\n\n\n\n\n\nglobal variables\n\n\n\nHow to set a global variable; how to get the value of a global variable; how to list all the global variables; how to unset a global variable; how to edit a variable.\n\n\n\nVariables are global by default.\n\n\n\nIn \ntcsh\n if \nvar\n is undefined then encountering $\nvar\n throws an error. The other shells will treat $\nvar\n as an empty string.\n\n\n\nIf there is a variable named \nfoo\n, then\n\n\n\n\n\nunset foo\n\n\n\n\n\nwill unset the variable. However, if there is no such variable but there is a function named \nfoo\n, then the function will be unset. \nunset -v\n will only unset a variable.\n\n\n\n\n\n\nread-only variables\n\n\n\nHow to mark a variable as read-only; how to simultaneously set and mark a variable as read-only; how to list the read-only variables.\n\n\n\nAn error results if an attempt is made to modify a read-only variable.\n\n\n\n\n\n\nexported variables\n\n\n\nHow to export a variable; how to set and export a variable; how to list the exported variables.\n\n\n\nExported variables are passed to child processes forked by the shell. This can be prevented by launching the subprocess with \nenv -i\n. Subshells created with parens ( ) have access non-exported variables.\n\n\n\nThe \ntcsh\n example for exporting a variable without setting it isn't the same as the corresponding examples from the other shells because in \ntcsh\n an error will result if the variable isn't already set.\n\n\n\n\n\n\noptions\n\n\n\nOptions are variables which are normally set via flags at the command line and affect shell behavior.\n\n\n\n\n\n\nVariable Expansion\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nexternal\n\n\nset variable value\n\n\nvar\n=\nval\n\n\nset -g \nvar\n \nval\n\n\nvar\n=\nval\n\n\nsetenv \nvar\n \nval\n\n\nvar\n=\nval\n\n\n\n\nget variable value\n\n\n$\nvar\n\n\n$\nvar\n\n\n$\nvar\n\n\n$\nvar\n\n\n$\nvar\n\n\n\n\nconcatenate variable and value\n\n\n${\nvar\n}\nval\n\n\n{$\nvar\n}\nval\n\n\n${\nvar\n}\nval\n\n\n${\nvar\n}\nval\n\n\n${\nvar\n}\nval\n\n\n\n\ncoalesce\n\n\n${\nvar\n:-\nval\n}\n\n\n\n\n${\nvar\n:-\nval\n}\n\n\n\n\n${\nvar\n:-\nval\n}\n\n\n\n\ncoalesce and assign if null\n\n\n${\nvar\n:=\nval\n}\n\n\n\n\n${\nvar\n:=\nval\n}\n\n\n\n\n${\nvar\n:=\nval\n}\n\n\n\n\nmessage to stderr and exit if null\n\n\n${\nvar\n:?\nmsg\n}\n\n\n\n\n${\nvar\n:?\nmsg\n}\n\n\n\n\n${\nvar\n:?\nmsg\n}\n\n\n\n\nsubstring\n\n\noffset is zero based:\n\n${\nvar\n:\noffset\n}\n\n${\nvar\n:\noffset\n:\nlen\n}\n\n\n\n\noffset is zero based:\n\n${\nvar\n:\noffset\n}\n\n${\nvar\n:\noffset\n:\nlen\n}\n\n\n\n\noffset is zero based:\n\n${\nvar\n:\noffset\n}\n\n${\nvar\n:\noffset\n:\nlen\n}\n\n\noffset is one based;\n\nwhen input lacks newlines:\n\nawk '{print substr($0, \noffset\n, \nlen\n)}'\n\n\nlength\n\n\n${\n#\nvar\n}\n\n\n\n\n${\n#\nvar\n}\n\n\n${%\nvar\n}\n\n\n${\n#\nvar\n}\n\n\nwc -m\n\n\nremove prefix greedily\n\n\nfoo=do.re.mi\n\n${foo##*.}\n\n\n\n\nfoo=do.re.mi\n\n${foo##*.}\n\n\n\n\nfoo=do.re.mi\n\n${foo##*.}\n\n\nsed 's/ .* .\n'\n\n\nremove prefix reluctantly\n\n\nfoo=do.re.mi\n\n${foo#*.}\n\n\n\n\nfoo=do.re.mi\n\n${foo#*.}\n\n\n\n\nfoo=do.re.mi\n\n${foo#*.}\n\n\nsed 's/ [  .]* .'\n\n\nremove suffix greedily\n\n\nfoo=do.re.mi\n\n${foo%%.*}\n\n\n\n\nfoo=do.re.mi\n\n${foo%%.*}\n\n\n\n\nfoo=do.re.mi\n\n${foo%%.*}\n\n\nsed 's/ ..*$\n'\n\n\nremove suffix reluctantly\n\n\nfoo=do.re.mi\n\n${foo%.*}\n\n\n\n\nfoo=do.re.mi\n\n${foo%.*}\n\n\n\n\nfoo=do.re.mi\n\n${foo%.*}\n\n\nsed 's/ .[  .]*$'\n\n\nsingle substitution\n\n\nfoo='do re mi mi'\n\n${foo/mi/ma}\n\n\n\n\nfoo='do re mi mi'\n\n${foo/mi/ma}\n\n\n\n\nfoo='do re mi mi'\n\n${foo/mi/ma}\n\n\nsed 's/mi/ma/'\n\n\nglobal substitution\n\n\nfoo='do re mi mi'\n\n${foo\n//\nmi/ma}\n\n\n\n\nfoo='do re mi mi'\n\n${foo\n//\nmi/ma}\n\n\n\n\nfoo='do re mi mi'\n\n${foo\n//\nmi/ma}\n\n\nsed 's/mi/ma/g'\n\n\nprefix substitution\n\n\nfoo=txt.txt\n\n${foo/#txt/text}\n\n\n\n\nfoo=txt.txt\n\n${foo/#txt/text}\n\n\n\n\nfoo=txt.txt\n\n${foo/#txt/text}\n\n\nsed 's/ txt/text/'\n\n\nsuffix substitution\n\n\nfoo=txt.txt\n\n${foo/%txt/html}\n\n\n\n\nfoo=txt.txt\n\n${foo/%txt/html}\n\n\n\n\nfoo=txt.txt\n\n${foo/%txt/html}\n\n\nsed 's/txt$/html/'\n\n\nupper case\n\n\nfoo=lorem\n\n${foo  }\n\n\n\n\nnone\n\n\n\n\nfoo=lorem\n\n${foo:u}\n\n\ntr '[:lower:]' '[:upper:]'\n\n\nupper case first letter\n\n\nfoo=lorem\n\n${foo }\n\n\n\n\nnone\n\n\n\n\nnone\n\n\n\n\nlower case\n\n\nfoo=LOREM\n\n${foo,,}\n\n\n\n\nnone\n\n\n\n\nfoo=LOREM\n\n${foo:l}\n\n\ntr '[:upper:]' '[:lower:]'\n\n\nlower case first letter\n\n\nfoo=LOREM\n\n${foo,}\n\n\n\n\nnone\n\n\n\n\nnone\n\n\n\n\nabsolute path\n\n\n\n\n\n\n\n\n\n\nfoo=~\n\n${foo:a}\n\n\n\n\ndirname\n\n\n\n\n\n\n\n\n\n\nfoo=/etc/hosts\n\n${foo:h}\n\n\nfoo=/etc/hosts\n\ndirname $foo\n\n\nbasename\n\n\n\n\n\n\n\n\n\n\nfoo=/etc/hosts\n\n${foo:t}}\n\n\nfoo=/etc/hosts\n\nbasename $foo\n\n\nextension\n\n\n\n\n\n\n\n\n\n\nfoo=index.html\n\n${foo:e}\n\n\n\n\nroot\n\n\n\n\n\n\n\n\n\n\nfoo=index.html\n\n${foo:r}\n\n\n\n\n\n\n\n\n\n\nBrace, Tilde, Command, and Pathname Expansion\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nbrace expansion: list\n\n\necho {foo,bar}\n\n\necho {foo,bar}\n\n\necho {foo,bar}\n\n\necho {foo,bar}\n\n\necho {foo,bar}\n\n\nbrace expansion: sequence\n\n\necho {1..10}\n\n\nnone\n\n\necho {1..10}\n\n\nnone\n\n\necho {1..10}\n\n\nbrace expansion: character sequence\n\n\necho {a..z}\n\n\nnone\n\n\necho {a..z}\n\n\nnone\n\n\nnone\n\n\ntilde expansion\n\n\necho ~/bin\n\n\necho ~/bin\n\n\necho ~/bin\n\n\necho ~/bin\n\n\necho ~/bin\n\n\ncommand expansion: dollar parens\n\n\necho $(ls)\n\n\necho (ls)\n\n\necho $(ls)\n\n\nnone\n\n\necho $(ls)\n\n\ncommand expansion: backticks\n\n\necho \n`ls`\n\n\nnone\n\n\necho \n`ls`\n\n\necho \n`ls`\n\n\necho \n`ls`\n\n\nprocess substitution\n\n\nwc \n(ls)\n\n\nwc (ls | psub)\n\n\nwc \n(ls)\n\n\nnone\n\n\nwc \n(ls)\n\n\npath expansion: string\n\n\necho /bin/c*\n\n\necho /bin/c*\n\n\necho /bin/c*\n\n\necho /bin/c*\n\n\necho /bin/c*\n\n\npath expansion: character\n\n\necho /bin/c??\n\n\necho /bin/c??\n\n\necho /bin/c??\n\n\necho /bin/c??\n\n\necho /bin/c??\n\n\npath expansion: character set\n\n\necho /bin/[cde]*\n\n\nnone\n\n\necho /bin/[cde]*\n\n\necho /bin/[cde]*\n\n\necho /bin/[cde]*\n\n\npath expansion: negated character set\n\n\necho /bin/[ cde]*\n\n\nnone\n\n\necho /bin/[ cde]*\n\n\necho /bin/[ cde]*\n\n\necho /bin/[ cde]*\n\n\npath expansion: sequence of characters\n\n\necho /bin/[a-f]*\n\n\nnone\n\n\necho /bin/[a-f]*\n\n\necho /bin/[a-f]*\n\n\necho /bin/[a-f]*\n\n\n\n\n\n\n\n\nSpecial Variables\n\n\n\nin zsh terminology, special means read-only variables that cannot have their type changed\n\n\n\nnon-alphabetical variables\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nname of shell or shell script\n\n\n$0\n\n\n(status -f)\n\n\n$0\n\n\n$0\n\n\n$0\n\n\ncommand line arguments\n\n\n$1, $2, \u2026\n\n\n$argv[1], $argv[2], \u2026\n\n\n$1, $2, \u2026\n\n\n$1, $2, \u2026\n\n\n$1, $2, \u2026\n\n$argv[1], $argv[2], \u2026\n\n\nnumber of command line args\n\n\n$#\n\n\n(count $argv)\n\n\n$#\n\n\n$#\n\n\n$#\n\n$#argv\n\n\narguments $1, $2, \u2026\n\n\n$*\n\n$@\n\n\nnone\n\n\n$*\n\n$@\n\n\n$*\n\n\n$*\n\n$@\n\n\n $1   $2   $3  \u2026\n\n\n $@ \n\n\n$argv\n\n\n $@ \n\n\n\n\n $@ \n\n\n $1\nc\n$2\nc\n$3 \u2026  where \nc\n is first character of $IFS\n\n\n $* \n\n\n $argv \n\n\n $* \n\n\n\n\n $* \n\n\nprocess id\n\n\n$$\n\n\n%self\n\n\n$$\n\n\n$$\n\n\n$$\n\n\nprocess id of last asynchronous command\n\n\n$!\n\n\nnone\n\n\n$!\n\n\n$!\n\n\n$!\n\n\nexit status of last non-asynchronous command\n\n\n$?\n\n\n$status\n\n\n$?\n\n\n$?\n\n\n$?\n\n\nprevious command executed\n\n\n$_\n\n\ncurrent command executing:\n\n$_\n\n\n$_\n\n\n$_\n\n\n$_\n\n\ncommand line options\n\n\n$-\n\n\nnone\n\n\n$-\n\n\nnone\n\n\n$-\n\n\nread input\n\n\nnone\n\n\nnone\n\n\nnone\n\n\n$\n\n\nnone\n\n\n\n\n\n$* and $@\n\n\n\nThese parameters behave differently in double quotes.\n\n\n\nNormally you should use  $@  to pass all the parameters to a subcommand. The subcommand will receive the same number of parameters as the caller received.\n\n\n\n $*  can be used to collect the parameters in a string. The first character of $IFS is used as the join separator. This could be used to pass all of the parameters as a single parameter to the subcommand.\n\n\n\nOutside of double quotes, $* and $@ have the same behavior. Their behavior varies from shell to shell, however. In \nbash\n if you use them to pass parameters to a subcommand, the subcommand will receive more parameters than the caller if any of the parameters contain whitespace.\n\n\n\nIn \nzsh\n $* and $@ behave like  $@ .\n\n\n\nset by shell\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nshell version\n\n\nBASH_VERSION\n\n\n\n\nKSH_VERSION\n\n\ntcsh\n\n\nZSH_VERSION\n\n\nreturn value of last syscall\n\n\n\n\n\n\n\n\n\n\nERRNO\n\n\nhistory\n\n\n\n\nhistory\n\n\n\n\n\n\n\n\ncurrent line number of script\n\n\nLINENO\n\n\n\n\nLINENO\n\n\n\n\nLINENO\n\n\nset by getopts\n\n\nOPTARG\n\nOPTIND\n\n\n\n\nOPTARG\n\nOPTIND\n\n\n\n\nOPTARG\n\nOPTIND\n\n\noperating system and machine type\n\n\n\n\n\n\n\n\n\n\nOSTYPE\n\nMACHTYPE\n\n\nshell parent pid\n\n\nPPID\n\n\n\n\nPPID\n\n\n\n\nPPID\n\n\nworking directory and previous working directory\n\n\nPWD\n\nOLDPWD\n\n\nPWD\nnone\n\n\nPWD\n\nOLDPWD\n\n\n\n\nPWD\n\nOLDPWD\n\n\nrandom integer\n\n\nRANDOM\n\n\nbuilt-in function:\n\nrandom\n\n\nRANDOM\n\n\n\n\nRANDOM\n\n\nreturn value\n\n\nREPLY\n\n\n\n\nREPLY\n\n\n\n\nREPLY\n\n\nseconds since shell was invoked\n\n\nSECONDS\n\n\n\n\nSECONDS\n\n\n\n\nSECONDS\n\n\nincremented each time a subshell is called\n\n\nSHLVL\n\n\n\n\n\n\n\n\nSHLVL\n\n\n\n\n\nread by shell\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nbrowser\n\n\n\n\nBROWSER\n\n\n\n\n\n\n\n\ncd search path\n\n\nCDPATH\n\n\nCDPATH\n\n\nCDPATH\n\n\ncdpath\n\n\nCDPATH\n\ncdpath\n\n\nterminal width and height\n\n\n\n\n\n\nCOLUMNS\n\nLINES\n\n\n\n\nCOLUMNS\n\nLINES\n\n\ncommand history editor\n\n\nFCEDIT\n\nEDITOR\n\n\n\n\nFCEDIT\n\nEDITOR\n\n\n\n\nFCEDIT\n\nEDITOR\n\n\nshell startup file\n\n\nENV\n\n\n\n\nENV\n\n\n\n\nENV\n\n\nfunction definition search path\n\n\n\n\n\n\nFPATH\n\n\n\n\nfpath\n\nFPATH\n\n\nhistory file path\n\n\nHISTFILE\n\n\n\n\nHISTFILE\n\n\n\n\nHISTFILE\n\n\nsize of history\n\n\nHISTSIZE\n\n\n\n\nHISTSIZE\n\n\n\n\nHISTSIZE\n\n\nhome directory\n\n\nHOME\n\n\nHOME\n\n\nHOME\n\n\n\n\nHOME\n\n\ninput field separators\n\n\nIFS\n\n\n\n\nIFS\n\n\n\n\nIFS\n\n\nlocale\n\n\nLANG\n\n\nLANG\n\n\n\n\n\n\nLANG\n\n\nnull redirect command\n\n\n\n\n\n\n\n\n\n\nNULLCMD\n\nREADNULLCMD\n\n\ncommand search path\n\n\nPATH\n\n\nPATH\n\n\nPATH\n\n\n\n\nPATH\n\n\nprompt customization\nmain, secondary, select, trace\n\n\nPS1 PS2 PS4\n\n\n\n\nPS1 PS2 PS3 PS4\n\n\n\n\nPS1 PS2 PS3 PS4\n\n\nright prompt customization\n\n\n\n\n\n\n\n\n\n\nRPS1 RPS2\n\n\nterminal type\n\n\nTERM\n\n\n\n\n\n\n\n\nTERM\n\n\ntimeout\n\n\n\n\n\n\nTMOUT\n\n\n\n\nTMOUT\n\n\nsystem tmp directory\n\n\n\n\n\n\nTMPDIR\n\n\n\n\n\n\nuser\n\n\n\n\nUSER\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArithmetic and Conditional Expressions\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\ntest command\n\n\n[ -e /etc ]\n\ntest -e /etc\n\n\n[ -e /etc ]\n\ntest -e /etc\n\n\n[ -e /etc ]\n\ntest -e /etc\n\n\n\n\n[ -e /etc ]\n\ntest -e /etc\n\n\ntrue command\n\n\ntrue\n\n\ntrue\n\n\ntrue\n\n\n\n\ntrue\n\n\nfalse command\n\n\nfalse\n\n\nfalse\n\n\nfalse\n\n\n\n\nfalse\n\n\nconditional command\n\n\n[[ ]]\n\n\n\n\n[[ ]]\n\n\n\n\n[[ ]]\n\n\nconditional expression\n\n\n\n\n\n\n\n\n( )\n\n\n\n\narithmetic expansion\n\n\n$(( 1 + 1 ))\n\n\nmath '1 + 1'\n\n\n$(( 1 + 1 ))\n\n\n\n\n$(( 1 + 1 ))\n\n\nfloating point expansion\n\n\nnone\n\n\nmath '1.1 + 1.1'\n\n\n$(( 1.1 + 1.1 ))\n\n\n\n\n$(( 1.1 + 1.1 ))\n\n\nlet expression\n\n\nlet  \nvar\n = \nexpr\n \n\n\n\n\nlet  \nvar\n = \nexpr\n \n\n\n\n\nlet  \nvar\n = \nexpr\n \n\n\nexternal expression\n\n\nexpr 1 + 1\n\nexpr 0 '\n' 1\n\n\nexpr 1 + 1\n\nexpr 0 '\n' 1\n\n\nexpr 1 + 1\n\nexpr 0 '\n' 1\n\n\nexpr 1 + 1\n\nexpr 0 '\n' 1\n\n\nexpr 1 + 1\n\nexpr 0 '\n' 1\n\n\narithmetic command\n\n\n(( ))\n\n\n\n\n(( ))\n\n\n\n\n(( ))\n\n\neval\n\n\nwhile true; do\nread -p '$ ' cmd\neval $cmd\n\ndone\n\n\n\n\nwhile true; do\nread cmd?'$ '\neval $cmd\n\ndone\n\n\nwhile (1)\necho -n '% '\neval $\n\nend\n\n\nwhile true; do\nread cmd ?'$ '\neval $cmd\n\ndone\n\n\n\n\n\n\n\n\n\n\nfiletest\n\n\n\n\n\n\n\nExpressions are implemented as either command expressions which return an integer status like a command, or variable expressions which evaluate to a string. Command expressions return a status of 0 for true and a nonzero status for false. Only commands and command expressions can be used as the conditional in \nif\n, \nwhile\n, and \nuntil\n statements.\n\n\n\nExpressions which support arithmetic only support integer arithmetic.\n\n\n\n\n\n[ ]\n\n\n[[ ]]\n\n\n$(( ))\n\n\n(( ))\n\n\n( )\n\n\nexpr\n\n\nmath\n\n\nname\n\n\ntest command\n\n\nconditional command\n\n\narithmetic expansion\n\n\narithmetic command\n\n\nconditional expression\n\n\nexternal expression\n\n\n\n\nused as\n\n\ncommand\n\n\ncommand\n\n\nargument\n\n\ncommand\n\n\ntcsh \nconditionals\n\n\ncommand\n\n\nfish \nexpressions\n\n\nword splitting?\n\n\nyes\n\n\nno\n\n\n\n\n\n\n\n\n\n\n\n\nexpansions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrue\n\n\nanything but\n ''\n\n\nanything but\n ''\n\n\n1\n\n\n1\n\n\n1\n\n\nanything but\n '' \nor\n 0\n\n\n\n\nfalsehoods\n\n\n''\n\n\n''\n\n\n0\n\n\n0\n\n\n0 ''\n\n\n0 ''\n\n\n\n\nlogical operators\n\n\n-a -o !\n\n\n \n||\n !\n\n\n \n||\n !\n\n\n \n||\n !\n\n\n \n||\n !\n\n\n \n|\n \nnone\n\n\n\n\nregex comparison operator\n\n\nnone\n\n\n=~\n\n\nnone\n\n\nnone\n\n\n\n\nstr\n : \nregex\n\n\n\n\nstring comparison operators\n\n\n= !=\n\n\n== !=\n\n\nnone\n\n\nnone\n\n\n== !=\n\n\n=\n \n \n= \n \n= !=\nbut comparison is numeric if operands are digits\n\n\n\n\narithmetic comparison operators\n\n\n-eq -ne -lt -gt -le -ge\n\n\n-eq -ne -lt -gt -le -ge\n\n\n== != \n \n \n= \n=\n\n\n== != \n \n \n= \n=\n\n\n== != \n \n \n= \n=\n\n\n=\n \n \n= \n \n= !=\n\n\n\n\narithmetic operators\n\n\nnone\n\n\nnone\n\n\n+ - * / % **\n\n\n+ - * / % **\n\n\n+ - * / %\n\n\n+ - * / %\n\n\n\n\ngrouping\n\n\n (  )\n\n\n\n\n2 * (3 + 4)\n\n\n\n\n\n\nuse cmd substitution, ie. for bash:\n\nexpr 2  * $(expr 3 + 4)\n\n\n\n\nassignment\n\n\nnone\n\n\nnone\n\n\n$(( n = 7 ))\n\necho $n\n\n\n(( n = 7 ))\n\necho $n\n\n\n\n\n\n\n\n\ncompound assignment\n\n\nnone\n\n\nnone\n\n\n+= -= *= /= %=\nand others\n\n\n+= -= *= /= %=\nand others\n\n\n\n\n\n\n\n\ncomma and increment\n\n\nnone\n\n\nnone\n\n\n$(( n = 7, n++ ))\n\necho $n\n\n\n(( n = 7, n++ ))\n\necho $n\n\n\n\n\n\n\n\n\nbit operators\n\n\nnone\n\n\nnone\n\n\n \n \n |   ~\n\n\n \n \n |   ~\n\n\n \n \n |   ~\n\n\n\n\n\n\nfile tests\n\n\n-e EXISTS?\n\n-d DIR?\n\n-f REGULAR_FILE?\n\n-(h|L) SYMLINK?\n\n-p NAMED_PIPE?\n\n-r READABLE?\n\n-s NOT_EMPTY?\n\n-w WRITABLE?\n\n-x EXECUTABLE?\n\n-S SOCKET?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\n\n\n\nThe name of the expression.\n\n\n\n\n\n\ntest command\n\n\n\n\n\n\nconditional command\n\n\n\n\n\n\nconditional expression\n\n\n\n\n\n\narithmetic expansion\n\n\n\n\n\n\nlet expression\n\n\n\n\n\n\nexternal expression\n\n\n\n\n\n\narithmetic command\n\n\n\nAn arithmetic command can be used to test whether an arithmetic expression is zero.\n\n\n\nSupports the same type of expressions as \n$(( ))\n.\n\n\n\n\n\n\ntrue command\n\n\n\nA no-op command with an exit status of 0. One application is to create an infinite loop:\n\n\n\n\n\nwhile true; do\n  echo  Are we there yet? \ndone\n\n\n\n\n\n\n\n\nfalse command\n\n\n\nA no-op command with an exit status of 1. One application is to comment out code:\n\n\n\n\n\nif false; then\n  start_thermonuclear_war\nfi\n\n\n\n\n\n\n\n\neval\n\n\n\nHow to evaluate a string as a shell command.\n\n\n\n\n\n\nArrays\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\ndeclare\n\n\ntypeset -a \nvar\n\n\nnone\n\n\nnone\n\n\nnone\n\n\ntypeset -a \nvar\n\n\nlist all arrays\n\n\ntypeset -a\n\n\nnone\n\n\nnone\n\n\nnone\n\n\ntypeset -a\n\n\nliteral\n\n\na=(do re mi)\n\n\nset a do re mi\n\n\na=(do re mi)\n\n\nset a = (do re mi)\n\n\na=(do re mi)\n\n\nlookup\n\n\n${a[0]}\n\n\n$a[1]\n\n\n${a[0]}\n\n\n${a[1]}\n\n\n${a[1]}\n\n$a[1]\n\n\nnegative index lookup\n\n\nreturns last element:\n\n${a[-1]}\n\n\nreturns last element:\n\n$a[-1]\n\n\nreturns last element:\n\n${a[-1]}\n\n\nnone\n\n\nreturns last element:\n\n${a[-1]}\n\n\nslice\n\n\n${a[@]:2:3}\n\n${a[*]:2:3}\n\n\n$a[(seq 2\n3)]\n\n\n${a[@]:1:2}\n\n${a[*]:1:2}\n\n\n${a[2-3]}\n\n\n$a[2,3]\n\n\nupdate\n\n\na[0]=do\n\na[1]=re\n\na[2]=mi\n\n\nset a[1] do\n\nset a[2] re\n\nset a[3] mi\n\n\na[0]=do\n\na[1]=re\n\na[2]=mi\n\n\nset a[1] = do\n\nset a[2] = re\n\nset a[3] = mi\n\n\na[1]=do\n\na[2]=re\n\na[3]=mi\n\n\nout-of-bounds behavior\n\n\nlookup returns empty string\nupdate expands array; array can have gaps\n\n\nerror message and nonzero exit status\nupdate expands array; in-between\n\nslots get empty strings\n\n\nlookup returns empty string\nupdate expands array; array can have gaps\n\n\nlookup and update both produce\n\nerror message and nonzero exit status\n\n\nlookup returns empty string\nupdate expands array; in-between\n\nslots get empty strings\n\n\nsize\n\n\nhighest index:\n\n${#a[@]}\n\n${#a[*]}\n\n\ncount $a\n\n\nhighest index:\n\n${#a[@]}\n\n${#a[*]}\n\n\n${#a}\n\n\n${#a}\n\n${#a[@]}\n\n${#a[*]}\n\n\nlist indices\n\n\ncan contain gaps:\n\n${!a[@]}\n\n${!a[*]}\n\n\n(seq (count $a))\n\n\ncan contain gaps:\n\n${!a[@]}\n\n${!a[*]}\n\n\n`seq ${#a}`\n\n\n$(seq ${#a})\n\n\nregular reference\n\n\nreturn first element\n\n\nreturn all elements joined by space\n\n\nreturn first element\n\n\nreturn all elements joined by space\n\n\nreturn all elements joined by space\n\n\nregular assignment\n\n\nassigns to 0-indexed slot\n\n\nconvert array to regular variable\n\n\nassigns to 0-indexed slot\n\n\nconvert array to regular variable\n\n\nconvert array to regular variable\n\n\ndelete element\n\n\nunset a[0]\n\n\nset -e a[1]\nre is now at index 1\n\n\n\n\n\n\na[0]=()\n\n\ndelete array\n\n\nunset a[@]\n\nunset a[*]\n\n\nset -e a\n\n\n\n\n\n\nunset -v a\n\n\npass each element as argument\n\n\ncmd\n  ${a[@]} \n\n\ncmd\n $a\n\n\ncmd\n  ${a[@]} \n\n\n\n\ncmd\n  ${a[@]} \n\n\npass as single argument\n\n\ncmd\n  ${a[*]} \n\n\ncmd\n  $a \n\n\ncmd\n  ${a[*]} \n\n\n\n\ncmd\n  ${a[*]} \n\n\n\n\n\nShell arrays are arrays of strings. In particular arrays cannot be nested.\n\n\n\nArrays with one element are for the most part indistinguishable from a variable containing a nonempty string. Empty arrays are for the most part indistinguishable from a variable containing an empty string.\n\n\n\nIn the case of \nbash\n or \nzsh\n, it is possible to tell whether the variable is an array by seeing whether it is listed in the output of \ntypeset -a\n.\n\n\n\ndeclare\n\n\n\nbash\n and \nzsh\n allow one to declare an array. This creates an empty array. There doesn't appear to be any need to do this, however,\n\n\n\nlist all arrays\n\n\n\nliteral\n\n\n\nbash\n and \nzsh\n us parens to delimit an array literal. Spaces separate the elements. If the elements themselves contain spaces, quotes or backslash escaping must be used.\n\n\n\nlookup\n\n\n\nupdate\n\n\n\nout-of-bounds behavior\n\n\n\nsize\n\n\n\nlist indices\n\n\n\nregular reference\n\n\n\nregular assignment\n\n\n\ndelete value\n\n\n\nDeleting elements from a \nbash\n array leaves gaps. Deleting elements from a \nzsh\n arrays causes higher indexed elements to move to lower index positions.\n\n\n\ndelete array\n\n\n\n\n\n\nAssociative Arrays\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\ndeclare\n\n\ntypeset -A \nvar\n\n\nnone\n\n\nnone\n\n\nnone\n\n\ntypeset -A \nvar\n\n\nlist all associative arrays\n\n\ntypeset -A\n\n\nnone\n\n\nnone\n\n\nnone\n\n\ntypeset -A\n\n\nassign value\n\n\nfoo[bar]=baz\n\n\nnone\n\n\nnone\n\n\nnone\n\n\nfoo[bar]=baz\n\n\nlookup\n\n\n${foo[bar]}\n\n\nnone\n\n\nnone\n\n\nnone\n\n\n${foo[bar]}\n\n\nlist indices\n\n\n${!foo[@]}\n\n${!foo[*]}\n\n\nnone\n\n\nnone\n\n\nnone\n\n\n\n\ndelete value\n\n\nunset  foo[bar] \n\n\nnone\n\n\nnone\n\n\nnone\n\n\nunset  foo[bar] \n\n\ndelete array\n\n\nunset  \nvar\n[@] \n\n\nnone\n\n\nnone\n\n\nnone\n\n\nunset -v foo\n\n\n\n\n\nAssociative arrays were added to \nbash\n with version 4.0.\n\n\n\n\n\n\nFunctions\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\ndefine with parens\n\n\nfoo() {\necho foo\n\n}\n\n\nnone\n\n\nfoo() {\necho foo\n\n}\n\n\nnone\n\n\nfoo() {\necho foo\n\n}\n\n\ndefine with keyword\n\n\nfunction foo {\necho foo\n\n}\n\n\nfunction foo\necho foo\n\nend\n\n\nfunction foo {\necho foo\n\n}\n\n\nnone\n\n\nfunction foo {\necho foo\n\n}\n\n\ndefine with doc string\n\n\n\n\nfunction foo -d 'echo foo'\necho foo\n\nend\n\n\n\n\n\n\n\n\nedit function definition\n\n\n\n\nfunced foo\n\n\n\n\n\n\nin .zshrc:\n\nautoload -U zed\n J when done:\n\nzed -f foo\n\n\nparameters\n\n\n$1, $2, \n\u2026\n\n\n$argv[1], $argv[2], \n\u2026\n\n\n$1, $2, \n\u2026\n\n\nnone\n\n\n$1, $2, \n\u2026\n\n\nnumber of parameters\n\n\n$#\n\n\n(count $argv)\n\n\n$#\n\n\nnone\n\n\n$#\n\n\nreturn\n\n\nfalse() {\nreturn 1\n\n}\n\n\nfunction false\nreturn 1\n\nend\n\n\nfalse() {\nreturn 1\n\n}\n\n\nnone\n\n\nfalse() {\nreturn 1\n\n}\n\n\nreturn values\n\n\n{0, \n\u2026\n, 255}\n\n\n{0, \n\u2026\n, 2\n**\n31 - 1}\nnegative values result in return value of  - \nvalues above 2**31 - 1 cause error\n\n\n{0, \n\u2026\n, 255}\n\n\nnone\n\n\n{-2\n**\n31, \n\u2026\n, 2\n**\n31 - 1}\nother integers converted to one of the above values by modular arithmetic\n\n\nlocal variables\n\n\nfoo() {\nlocal bar=7\n\n}\nvariables set without the local keyword are global\n\n\nfunction foo\nset -l bar 7\n\nend\nwithout the -l flag, the the variable will\n\nbe global if already defined, otherwise local\n\n\nnone\n\n\nnone\n\n\nfoo() {\nlocal bar=7\n\n}\nvariables set without the local keyword are global\n\n\nlist functions\n\n\ntypeset -f | grep '()'\n\n\nfunctions\n\n\n\n\nnone\n\n\ntypeset -f | grep '()'\n\n\nshow function\n\n\ntypeset -f \nfunc\n\n\nfunctions \nfunc\n\n\ntypeset -f \nfunc\n\n\n\n\ntypeset -f \nfunc\n\n\ndelete function\n\n\nunset -f \nfunc\n\n\nfunctions -e \nfunc\n\n\nunset -f \nfunc\n\n\nnone\n\n\nunset -f \nfunc\n\nunfunction \nfoo\n\n\n\n\n\n\n\n\ndefine with parens\n\n\n\nHow to define a function.\n\n\n\nPOSIX calls for parens in the declaration, but parameters are not declared inside the parens, nor are parens used when invoking the function. Functions are invoked with the same syntax used to invoke external commands. Defining a function hides a built-in or an external command with the same name, but the built-in or external command can still be invoked with the \nbuiltin\n or \ncommand\n modifiers.\n\n\n\n\n\n\ndefine with keyword\n\n\n\nHow to define a function using the \nfunction\n keyword.\n\n\n\n\n\n\ndefine function with doc string\n\n\n\n\n\n\nedit function definition\n\n\n\n\n\n\nparameters\n\n\n\nThe variables which hold the function parameters.\n\n\n\nOutside of a function the variables $1, $2, \u2026 refer to the command line arguments provided to the script.\n\n\n\n$0 always refers the name of the script in a non-interactive shell.\n\n\n\n\n\n\nnumber of parameters\n\n\n\nThe variable containing the number of function parameters which were provided.\n\n\n\nOutside of a function $# refers to the number of command line arguments.\n\n\n\n\n\n\nreturn\n\n\n\nIf a function does not have an explicit \nreturn\n statement then the return value is the exit status of the last command executed. If no command executed the return value is 0.\n\n\n\n\n\n\nreturn values\n\n\n\nShell functions can only return integers. Some shells limit the return value to a single byte. This is all the information one can get from the exit status of an external process according to the POSIX standard.\n\n\n\nIf a shell function needs to return a different type of value, it can write it to a global variable. All variables are global by default. The value in one of the parameters can be used to determine the variable to which the return value will be written. Consider this implementation of \nsetenv\n:\n\n\n\n\n\nsetenv() {\n  eval $1=$2\n}\n\n\n\n\n\n\n\n\nlocal variables\n\n\n\nHow to declare and set a local variable.\n\n\n\nLocal variables are normally defined inside a function. \nbash\n throws an error when an attempt is made to define a local outside a function, but \ndash\n and \nzsh\n do not.\n\n\n\nLocal variables have lexical, not dynamic scope. If a function recurses, locals in the caller will not be visible in the callee.\n\n\n\n\n\n\nlist functions\n\n\n\nHow to list the user defined functions.\n\n\n\ntypeset -f\n without an argument will show all function definitions.\n\n\n\nbash\n and \nzsh\n always the function definitions with the paren syntax, even if the function keyword syntax was used to define the function.\n\n\n\n\n\n\nshow function\n\n\n\nHow to show the definition of a function.\n\n\n\n\n\n\ndelete function\n\n\n\nHow to remove a user defined function.\n\n\n\n\n\n\nCommand Resolution\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nalias:\ndefine, list, remove, define suffix alias\n\n\nalias ll='ls -l'\n\nalias\n\nunalias ll\nnone\n\n\nalias ll 'ls -l'\n\nfunctions\n\nfunction -e ll\nnone\n\n\nalias ll='ls -l'\n\nalias\n\nunalias ll\nnone\n\n\nalias ll ls -l\n\nalias\n\nunalias ll\nnone\n\n\nalias ll='ls -l'\n\nalias -L\n\nunalias ll\n\nalias -s txt=cat\n\n\nbuilt-ins:\nrun, list, help, enable, disable\n\n\nbuiltin \ncmd\n\nenable -a\n\nhelp \ncmd\n\nenable \ncmd\n\nenable -n \ncmd\n\n\nbuiltin \ncmd\n\nbuilltin -n\ncmd\n \n--\nhelp\nnone\nnone\n\n\nbuiltin \ncmd\nnone\nnone\nnone\nnone\n\n\nnone\n\nbuiltins\nnone\nnone\nnone\n\n\nbuiltin \ncmd\nnone\ntype command name; then M-h\n\nenable \ncmd\n\ndisable \ncmd\n\n\nrun external command\n\n\ncommand \ncmd\n\n\ncommand \ncmd\n\n\ncommand \ncmd\n\n\n\n\ncommand \ncmd\n\n\nrun with explicit environment\n\n\nenv -i \nvar\n=\nval\n \u2026 \ncmd\n \nargs\n \u2026\n\n\nexternal command hashes:\nlist, set, delete from, clear, rebuild\n\n\nhash\nnone\n\nhash -d \ncmd\n\nhash -r\nnone\n\n\ndoes not cache command paths\n\n\nalias -t\n\nalias -t \ncmd\n=\npath\nnone\n\nalias -r\nnone\n\n\nnone\nnone\nnone\n\nrehash\nnone\n\n\nhash\n\nhash \ncmd\n=\npath\n\nunhash\n\nhash -r\n\nhash -f\n\n\ncommand type\n\n\ntype \ncmd\n\n\ntype \ncmd\n\n\ntype \ncmd\n\n\n\n\ntype \ncmd\n\n\ncommand path\n\n\ncommand -v \ncmd\n\n\n\n\nwhence \ncmd\n\n\ncommand -v \ncmd\n\nwhich \ncmd\n\n\ncommand -v \ncmd\n\nwhich \ncmd\n\nwhence \ncmd\n\n\ncommand paths\n\n\n\n\n\n\n\n\nwhere \ncmd\n\n\nwhere \ncmd\n\nwhich -a \ncmd\n\n\n\n\n\n\n\n\nalias\n\n\n\nAlias expansion is done after history expansion and before all other expansion. A command can be expanded by multiple aliases. For example the following will echo  baz :\n\n\n\n\n\nalias bar=echo  baz \nalias foo=bar\nfoo\n\n\n\n\n\nOn the other hand the shells seem smart enough about aliasing to not be put into an infinite loop. The following code causes an error  foo not found :\n\n\n\n\n\nalias foo=bar\nalias bar=foo\nfoo\n\n\n\n\n\nAlias definitions are not registered until an entire line of input is read. The following code causes an error  lshome not found :\n\n\n\n\n\nalias lshome='ls ~'; lshome\n\n\n\n\n\nUser defined functions can replace aliases in the shells which have them; i.e. all shells except \ntcsh\n.\n\n\n\nThe Korn shell has a feature called tracked aliases which are identical to the \nexternal command hashes\n of the other shells.\n\n\n\n\n\n\nbuilt-ins\n\n\n\n\n\n\nrun external command\n\n\n\nWhen resolving commands, user-defined functions take precedence over external commands. If a user-defined function is hiding an external command, the \ncommand\n modifier can be used to run the latter.\n\n\n\n\n\n\nrun with explicit environment\n\n\n\nHow to run a command with an explicit environment. \nenv -i\n clears the environment of exported variables and only provides the external command with the environment variables that are explicitly specified. If the \n-i\n option is not specified then the environment is not cleared, which in many cases is no different than if the command had been run directly without the \nenv\n command. The \nenv\n command without the \n-i\n option is used in shebang scripts to avoid hard-coding the path of the interpreter.\n\n\n\nMultiple environment variables can be set with the env command:\n\n\n\n\n\nenv -i VAR1=VAL1 VAR2=VAL2 ... CMD\n\n\n\n\n\n\n\n\nexternal command hashes\n\n\n\nExternal command hashes are a mapping from command names to paths on the file system.\n\n\n\nThe Korn Shell calls external command hashes  tracked aliasaes , and \nksh\n defines \nhash\n as an alias for \nalias -t\n.\n\n\n\n\n\n\ncommand type\n\n\n\nDetermine what type a command is. The possible types are alias, shell function, shell builtin, or a path to an external command. If the command is not found an exit status of 1 is returned.\n\n\n\n\n\n\ncommand path\n\n\n\nReturn the absolute path for an external command. For shell functions and shell builtins the name of the command is returned. For aliases the statement used to define the alias is returned. If the command is not found an exit status of 1 is returned.\n\n\n\n\n\n\ncommand paths\n\n\n\n\n\n\nArguments and Options\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nexecute command and exit\n\n\n$ bash -c 'echo foo'\n\n\n$ fish -c 'echo foo'\n\n\n$ ksh -c 'echo foo'\n\n\n$ tcsh -c 'echo foo'\n\n\n$ zsh -c 'echo foo'\n\n\nusage\n\n\n$ bash \n--\nhelp\n\n\n$ fish \n--\nhelp\n\n\n\n\n$ tcsh \n--\nhelp\n\n\n$ zsh \n--\nhelp\n\n\ninteractive shell\n\n\n$ bash -i\n\n\n$ fish -i\n\n\n$ ksh -i\n\n\n$ tcsh -i\n\n\n$ zsh -i\n\n\nlogin shell\n\n\n$ bash -l\n\n$ bash \n--\nlogin\n\n\n$ fish -l\n\n$ fish \n--\nlogin\n\n\n$ ksh -l\n\n\n$ tcsh -l\n\n\n$ zsh -l\n\n$ zsh \n--\nlogin\n\n\nmake posix compliant\n\n\n$ bash \n--\nposix\n\n\n\n\n\n\n\n\n\n\nrestricted mode\n\n\n$ bash -r\n\n$ bash \n--\nrestricted\n\n\n\n\n$ ksh -r\n\n\n\n\n$ zsh -r\n\n$ zsh \n--\nrestricted\n\n\nshow version\n\n\n$ bash \n--\nversion\n\n\n$ fish \n--\nversion\n\n\n\n\n$ tcsh \n--\nversion\n\n\n$ zsh \n--\nversion\n\n\nshift positional parameters:\nby one, by n\n\n\nshift\n\nshift \nn\n\n\n\n\nshift\n\nshift \nn\n\n\nshift\nnone\n\n\nshift\n\nshift \nn\n\n\nset positional parameters\n\n\nset \n--\n \narg \u2026\n\n\n\n\nset \n--\n \narg \u2026\n\n\n\n\nset \n--\n \narg \u2026\n\n\ngetopts\n\n\ngetopts \nopts\n \nvar\n\n\n\n\ngetopts \nopts\n \nvar\n\n\n\n\ngetopts \nopts\n \nvar\n\n\n\n\n\noptions can be set by the script using\n \nset\n. Also \nset -o\n (bash) and pipefail.\n\n\n\n\n\n\nexecute command and exit\n\n\n\nShell executes a single command which is provided on the command line and then exits.\n\n\n\n\n\n\nusage\n\n\n\nShell provides list of options and exits.\n\n\n\n\n\n\ninteractive shell\n\n\n\nAn interactive shell is one that is not provided a script when invoked as an argument or is not invoked with the \n-c\n option. The \n-i\n option makes a script interactive regardless. Typically an interactive shell gets its input from and sends its output to a terminal. An interactive shell ignores SIGTERM and will handle but not exit when receiving a SIGINT. Interactive shells display a prompt and enable job control. In an interactive shell the octothorpe # causes a syntax error, unlike in non-interactive shells where it is treated as the start of a comment.\n\n\n\n\n\n\nlogin shell\n\n\n\nA login shell is a special type of interactive shell. It executes different startup files and will also execute any logout files. When it exits it sends a SIGHUP to all jobs. (is this true?) A login shell ignores the \nsuspend\n built-in.\n\n\n\n\n\n\nmake posix compliant\n\n\n\nChange the behavior of the shell to be more POSIX compliant.\n\n\n\n\n\n\nrestricted mode\n\n\n\nShell runs in restricted mode.\n\n\n\n\n\n\nshow version\n\n\n\nShow version and exit.\n\n\n\n\n\n\nshift positional parameters\n\n\n\nOutside of a function \nshift\n operates on the command line arguments. Inside a function \nshift\n operates on the function arguments.\n\n\n\n\n\n\nset positional parameters\n\n\n\nHow to set the positional parameters from within a script.\n\n\n\n\n\n\ngetopts\n\n\n\nHow to process command line options.\n\n\n\ngetopts\n operates on the positional parameters $1, $2, \u2026\n\n\n\nThe first argument to \ngetopts\n is a word specifying the options. The options are single characters which cannot be ':' or '?'. The colon ':' indicates that the preceding letter is an option which takes an argument. If an option is encountered which is not in the option word, \ngetopts\n sets the variable to '?'.\n\n\n\n\n\nwhile getopts a:b:c:def OPT\ndo\n    case $OPT in\n        a) OPTA=$OPTARG ;;\n        b) OPTB=$OPTARG ;;\n        c) OPTC=$OPTARG ;;\n        d) OPTD=1 ;;\n        e) OPTE=1 ;;\n        f) OPTF=1 ;;\n    esac\ndone\n\n\n\n\n\n\n\n\nExecution Control\n\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nnegate exit status\n\n\n! \ncmd\n\n\nnot \ncmd\n\n\n! \ncmd\n\n\n\n\n! \ncmd\n\n\nno-op command\n\n\n:\n\n\n\n\n:\n\n\n:\n\n\n:\n\n\nbreak\n\n\nbreak\n\n\nbreak\n\n\nbreak\n\n\nbreak\n\n\nbreak\n\n\ncase\n\n\ncase \narg\n in\npattern\n) \ncmd\n;;\n\u2026\n\n*) \ncmd\n;;\n\nesac\n\n\nswitch \narg\ncase \npattern \u2026\ncmd\n\u2026\n\u2026\ncase '*'\ncmd\n\u2026\n\nend\n\n\ncase \narg\n in\npattern\n) \ncmd\n;;\n\u2026\n\n*) \ncmd\n;;\n\nesac\n\n\nswitch (\narg\n)\n\ncase \npattern\n:\ncmd\n\u2026\nbreaksw\n\u2026\n\ndefault:\ncmd\n\u2026\nbreaksw\n\nendsw\n\n\ncase \narg\n in\npattern\n) \ncmd\n;;\n\u2026\n\n*) \ncmd\n;;\n\nesac\n\n\ncontinue\n\n\ncontinue\n\n\ncontinue\n\n\ncontinue\n\n\ncontinue\n\n\ncontinue\n\n\nfor\n\n\nfor \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\nfor \nvar\n in \narg \u2026\ncmd\n\u2026\n\nend\n\n\nfor \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\nforeach \nvar\n (\narg \u2026\n)\ncmd\n\u2026\n\nend\n\n\nfor \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\ngoto\n\n\n\n\n\n\n\n\ngoto \nlabel\n\n\n\n\nif\n\n\nif \ntest\n\nthen\ncmd\n\u2026\n\nelif \ntest\n\nthen\ncmd\n\u2026\n\nelse\ncmd\n\u2026\n\nfi\n\n\nif \ntest\ncmd\n\u2026\n\nelse if \ntest\ncmd\n\u2026\n\nelse\ncmd\n\u2026\n\nend\n\n\nif \ntest\n\nthen\ncmd\n\u2026\n\nelif \ntest\n\nthen\ncmd\n\u2026\n\nelse\ncmd\n\u2026\n\nfi\n\n\nif (\nexpr\n) then\ncmd\n\u2026\n\nelse if (\nexpr\n) then\ncmd\n\u2026\n\nelse\ncmd\n\u2026\n\nendif\n\n\nif \ntest\n\nthen\ncmd\n\u2026\n\nelif \ntest\n\nthen\ncmd\n\u2026\n\nelse\ncmd\n\u2026\n\nfi\n\n\nrepeat\n\n\n\n\n\n\n\n\nrepeat \ncount\n \ncmd\n\n\nrepeat \ncount\n do\ncmd\n\u2026\n\ndone\n\n\nselect\n\n\nselect \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\n\n\nselect \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\n\n\nselect \nvar\n in \narg \u2026\n\ndo\ncmd\n\u2026\n\ndone\n\n\nuntil\n\n\nuntil \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\n\n\nuntil \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\n\n\nuntil \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\nwhile\n\n\nwhile \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\nwhile \ntest\ncmd\n\u2026\n\nend\n\n\nwhile \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\nwhile (\nexpr\n)\ncmd\n\u2026\n\nend\n\n\nwhile \ntest\n\ndo\ncmd\n\u2026\n\ndone\n\n\n\n\n\n\n\n\nnegate exit status\n\n\n\nHow to run a command and logically negate the exit status. This can be useful if the command is run as the conditional of a \nif\n statement.\n\n\n\nThe \n!\n precommand modifier converts a zero exit status to 1 and a nonzero exit status to 0.\n\n\n\nThe \n!\n must be separated from the command by whitespace, or it will be interpreted by the shell as a history substitution.\n\n\n\n\n\n\nno-op command\n\n\n\n\n\n\nbreak\n\n\n\nExits the enclosing for, select, until, or while loop.\n\n\n\n\n\n\ncase\n\n\n\nThe syntax for a switch statement.\n\n\n\nDefault clauses, which are indicated by the * pattern in most shells, are optional.\n\n\n\n\n\n\ncontinue\n\n\n\nGo to the next iteration of the enclosing for, select, until, or while loop.\n\n\n\n\n\n\nfor\n\n\n\nA loop for iterating over a list of arguments.\n\n\n\nzsh\n has alternate syntax which uses parens instead of the \nin\n keyword:\n\n\n\n\n\nfor VAR (ARG ...)\ndo\n  CMD\n  ...\ndone\n\n\n\n\n\n\n\n\ngoto\n\n\n\ntcsh\n supports the \ngoto\n statement. The target the first line containing just the \nlabel\n followed by a colon. Here's an example:\n\n\n\n\n\n#/bin/tcsh\ngoto foo\necho  goto doesn't work! \nexit -1\nfoo:\necho  goto works \n\n\n\n\n\n\n\n\nif\n\n\n\nThe if statement.\n\n\n\nThe \ntest\n which is the argument of \nif\n or \nelif\n can be any simple command, pipeline, or list of commands. The \ntest\n executes and if the exit status is zero the corresponding clause is also executed.\n\n\n\nOften the \ntest\n which is the argument of \nif\n or \nelif\n will be one of the test operators: \ntest\n, \n[ ]\n, \n[[ ]]\n, or \n(( ))\n.\n\n\n\nThe \nelif\n and \nelse\n clauses are optional.\n\n\n\ntcsh:\n\n\n\nThe argument of \nif\n and \nelif\n clauses must be an expression inside parens. Unlike the other shells it cannot be an arbitrary command. One can think of expressions as being built-in to the \ntcsh\n shell language rather than being delegated to specialized (albeit built-in) commands such as \ntest\n and \n[ ]\n.\n\n\n\nNote that the \nthen\n keyword must be on the same line as the conditional expression. This is different from the POSIX syntax where the \nthen\n keyword is separated from the test command by a newline or semicolon.\n\n\n\nThe \nelse if\n and \nelse\n clauses are optional.\n\n\n\ntcsh\n has the following syntax for conditionally executing a single command:\n\n\n\n\n\nif (EXPR) CMD\n\n\n\n\n\n\n\nrepeat\n\n\nHere are a couple of ways to do something 10 times if you aren't using \ntcsh\n. Neither technique is POSIX compliant, however:\n\n\n\n\nfor i in \nseq 1 10\n; do echo  la ; done\n\n\nfor i in {1..10}; do echo  la ; done\n\n\n\n\n\n\nselect\n\n\nThe select statement creates a numbered menu inside an infinite loop. Each time the user selects one of the numbers the corresponding command is executed. The user can use  D or EOF to exit the loop.\n\n\nOn each iteration \nvar\n is set to the value corresponding to the number the user chose. The \nbreak\n keyword can be used to give the user a numbered option for exiting the loop.\n\n\n\n\nuntil\n\n\nThe remarks above on \nif\n conditions also apply to the until loop condition.\n\n\n\n\nwhile\n\n\nThe remarks above on \nif\n conditions also apply to the while loop condition.\n\n\n\n\nRedirection\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nstdin from file\n\n\ntr a-z A-Z \n \nfile\n\n\ntr a-z A-Z \n \nfile\n\n\ntr a-z A-Z \n \nfile\n\n\ntr a-z A-Z \n \nfile\n\n\ntr a-z A-Z \n \nfile\n\n\nstdout to file\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nstderr to file\n\n\nls /not_a_file 2\n \nfile\n\n\ns /not_a_file 2\n \nfile\n\n\nls /not_a_file 2\n \nfile\n\n\nnone\n\n\nls /not_a_file 2\n \nfile\n\n\nstdout and stderr to file\n\n\nls \n \nfile\n 2\n1\n\n\nls \n \nfile\n 2\n1\n\n\nls \n \nfile\n 2\n1\n\n\nls \n \nfile\n\n\nls \n \nfile\n 2\n1\n\n\nappend stdout to file\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nls \n \nfile\n\n\nappend stderr to file\n\n\nls 2\n \nfile\n\n\nls 2\n \nfile\n\n\nls 2\n \nfile\n\n\nnone\n\n\nls 2\n \nfile\n\n\nappend stdout and stderr to file\n\n\nls \n /tmp/bash.out 2\n1\n\n\nls \n /tmp/bash.out 2\n1\n\n\nls \n /tmp/bash.out 2\n1\n\n\nls \n \nfile\n\n\nls \n /tmp/zsh.out 2\n1\n\n\nstdout to pipe\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nls | wc\n\n\nsdout and stderr to pipe\n\n\nls 2\n1 | wc\n\n\nls 2\n1 | wc\n\n\nls 2\n1 | wc\n\n\nls |\n wc\n\n\nls 2\n1 | wc\n\n\nstdin from here-document\n\n\nwc \n EOF\n\ndo\n\nre\n\nmi\n\nEOF\n\n\nnone\n\n\nwc \n EOF\n\ndo\n\nre\n\nmi\n\nEOF\n\n\nwc \n EOF\n\ndo\n\nre\n\nmi\n\nEOF\n\n\nwc \n EOF\n\ndo\n\nre\n\nmi\n\nEOF\n\n\nstdin from here-string\n\n\nwc \n  do re mi \n\n\nnone\n\n\nwc \n  do re mi \n\n\nnone\n\n\nwc \n  do re mi \n\n\ntee stdout\n\n\nls | tee \nfile\n | wc\n\n\nls \n \nfile\n | wc\n\n\nstdout to two files\n\n\nls | tee \nfile1\n | tee \nfile2\n \n /dev/null\n\n\nls \n \nfile1\n \n \nfile2\n\n\nturn on noclobber\n\n\nset -o noclobber\n\n\n\n\nset -o noclobber\n\n\nset noclobber\n\n\nset -o noclobber\n\n\nclobber file anyways\n\n\nls \n! /tmp/exists.txt\n\n\n\n\nls \n! /tmp/exists.txt\n\n\nls \n! /tmp/exists.txt\n\n\nls \n! /tmp/exists.txt\n\n\nturn off noclobber\n\n\nset +o noclobber\n\n\n\n\nset +o noclobber\n\n\nunset noclobber\n\n\nset +o noclobber\n\n\nA gap in the above chart is how to redirect just stderr to a pipe. One would guess by analogy with \n2\n and \n2\n that this might work:\n\n\n\n\n$ ls 2| wc\n\n\n\n\nHowever, none of the shells support it. The correct syntax is:\n\n\n\n\n$ ls 3\n1 1\n2 2\n3 | wc\n\n\n\n\nThe \n3\n1\n is equivalent to the C system call \ndup2(1, 3)\n. This makes file descriptor 3 a copy of file descriptor 1.\n\n\nThe \n1\n2\n is equivalent to the C system call \ndup2(2, 1)\n. This changes what file descriptor 1 writes to, but does not change what file descriptor 3 writes to, even though file descriptor 3 was initially a copy of file descriptor 1. The shell processes the redirect statements from left to right. Also note that the \n1\n could be omitted: \n1\n2\n and \n2\n are the same.\n\n\nzsh\n only supports file descriptors 0 through 9, but \nbash\n supports higher numbered file descriptors. The shell always opens file descriptors 0, 1, and 2, commonly called \nstdin\n, \nstdout\n, and \nstderr\n, for each simple command that it invokes. If additional file descriptors are specified, those are also passed to the command. For example, if \nfoo\n were invoked as:\n\n\n\n\n$ foo 3\n /tmp/bar.txt\n\n\n\n\nthen it could contain a system call which writes to file descriptor 3 without opening it first, e.g.\n\n\n\n\nwrite(3, msg, strlen(msg));\n\n\n\n\nPaths in the \n/dev\n directory can be used in place of \n1\n, \n2\n, \u2026\n\n\n\n\n$ ls 3\n /dev/fd/1 1\n /dev/fd/2 2\n /dev/fd/3 | wc\n\n\n$ ls 3\n /dev/stdout 1\n /dev/stderr 2\n3 | wc\n\n\n\n\ntcsh:\n\n\nIt is possible to redirect stdout and stderr to different files:\n\n\n\n\n$ ( ls \n /tmp/stdout.txt ) \n /tmp/stderr.txt\n\n\n\n\n\n\nEcho and Read\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\necho\nwith newline, without newline\n\n\necho \narg \u2026\n\necho -n \narg \u2026\n\n\necho \narg \u2026\n\necho -n \narg \u2026\n\n\necho \narg \u2026\n\necho -n \narg \u2026\n\n\necho \narg \u2026\n\necho -n \narg \u2026\n\n\necho \narg \u2026\n\necho -n \narg \u2026\n\n\nprintf\n\n\nprintf \nfmt arg \u2026\n\n\nprintf \nfmt arg \u2026\n\n\nprintf \nfmt arg \u2026\n\n\nprintf \nfmt arg \u2026\n\n\nprintf \nfmt arg \u2026\n\n\nread\nread values separated by\n IFS\n; with prompt; without backslash escape\n\n\nread \nvar \u2026\n\nread -p \nstr\n \nvar\n\nread -r \nvar \u2026\n\n\nread \nvar \u2026\n\nread -p 'echo \nstr\n' \nvar\n\n\nread \nvar \u2026\n\nread \nvar\n?\nstr\n\nread -r \nvar \u2026\n\n\necho -n \nstr\n\nset \nvar\n=$\n\n\nread \nvar \u2026\n\nread \nvar\n ?\nstr\n\nread -r \nvar \u2026\n\n\n\n\necho\n\n\nHow to echo the arguments separated by spaces and followed by a newline; how to suppress the trailing newline.\n\n\nThe POSIX standard says that \necho\n should not have any options. It also says, perhaps contradicting itself, that if the first argument is \n-n\n then the behavior is implementation dependent.\n\n\nThe POSIX standard also says that if any of the arguments contain backslashes, then the behavior is implementation dependent. Historically implementations have used the \n-E\n and \n-e\n options to enable or disable the interpretation of C-style backslash escape sequences.\n\n\nfish\n provides an \n-s\n option for printing the arguments without spaces in-between.\n\n\nBecause if the ill-defined behavior of \necho\n, POSIX-compliant scripts use \nprintf\n instead.\n\n\n\n\nprintf\n\n\nprintf\n is an external command line tool, though \nzsh\n also has a built-in version.\n\n\nman 3 printf\n\n\nLike its counterpart from the C standard library, \nprintf\n does not write a newline to stdout unless one is specified in the format using a backslash escape sequence.\n\n\nUnfortunately, the supported backslash ecscapes are system dependent, though some of them are mandated by POSIX:\n\n\n\n\nposix\n\n\nbsd\n\n\ngnu\n\n\nbackslash escapes\n\n\n a  b  c  f  n  r  t  v  \n\n \no\n  \noo\n  \nooo\n\n\n a  b  c  f  n  r  t  v    '\n\n \no\n  \noo\n  \nooo\n\n\n a  b  c  e  f  n  r  t  v     \n\n \no\n  \noo\n  \nooo\n  x\nhh\n  u\nhhhh\n  U\nhhhhhhhh\n\n\nAn interesting backslash escape is  c, which causes the rest of the format to be ignored.\n\n\nIn a printf format, format specifiers are of the form \n%d\n, \n%f\n and \n%s\n.\n\n\n\n\nposix\n\n\nbsd\n\n\ngnu\n\n\nformat specifiers\n\n\n\n\ndiouxX\n\nfFaAeEgG\n\ncsb\n\n\ndiouxX\n\nfeEgG\n\ncsb\n\n\nformat specifiers; many of which are useless in this context because of fewer types\n\n\nhow invalid arguments are handled\n\n\n%%\n\n\nextra specifiers with floats\n\n\nextra specifiers with strings\n\n\n\n\nread\n\n\nHow to read a line of input into one or more variables.\n\n\nWhen multiple variables are specified the value of \nIFS\n which by default contains the whitespace characters is used to split the input. If there are fewer variables than split values, then the last variable will contain a concatenation of the remaining values with their original separators. If there are fewer values then the extra variables are set to the empty string.\n\n\nbash\n and \ndash\n use the \n-p\n option to set a prompt. \nksh\n and \nzsh\n use a ?\nstr\n suffix appended to the first variable to set the prompt.\n\n\nfish\n uses the \n-p\n option, but it evaluates the string to produce the prompt. This makes it possible to set the color of the prompt:\n\n\n\n\nread -p 'set_color green; echo -n  \n  ; set_color normal' foo\n\n\n\n\nThe user can put a backslash in front of a newline to split the input up over multiple lines. The backslash and newline are stripped from the input. The user can put backslash into the variable by entering two backslashes. The \n-r\n option disables this feature, allowing the user to enter literal backslashes with a single keystroke.\n\n\ntcsh\n gets input from the user by reading from the special variable \n$\n. Backslashes are always interpreted literally.\n\n\n\n\nFiles and Directories\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nchange current directory\nchange dir, to home dir, to previous dir, show physical dir, no symlink dir\n\n\ncd \ndir\n\ncd\n\ncd -\n\ncd -P \ndir\nnone\n\n\ncd \ndir\n\ncd\n\ncd -\nnone\nnone\n\n\ncd \ndir\n\ncd\n\ncd -\n\ncd -P \ndir\nnone\n\n\ncd \ndir\n\ncd\n\ncd -\nnone\nnone\n\n\ncd \ndir\n\ncd\n\ncd -\n\ncd -P \ndir\n\ncd -s \ndir\n\n\ndirectory stack:\npush, pop, list\n\n\npushd \ndir\n\npopd\n\ndirs\n\n\npushd \ndir\n\npopd\n\ndirs\n\n\n\n\npushd \ndir\n\npopd\n\ndirs\n\n\npushd \ndir\n\npopd\n\ndirs\n\n\nprint current directory\n\n\npwd\n\n\npwd\n\n\npwd\n\n\npwd\n\n\npwd\n\n\nsource\n\n\nsource \nfile\n \narg \u2026\n\n. \nfile\n \narg \u2026\n\n\nsource \nfile\n\n. \nfile\n\n\nsource \nfile\n \narg \u2026\n\n. \nfile\n \narg \u2026\n\n\nsource \nfile\n \narg \u2026\n\n\nsource \nfile\n \narg \u2026\n\n. \nfile\n \narg \u2026\n\n\numask\nset umask in octal, in symbolic chmod format; show umask in octal, in symbolic chmod format\n\n\numask 022\n\numask g-w,o-w\n\numask\n\numask -S\n\n\numask 022\n\numask g-w,o-w\n\numask\n\numask -S\n\n\numask 022\n\numask g-w,o-w\n\numask\n\numask -S\n\n\numask 022\nnone\n\numask\nnone\n\n\numask 022\n\numask g-w,o-w\n\numask\n\numask -S\n\n\n\n\nchange current directory\n\n\nChange the current directory to the specified directory. If the directory starts with a slash '/' then it is taken to be an absolute path. If it does not it is treated as a relative path and CDPATH is used as a colon separated list of starting directories. By default CDPATH is empty in which case the current directory '.' is used as a starting point. See also the section on \ntilde expansion\n.\n\n\nIf there is no argument then the current directory is changed to $HOME.\n\n\nIf the argument is a hyphen '-' then the current directory is changed to $OLDPWD which is the most recent former current directory.\n\n\nWhen the \n-P\n option is used, \nPWD\n will be set to the physical path of the current directory; i.e. any symbolic links will be resolved. If the current directory is being displayed in the prompt this will also be set the physical path.\n\n\nzsh:\n\n\nWhen the \n-s\n option is used, attempting to change directory into a path containing symlinks will fail.\n\n\n\n\ndirectory stack\n\n\nPush a directory provided as an argument onto the directory stack. The directory becomes the current directory.\n\n\nPop a directory off the directory stack. The popped directory becomes the current directory.\n\n\nList the directory stack.\n\n\n\n\nprint current directory\n\n\nShow the current directory. The same as executing:\n\n\n\n\necho $PWD\n\n\n\n\n\n\nsource\n\n\nThe \nsource\n built-in executes the commands in another file using the current shell process and environment.\n\n\nSome shells have a non-POSIX feature which allows arguments to be passed to the file being sourced; i.e. the following invocation would set \n$1\n, \n$2\n, and \n$3\n to \nbar\n, \nbaz\n, and \nquux\n while executing \nfoo.sh\n:\n\n\n\n\nsource foo.sh bar baz quux\n\n\n\n\nThe \n.\n syntax is part of the POSIX standard, but the \nsource\n syntax is not.\n\n\nThe file to be sourced may be specified with an absolute path. Some shells will also search the working directory or \nPATH\n for the file to be sourced:\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nsearches working directory\n\n\nyes\n\n\nyes\n\n\nno\n\n\nyes\n\n\n. no, source yes\n\n\nsearches PATH\n\n\nyes\n\n\nno\n\n\nno\n\n\nno\n\n\nyes\n\n\n\n\numask\n\n\nSet the shell file mode creation mask. \numask\n is a POSIX syscall.\n\n\nThe mask consists of 3 octal digits which apply to the user, group, and other permissions respectively. Each octal digit contains 3 bits of information. In order of most to least significant the bits apply to the read, write, and execute permissions.\n\n\nSetting a bit in the mask guarantees that the corresponding bit in the file permissions will not be set when a file is created. The logic for computing the file permissions can be expressed with the following shell code:\n\n\n\n\nmask=8#022\nperms=8#777\n\n\nprintf  0%o n  $(( $perms \n ~ $mask ))\n\n\n\n\nHere is the same logic in C code:\n\n\n\n\nunsigned int mask = 0022;\nunsigned int perms = 0777;\n\n\nprintf( %o n , perms \n ~mask);\n\n\n\n\nIf \numask\n is given a numeric argument it is always interpreted as octal; a leading zero is not required.\n\n\numask\n also supports the symbolic notation used by \nchmod\n. In this case the argument is one or more 3 character sequences of the format \n[agou][-+][rwx]\n separated by commas.\n\n\n\n\nProcess and Job Control\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nrun job in background\n\n\nbg\n\n\nbg\n\n\nbg\n\n\nbg\n\n\nbg\n\n\nprotect job from hangup signal\n\n\ndisown\n\n\ndoes not SIGHUP background jobs on exit\n\n\ndisown\n\n\n\n\ndisown\n\n\nexecute file\n\n\nexec [-c]\n\n\nexec\n\n\nexec\n\n\nexec\n\n\nexec\n\n\nexit\n\n\nexit [n]\n\n\nexit\n\n\nexit\n\n\nexit\n\n\nexit\n\nbye\n\n\nrun job in foreground\n\n\nfg\n\n\nfg\n\n\nfg\n\n\nfg\n\n\nfg\n\n\n\n\n\n\n\n\n\n\nhup\n\n\n\n\nlist jobs\n\n\njobs [-lnprs]\n\n\njobs\n\n\njobs\n\n\njobs\n\n\njobs\n\n\nsend signal\n\n\nkill\n\n\nexternal, but \u2026\n\nkill\n\n\nkill\n\n\nkill\n\n\nkill\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nlimit\n\n\n\n\n\n\n\n\n\n\nlogin\n\n\n\n\n\n\nlogout\n\n\n\n\n\n\nlogout\n\n\nlogout\n\n\n\n\n\n\n\n\n\n\nnice\n\n\n\n\n\n\n\n\n\n\n\n\nnohup\n\n\n\n\n\n\n\n\n\n\n\n\nonintr\n\n\n\n\n\n\n\n\n\n\n\n\nsched\n\n\nsched\n\n\n\n\n\n\n\n\nsleep\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstop\n\n\n\n\n\n\nsuspend\n\n\n\n\nsuspend\n\n\nsuspend\n\n\nsuspend\n\n\n\n\n\n\n\n\ntime\n\n\ntime\n\n\ntime\n\n\n\n\ntimes\n\n\n\n\ntimes\n\n\n\n\ntimes\n\n\n\n\ntrap\n\n\ntrap\n\n\ntrap\n\n\n\n\ntrap\n\n\n\n\nulimit\n\n\n\n\nulimit\n\n\n\n\nulimit\n\n\n\n\n\n\nulimit\n\n\n\n\nunlimit\n\n\nunlimit\n\n\n\n\nwait\n\n\n\n\nwait\n\n\nwait\n\n\nwait\n\n\n\n\n_\n_\n_\n\n\n_\n_\n_\n\n\n_\n_\n_\n\n\n_\n_\n_\n\n\n_\n_\n_\n_\n\n\nxargs\n splits standard input on spaces and newlines and feeds the arguments to argument of \nxargs\n which is executed as a command. The input delimiter can be changed to null characters with the -0 flag (useful with \nfind -print0\n) or to the value of the -d flag argument.\n\n\nBy default if the length of the input is more than 4096 characters the input will be broken up and the command run multiple times. This number can be increased with the -s flag up to system configuration variable ARG_MAX. It is also possible to call the command multiple times feeding it a prescribed number of arguments each time using the -n flag. The -t flag will write to standard error the command that is being invoked and its arguments before each invocation.\n\n\nThe -P flag can be used to for parallelization. The argument is the max number of simultaneous processes.\n\n\n\n\nrun job in background\n\n\n\n\nprotect job from hangup signal\n\n\n\n\nexecute file\n\n\n\n\nHistory\n\n\nhistory commands\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\ncommand history:\nlist recent, list all, list with time, unnumbered list\n\n\nfc -l\n\nhistory\nset\n HISTTIMEFORMAT\n\nfc -ln\n\n\nhistory | nl | head\n\nhistory | nl\n\ncat ~/.config/fish/fish_history\n\nhistory\n\n\n??\n\nfc -l 1\nnone\n??\n\n\nhistory 15\n\nhistory\n\nhistory -T\nnone\n\n\nhistory\n\nhistory 1\n\nhistory -f\n\nhistory -n\n\n\ncommand history:\nrun, find and run\n\n\n!\nnum\n\nfc -s \nstr\n\n\n\n\nr \nnum\n\nfc -s\n\n\nnone\nnone\n\n\n!\nnum\n??\n\n\ncommand history:\ndelete from history, clear history\n\n\nhistory -d \nnum\n\nhistory -c\n\n\n\n\nnone\nnone\n\n\nnone\n\nhistory -c\n\n\nnone\nnone\n\n\ncommand history:\nfix, find and substitute\n\n\nfc \nnum\n\nfc -s \nold\n=\nnew\n \nstr\n\n\n\n\nfc \nnum\n\nfc -s \nold\n=\nnew\n \nstr\n\n\n\n\nfc \nnum\nnone\n\n\ncommand history:\nwrite to file, append to file, read from file\n\n\nhistory -w \npath\n\nhistory -a \npath\n\nhistory -r \npath\n\n\n\n\n\n\n\n\nfc -W \npath\n\nfc -A \npath\n\nfc -R \npath\n\n\n\n\ncommand history: listing\n\n\nHow to list recent commands; how to list all commands; how to list commands with the time they were run.\n\n\n\n\ncommand history: running\n\n\nHow to run a command in the history by command number; how to run the most recent command in the history matching a prefix.\n\n\n\n\ncommand history: deleting\n\n\nHow to delete a command from the history by command number; how to clear the command history.\n\n\n\n\ncommand history: fixing\n\n\nUse the following syntax to edit commands from the history list and run them:\n\n\n\n\nfc [-e EDIT_CMD] [-r] [FIRST [LAST]]\n\n\n\n\nIf EDIT_CMD is not specified, the value in the FCEDIT or EDITOR environment variable is used.\n\n\nIf FIRST and LAST are specified, these indicate the numbers of the range of commands to edit. If FIRST is specified but LAST is not, only that command at that number is edited and run. If neither is specified the last command is edited and run.\n\n\nThe -r flag reverses the order of the commands.\n\n\nTo simply list commands the following flags can be used:\n\n\n\n\nfc -l[r] [FROM]\nfc -l[r] -NUMBER_CMDS\n\n\n\n\nIf neither FROM nor -NUMBER_CMDS is specified the last 16 commands is printed. Use -NUMBER_CMDS (i.e. a negative number) to list the last NUMBER_CMDS commands. Use FROM (i.e. a positive number) to list all commands from FROM on.\n\n\nThe -r flag reverses the order of the commands\n\n\nTo rerun a recent command without editing it use:\n\n\n\n\nfc -s [PAT=REP] [START_OF_CMD]\n\n\n\n\nIf START_OF_CMD is specified the last command that starts with START_OF_CMD will be run. If START_OF_CMD is not specified the last command will be run.\n\n\nIf PAT=REP is specified then each occurrence of PAT will be replaced with REP in the command before it is run.\n\n\nksh:\n\n\nhist\n is a synonym for \nfc\n with the sole difference that HISTEDIT is the environment variable that determines the editor instead of FCEDIT.\n\n\nzsh:\n\n\nr\n is an alias for \nfc -s\n\n\n\n\ncommand history file\n\n\nhistory expansion\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nmost recent command\n\n\n!!\n\n\nnone\n\n\nnone\n\n\n!!\n\n\n!!\n\n\nn-th command\n\n\n!\nn\n\n\nnone\n\n\nnone\n\n\n!\nn\n\n\n!\nn\n\n\nmost recent command starting with str\n\n\n!\nstr\n\n\nnone\n\n\nnone\n\n\n!\nstr\n\n\n!\nstr\n\n\nmost recent command with substitution\n\n\n \npattern\n \nreplacement\n\n\nnone\n\n\nnone\n\n\n \npattern\n \nreplacement\n\n\n \npattern\n \nreplacement\n\n\nnth command with substitution\n\n\n!\nn\n:s/\npattern\n/\nreplacement\n/\n\n\nnone\n\n\nnone\n\n\n!\nn\n:s/\npattern\n/\nreplacement\n/\n\n\n!\nn\n:s/\npattern\n/\nreplacement\n/\n\n\nn-th command with global substitution\n\n\n!\nn\n:gs/\npattern\n/\nreplacement\n/\n\n\nnone\n\n\nnone\n\n\n!\nn\n:gs/\npattern\n/\nreplacement\n/\n\n\n!\nn\n:gs/\npattern\n/\nreplacement\n/\n\n\nmost recent arguments\n\n\n!\n\n\nnone\n\n\nnone\n\n\n\n\n!\n\n\nfirst of most recent arguments\n\n\n!:1\n\n\nnone\n\n\nnone\n\n\n\n\n!:1\n\n\nrange of most recent arguments\n\n\n!:\nn\n-\nm\n\n\nnone\n\n\nnone\n\n\n\n\n!:\nn\n-\nm\n\n\nlast of most recent arguments\n\n\n!$\n\n\nnone\n\n\nnone\n\n\n\n\n!$\n\n\nmost recent command without arguments\n\n\n!:0\n\n\nnone\n\n\nnone\n\n\n\n\n!:0\n\n\nm-th argument of n-th command\n\n\n!\nn\n:\nm\n\n\nnone\n\n\nnone\n\n\n\n\n!\nn\n:\nm\n\n\nhistory file\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nlocation\n\n\nHISTFILE=~/.bash_history\n\n\n~/.config/fish/fish_history\n\n\nHISTFILE=~/.ksh_history\n\n\nset histfile ~/.tcsh_history\n\n\nHISTFILE=~/.zsh_history\n\n\nmemory size\n\n\nHISTSIZE=2000\n\n\n\n\nHISTSIZE=2000\n\n\n\n\nHISTSIZE=2000\n\n\nfile size\n\n\nHISTFILESIZE=2000\n\n\n\n\n\n\nset savehist=2000\n\n\nSAVEHIST=2000\n\n\nformat\n\n\nlines of input\n\n\n\n\n\n\n\n\n\n\ntimestamps\n\n\nHISTTIMEFORMAT=%s\n\n\n\n\n\n\n\n\nupdate time\n\n\non exit\n\n\n\n\n\n\n\n\non exit\n\n\nupdate method\n\n\nappends to file;\n\nto only keep most recent dupe:\n\nHISTCONTROL=erasedups\n\n\n\n\n\n\nappends to file;\n\nto sort in memory file and most recent by timestamp and only keep the most recent, use:\n\nset savehist=2000 merge\n\n\n\n\nignore\n\n\nHISTIGNORE=history:whoami\n\n\n\n\n\n\n\n\n\n\n\n\nKey Bindings\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nlist keybindings\n\n\nbind -P\n\n\nbind\n\n\n\n\nbindkey\n\n\nbindkey\n\n\nlist keymaps\n\n\nhelp bind\n\n\nnone\n\n\n\n\nnone\n\n\nbindkey -l\n\n\ncurrent keymap name\n\n\nbind -V | grep keymap\n\n\nnone\n\n\n\n\nnone\n\n\n\n\nchange keymap\n\n\nbind 'set keymap emacs'\n\n\nnone\n\n\n\n\nnone\n\n\nbindkey -A emacs main\n\n\nlist bindable functions\n\n\nbind -l\n\n\nbind -f\n\n\n\n\nbindkey -l\n\n\n\n\nbind key to function\n\n\nbind C-a:beginning-of-line\n\n\nbind  ca beginning-of-line\n\n\n\n\n\n\n\n\nrestore default binding for key\n\n\n\n\n\n\n\n\n\n\n\n\nbash and zsh have keymaps\n\n\nhow to create a new keymap with zsh\n\n\nalternate fish syntax referring to keys\n\n\n\n\nStartup Files\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nnon-interactive shell startup files\n\n\n$BASH_ENV\n\n\n~/.config/fish/config.fish\n\n\n$ENV\n\n\n/etc/csh.cshrc\n\n~/.tcshrc\n\n~/.cshrc\n\n\n/etc/zshenv\n\n$ZDOTDIR/.zshenv\n\n\nlogin shell startup files\n\n\n/etc/profile\n\n~/.bash_profile\n\n~/.bash_login\n\n~/.profile\n\n\n~/.config/fish/config.fish\n\n\n/etc/profile\n\n~/.profile\n\n$ENV\n\n\n/etc/csh.login\n\n~/.login\n\n\nnon-interactive startup files\n\n/etc/zprofile\n\n$ZDOTDIR/.zprofile\n\n/etc/zshrc\n\n$ZDOTDIR/.zshrc\n\n/etc/zlogin\n\n$ZDOTDIR/.zlogin\n\n\nother interactive shell startup files\n\n\n~/.bashrc\n\n\n~/.config/fish/config.fish\n\n\n$ENV\n\n\nnone\n\n\nnon-interactive startup files\n\n/etc/zshrc\n\n$ZDOTDIR/.zshrc\n\n\nlogin shell logout files\n\n\n~/.bash_logout\n\n\nnone\n\n\nnone\n\n\n/etc/csh.logout\n\n~/.logout\n\n\n$ZDOTDIR/.zlogout\n\n/etc/zlogout\n\n\nbash:\n\n\nWhen logging in \nbash\n will only execute one of \n~/.bash_profile\n, \n~/.bash_login\n, or \n~/.profile\n. It executes the first file that exists.\n\n\nfish:\n\n\nThe startup file \n.config/fish/config.fish\n is run by all shells. Here is how to put code in it which only executes at login:\n\n\n\n\nif status --is-login\n  set PATH $PATH ~/bin\nend\n\n\n\n\nHow to define an exit handler:\n\n\n\n\nfunction on_exit --on-process %self\n  echo fish is exiting ...\nend\n\n\n\n\n\n\nPrompt Customization\n\n\n\n\nbash\n\n\nfish\n\n\nksh\n\n\ntcsh\n\n\nzsh\n\n\nset primary prompt\n\n\nPS1='$ '\n\n\nfunction fish_prompt\necho -n '$ '\n\nend\n\n\nPS1='$ '\n\n\nset prompt='$ '\n\n\nPS1='$ '\n\n\nset continued line prompt\n\n\nPS2='\n '\n\n\nnone\n\n\nPS2='\n '\n\n\nset prompt2='\n '\n\n\nPS2='\n '\n\n\nset select prompt\n\n\nPS3='? '\n\n\nnone\n\n\nPS='? '\n\n\nnone\n\n\nPS3='? '\n\n\nset right prompt\n\n\nnone\n\n\nfunction fish_right_prompt\ndate\n\nend\n\n\n\n\nset rprompt='%Y-%W-%D %p'\n\n\nRPS1='%D{%F %T}'\n\n\nset right continued line prompt\n\n\nnone\n\n\nnone\n\n\n\n\nnone\n\n\nRSP2='\n...\n'\n\n\ndynamic information\n\n\nworking directory\n\n\nnone\n\n\npwd\n\n\n\n\n%/\n\n\n%d\n\n%/\n\n\nworking directory with tilde abbrev\n\n\n w\n\n\nabbreviate path components other\n\nthan basename with single letter:\n\nprompt_pwd\n\n\n\n\n%~\n\n\n%~\n\n\ntrailing components of working directory\n\n\n\n\n\n\n\n\n%3C\n\n\n%3d\n\n\ncommand number in history\n\n\n!\n\n\n\n\n!\n\n\n!\n\n%!\n\n%h\n\n\n%!\n\n%h\n\n\ncommand number in session\n\n\n#\n\n\n\n\n\n\n\n\n\n\nshell version\n\n\n v\n\n\n\n\n\n\n\n\n\n\nshell level\n\n\n$SHLVL\n\n\n\n\n\n\n\n\n\n\nenvironment variable\n\n\n$\nvar\n\n\necho -n $\nvar\n\n\n$\nvar\n\n\n%$\nvar\n\n\n$\nvar\n\n\ncommand substitution\n\n\n$(\ncmd\n)\n\n\n\n\n$(\ncmd\n)\n\n\n\n\n$(\ncmd\n)\n\n\nhost name\n\n\n h\n\n H\n\n\n\n\n\n\n\n\n%m\n\n%M\n\n\nuser\n\n\n u\n\n\n\n\n\n\n%n\n\n\n%n\n\n\nnumber of jobs\n\n\n j\n\n\n\n\n\n\n%j\n\n\n%j\n\n\ntty\n\n\n\n\n\n\n\n\n\n\n%y\n\n\nlast command exit status\n\n\n\n\n\n\n\n\n%?\n\n\n%?\n\n\nconditional expression\n\n\n\n\n\n\n\n\n\n\n\n\nshell privilege indicator\n\n\n\n\n\n\n\n\n\n\n%#\n\n\ncontinued line info\n\n\n\n\n\n\n\n\n\n\n\n\ndate and time\n\n\n D{\nstrftime_format\n}\n\n\n\n\n\n\n\n\n%D{\nstrftime_format\n}\n\n\ntext effects and escapes\n\n\nescapes\n\n\n  [ ]\n\n\n\n\n\n\n%% %{ %}\n\n\n%% %{ %}\n\n\nbold\n\n\n\n\n\n\n\n\n%B %b\n\n\n%B %b\n\n\nunderline\n\n\n\n\n\n\n\n\n%U %u\n\n\n%U %u\n\n\nstandout\n\n\n\n\n\n\n\n\n%S %s\n\n\n%S %s\n\n\nforeground color\n\n\n\n\n\n\n\n\n\n\n%F{red} %f\n\n\nbackground color\n\n\n\n\n\n\n\n\n\n\n%K{green} %k\n\n\nMost shells permit a user to customize the prompt by setting an environment variable. \nfish\n requires that the user define a callback function.\n\n\nThe \nprimary prompt\n is the prompt the user sees the most often.\n\n\nThe \ncontinued line prompt\n is used when the user types an incomplete command. This can happen when there are open parens, braces, or quote in the command, or the user backslash escaped the newline.\n\n\nThe \nselect prompt\n is used to prompt the user to make a multiple choice selection. It corresponds to the select \nexecution control statement\n.\n\n\nThe \nright prompt\n appears at the far right side of the input line. If the user types enough input to need the space, the right prompt disappears.\n\n\n\n\ndynamic information\n\n\nbash\n, \ntcsh\n, and \nzsh\n provide a set of special character sequences for putting dynamic information in the prompt. In the case of \nbash\n the sequences start with a backslash and in the case of \ntcsh\n and \nzsh\n a percent sign.\n\n\nbash\n, \nksh\n, \ntcsh\n, and \nzsh\n will also perform variable expansion on anything that starts with a dollar sign and looks like a variable before each display of the prompt. \nbash\n, \nksh\n, and \nzsh\n will also perform command substitution before each display of the prompt when they encounter the \n$( )\n syntax in the prompt.\n\n\n\n\ntext effects and escapes\n\n\n\n\nAutoload\n\n\nfish:\n\n\nzsh:\n\n\n\n\nbash\n (1989)\n\n\nbash\n\n\nThe Bourne Again shell is a GNU replacement for the Bourne shell. It can run almost all Bourne scripts and POSIX compliant scripts, and operating systems often use \nbash\n as \n/bin/sh\n. Because \nbash\n has many extensions it is not a good shell to use for determining POSIX compliance.\n\n\n\n\ncsh\n (1978)\n\n\ncsh\n\n\nThe C shell was written by Bill Joy and released as part of the second Berkeley Standard Distribution.\n\n\nIt introduced features that were widely adopted by other shells: history expansion, aliases, tilde notation, and job control.\n\n\nThe C shell was so named because it looked more like C than the Bourne shell. It still used keywords to mark off blocks instead of curly braces, but its expressions were delimited by parens instead of square brackets and relational operators such as \n and \n= could be used instead of -lt and -le. The Unix community nevertheless eventually chose a derivation of the Bourne shell as the standard scripting language and writing scripts for the C shell \nis not recommended\n.\n\n\nThe classic Macintosh operating system had a development environment called The Mac Programmer's Workbench. It included a shell that was derived from the C shell.\n\n\n\n\ndash\n (2002)\n\n\ndash\n\n\nThe Debian Almquist shell, \ndash\n, was originally a Linux port of the NetBSD Almquist shell, \nash\n. It is POSIX compliant. It is also smaller than the other shells: on Ubuntu Linux the executable is about 100k whereas the other shells are in the 300k-900k range.\n\n\ndash\n does not keep a command history or offer command line editing. It does have job control, though.\n\n\n\n\nfish\n (2005)\n\n\nFish user documentation\n\n\n\n\nksh\n (1983)\n\n\nksh\n\n\nThe Korn shell added history and job control but otherwise stayed consistent with the Bourne shell. The POSIX standard for the shell was based on the Korn shell.\n\n\nThe Korn shell was proprietary software until 2000, which is why clones such as \npdksh\n were written. Also, \nzsh\n can be used to emulate \nksh\n; both Mac OS X and Ubuntu link \nksh\n to \nzsh\n.\n\n\n\n\nrc\n (1989)\n\n\nThe \nrc\n shell was released as part of 10th Edition Unix. It was also the Plan 9 shell.\n\n\n\n\nsh\n\n\nPOSIX 2008\n\n\nA succession of shells have been installed at \n/bin/sh\n which are known today by the engineers who implemented them: the Thompson shell, the Mashey shell, and the Bourne shell.\n\n\nThe Bourne shell appeared in 1977. It introduced the execution control structures that are used in most of the modern Unix shells. These control structures, with their distinctive reversed words for marking the end of blocks: \nfi\n and \nesac\n, were borrowed from Algol 68. However, where Algol 68 uses \nod\n the Bourne shell uses \ndone\n. This was because a Unix command named \nod\n already existed. The Bourne shell also introduced arbitrary length variable names; the Mashey shell by contrast was limited to single letter variable names.\n\n\nWhatever is installed at \n/bin/sh\n should probably be \nPOSIX compliant\n. Mac OS X uses \nbash\n, which changes its behavior somewhat and operates in POSIX mode when invoked as \nsh\n. One can also get this behavior by invoking \nbash\n with the \n--\nposix\n flag.\n\n\nUbuntu makes \n/bin/sh\n a symlink to \n/bin/dash\n.\n\n\n\n\ntcsh\n (1981)\n\n\ntcsh\n\n\nThe TENEX C shell, \ntcsh\n, was upgraded version of the C Shell which added tab completion, a feature originally used in the TENEX operating system.\n\n\ntcsh\n is backwardly compatible with \ncsh\n and on many systems \ncsh\n is simply a symlink to \ntcsh\n.\n\n\ntcsh\n is the default shell on FreeBSD and it was the default shell on Mac OS X until version 10.3 was introduced in 2003.\n\n\nWriting scripts in \ntcsh\n is not recommended for the same reasons writing scripts in \ncsh\n \nis not recommended\n.\n\n\nThe following \ntcsh\n built-ins interact with the terminal settings:\n\n\nechotc\n\n\nsettc\n\n\nsetty\n\n\ntelltc\n\n\ntermname\n\n\n\n\nzsh\n (1990)\n\n\nThe Z shell, \nzsh\n, is documented by multiple man pages:\n\n\nman page\n\n\ntopics covered\n\n\nzshall\n\n\nall topics in one man page\n\n\nzsh\n\n\nstartup files\n\n\nzshoptions\n\n\noptions\n\n\nzshbuiltins\n\n\nbuilt-ins\n\n\nzshcompwid\n, \nzshcompsys\n\n\ntab completion\n\n\nzshcompctl\n\n\nold tab completion system\n\n\nzshexp\n\n\nhistory expansion; parameter expansion; process, tilde, command, and pathname expansion\n\n\nzshmisc\n\n\ngrammar; keywords; quoting; redirection; arithmetic and conditional expressions; prompt customization\n\n\nzshparam\n\n\nspecial variables\n\n\nzshzle\n\n\nreadline\n\n\nzsh\n has these builtins for managing the completion module:\n\n\ncomparguments\n\n\ncompcall\n\n\ncompctl\n\n\ncompdescribe\n\n\ncompfiles\n\n\ncompgroups\n\n\ncompquote\n\n\ncomptags\n\n\ncomptry\n\n\ncompvalues\n\n\nThe following \nzsh\n built-ins interact with the terminal settings:\n\n\nechotc\n\n\nechoti\n\n\ngetcap\n\n\nttyctl\n\n\nSpecial \nzsh\n builtins:\n\n\nautoload\n\n\nzcompile\n\n\nzformat\n\n\nzmodload\n\n\nzparseopts\n\n\nzstyle\n\n\n\n        \n\n      \n\n      \n\n        \nissue tracker\n |\n        content of this page licensed under\n        \n\n        creative commons attribution-sharealike 3.0", 
            "title": "Shell_compare"
        }, 
        {
            "loc": "/shell/perl/index.html", 
            "tags": "", 
            "text": "perl\n\n\nperl manpage\n  \n\n\n\n\n[perl tutorial](http://linuxconfig.org/perl-programming-tutorial)\n\n1. Using The Perl interpreter\n1.1. Find Perl Interpreter\nwhich perl \nFind Perl Interpreter\n\n1.2. Implicit Execution\nNOTE:Every script starts with shebang:\n#!\n which is not read as a comment. First line is also a place where you put your interpreter which in this case is perl.\n\n#!/usr/bin/perl print \nPerl Programming n\n; \nMake Perl Script Executable:\n\nchmod +x perl_script.pl \nperl implicit execution\n\n1.3. Explicit Execution\nprint \nPerl Programming n\n; \nMake Perl Script Executable:\n\nchmod +x perl_script.pl \nPerl Explicit Execution\n\n2. Simple Perl script\n#!/usr/bin/perl # print \nPerl Programming Tutorial n\n; \nSimple perl script example\n\n3. Current path to Perl modules\nList all available current paths to perl modules:\n\nperl -e 'print \n@INC\n . \n n\n;' \nCurrent path to Perl modules\n\n4. Variables\n$ - Scalar Variable\n% - Hash Variable\n@ - Array\n\n - Subroutines\n\n4.1. Using Perl default variable $_\n#!/usr/bin/perl\n$_ = \nPerl Programming default variable. n\n;\nprint; \nPerl default variable $_\n\n4.2. Defined Function\n#!/usr/bin/perl\n\n# declare perl scalar do but not define value\n$perl_scalar;\n#we can use conditional operator '?:' to test perl defined funtion\n$variable = defined($perl_scalar) ? \nVariable  $perl_scalar is Defined!\n\n : \nVariable  $perl_scalar is NOT Defined!\n;\nprint $variable.\n n\n;\n# declare perl scalar with value\n$perl_scalar=\nperl\n;\n$variable = defined($perl_scalar) ? \nVariable  $perl_scalar is Defined!\n \n: \nVariable  $perl_scalar is NOT Defined!\n;\nprint $variable.\n n\n; \nPerl Defined Function\n\n4.3. Scalar variable\n#!/usr/bin/perl\n#Scalars hold just single data type: string, number or perl reference\n#Scalars definition in Perl\n$scalar_number = -5; \n$scalar_string1 = \nIn PERL Scalars are always referenced with  x24 in front of each variable name. \n;\n$scalar_string2 = \n5 items\n;\n#Undescore can be use for big numbers \n$scalar_milion = 1_000_000;\n#Print scalar values\nprint $scalar_number.\n n\n;\nprint $scalar_string1.\n n\n;\nprint $scalar_string2.\n n\n;\nprint $scalar_milion.\n n\n;\n#perl scalar addition\nprint $scalar_number + $scalar_milion.\n n\n; \nPerl Scalar variable example\n\n4.3.1. Single-Quoted Strings\n#!/usr/bin/perl\n\n#Single-Quoted scalar strings\n$scalar_string1='perl';\nprint \nString 1: \n.$scalar_string1.\n n\n;\n$scalar_string2='#!/usr/bin/perl';\nprint \nString 2: \n.$scalar_string2.\n n\n;\n$scalar_string3='Perl\nProgramming\nTutorial';\nprint \nString 3: \n.$scalar_string3.\n n\n;\n$scalar_string4='Perl n';\nprint \nString 4: \n.$scalar_string4.\n n\n;\n$scalar_string5=' ' '  ';\nprint \nString 5: \n.$scalar_string5.\n n\n;\n$scalar_string6='';\nprint \nString 6: \n.$scalar_string6.\n n\n;\n$scalar_string7='I 'm reading Perl Programming Tutorial';\nprint \nString 7: \n.$scalar_string7.\n n\n; \nSingle-Quoted Strings in perl\n\n4.3.2. Double-Quoted Strings\n#!/usr/bin/perl\n#Double-Quoted scalar strings\n$scalar_string1=\nperl\n;\nprint \nString 1: \n.$scalar_string1.\n n\n;\n$scalar_string2=\n#!/usr/bin/perl\n;\nprint \nString 2: \n.$scalar_string2.\n n\n;\n$scalar_string3=\nPerl\nProgramming\nTutorial\n;\nprint \nString 3: \n.$scalar_string3.\n n\n;\n$scalar_string4=\nPerl n\n;\nprint \nString 4: \n.$scalar_string4.\n n\n;\n$scalar_string5=\n ' '   \n;\nprint \nString 5: \n.$scalar_string5.\n n\n;\n$scalar_string6=\n;\nprint \nString 6: \n.$scalar_string6.\n n\n;\n# add \n!\n ASCII character in octal form !=041\n$scalar_string7=\nI 'm reading Perl Programming Tutorial  041\n;\nprint \nString 7: \n.$scalar_string7.\n n\n;\n# add \n@\n ASCII character in hexadecimal form @=40\n$scalar_string8=\nAny feedback about this  uperl  uprogramming\n  ututorial to: web x40 lL LINUXCONFIG.ORG E\n;\nprint \nString 8: \n.$scalar_string8.\n n\n; \nDouble-Quoted Strings in Perl\n\n4.3.3. String Operators\n#!/usr/bin/perl\n\n#Scalar string Operators\n$scalar_string1=\npe\n.\nrl\n;\nprint \nString 1: \n.$scalar_string1.\n n\n;\n$scalar_string2=\nPerl Programming Tutorial \n x (1+1);\nprint \nString 2: \n.$scalar_string2.\n n\n;\n$scalar_string3=\n3\n.\n ttabs\n x 3;\nprint \nString 3: \n.$scalar_string3.\n n\n;\n$scalar_string4=\nPerl x20\n.'Programming '.\nTutorial\n;\nprint \nString 4: \n.$scalar_string4.\n n\n;\n$scalar_string5=9x5;\nprint \nString 5: \n.$scalar_string5.\n n\n; \nPerl String Operators\n\n4.3.4. Non-Decimal Integers\n#!/usr/bin/perl\n\n#perl binary integer\n$hash_binary_integer = 0b10000;\n#perl octal integer\n$hash_octal_integer = 020;\n#perl hexadecimal integer\n$hash_hexadecimal_integer1 = 0x10;\n$hash_hexadecimal_integer2 = 0x124c_78_aa;\n\nprint $hash_octal_integer.\n n\n;\nprint $hash_binary_integer.\n n\n;\nprint $hash_hexadecimal_integer1.\n n\n;\nprint $hash_hexadecimal_integer2.\n n\n; \nNon-Decimal Integers\n\n4.3.5. Scalar Constant Variable\n#!/usr/bin/perl\n\n$ordinary_scalar = 5;\n$ordinary_scalar = 10; \n\nprint $ordinary_scalar.\n n\n;\n\n#perl constant declaration\n*SCALAR_CONSTANT = 5;\n$SCALAR_CONSTANT = 10; \nPerl Scalar Constant Variable\n\n4.3.6. String And Numeric comparison Operators\nComparison  String  Numeric\nEqual   eq  ==\nNot Equal   ne  !=\nLess than   lt  \n\nGreater than    gt  \n\nLess than or equal  le  \n=\nGreater than or equal   ge  \n=\n#!/usr/bin/perl\n# String comparison\nif ( 'Perl' eq 'perl' ) {\nprint \nTRUE n\n;\n} else {\nprint \nFALSE n\n;\n}\n\n# Numeric comparison\nif ( '2.4' != '2.6' ) {\nprint \nTRUE n\n;\n} else {\nprint \nFALSE n\n;\n} \nString And Numeric comparison Operators\n\n4.4. Lists\n#!/usr/bin/perl\n\n#Lists definition in Perl\nprint (\nPerl \n,\nprogramming \n,\nTutorial\n,\n n\n); \nPerl Lists\n\n4.5. Arrays\n4.5.1. Create and print array\n#!/usr/bin/perl\n\n#CREATE AN ARRAY\n@perl_array1 = qw(Perl Programming Tutorial );\n@perl_array2 = (\nPerl \n, \nPrograming \n, \nTutorial\n, \n n\n);\n@perl_array3 = (1 .. 3);\n$perl_array4[0] = \nPerl \n;\n$perl_array4[1] = \nProgramming \n;\n$perl_array4[2] = \nTutorial\n;\n$perl_array4[50] = \n n\n;\n\n#ADD ELEMENTS TO AN ARRAY\n$perl_array1[3] = \n n\n;\n\n#PRINT ARRAY\nprint @perl_array1;\nprint @perl_array2;\nprint @perl_array3;\nprint $perl_array1[3];\nprint @perl_array4;\n# What index has a last element of an array\nprint \nLast element of perl_array4 has index: \n .  $#perl_array4 .\n n\n; \nCreate and print perl array\n\n4.5.2. Push and Pop Arrays\n#!/usr/bin/perl\n\n# CREATE AN ARRAY\n@perl_array = (1 .. 3);\n\n# PUSH NEW ELEMENT TO THE AND OF AN ARRAY\npush(@perl_array, \n n\n);\n\n# PRINT ARRAY\nprint  @perl_array;\n\n# POP LAST ELEMENT FROM AN ARRAY\n$perl_scalar = pop(@perl_array);\nprint  @perl_array;\n\n# PRINT NEW LINE\nprint $perl_scalar; \nPush and Pop Arrays in Perl\n\n4.5.3. Determine The Length of an Array\n#!/usr/bin/perl\n\n#CREATE AN ARRAY\n@perl_array = (1 .. 3);\n$number_of_elements = @perl_array;\nprint \n @perl_array has: \n . $number_of_elements  . \n elements. n\n;\nprint \n @perl_array has: \n . scalar(@perl_array)  . \n elements. n\n; \nDetermine The Length of an Array in Perl\n\n4.5.4. Merge and Append Arrrays\n#!/usr/bin/perl\n\n#CREATE AN ARRAY\n\n@perl_array1 = (\n. n\n, \neasy\n, \nvery \n) ;\n@perl_array2 = (\nis \n, \nProgramming \n, \nPerl \n);\n@perl_array3 = (@perl_array1, @perl_array2);\n# REVERSING ELEMENTS \nprint reverse @perl_array3; \nMerge and Append Arrrays in Perl\n\n4.5.5. Sort Arrays\n#!/usr/bin/perl\n\n#CREATE AN ARRAY\n\n@perl_array = (3, 4, 1, 2);\n@sorted_array1 = sort @perl_array;\n@sorted_array2 = sort {$b \n=\n $a} @perl_array;\n\nprint \n@sorted_array1  n\n;\nprint \n@sorted_array2  n\n; \nSort Arrays in Perl\n\n4.5.6. Delete Element from an Array\n#!/usr/bin/perl\n\n#CREATE AN ARRAY\n@perl_array = (1, 2, 3, 4);\n# CHECK IF THE ARRAY ELEMENT EXISTS\nif (exists($perl_array[2])) {\n    delete $perl_array[2];\n} else {\n    print \nArray element is mising! n\n\n}\nprint @perl_array, \n n\n; \nDelete Element from an Array in Perl\n\n4.6. Hash\n4.6.1. Create Hash\n#!/usr/bin/perl\n\n# CREATE HASH\n%perl_hash = ( \n    browser =\n iceweasel,\n# you can also use comma instead of arrow operator\n    os , linux,\n);\n# PRINT HASH ELEMENT\nprint \n$perl_hash{'browser'} n\n; \nCreate Hash in Perl\n\n4.6.2. Add Element to a Hash\n#!/usr/bin/perl\n\n# CREATE HASH\n%perl_hash = ( \n    browser =\n iceweasel,\n# you can also use comma instead of arrow operator\n    os , linux,\n);\n# PRINT HASH ELEMENT\nprint \n$perl_hash{'browser'} n\n;\n\n# ADD ELEMENTS TO A HASH\n%perl_hash = (%perl_hash, programming, perl);\n\n# PRINT ALL ELEMENTS\nprint join(\n \n, %perl_hash). \n n\n; \nAdd Element to a Hash\n\n4.6.3. Print Hash\n#!/usr/bin/perl\n\n# CREATE HASH\n%perl_hash = qw( \n    ssh 22\n    http 80\n    https 443\n    telnet 23\n    postgres 5432\n);\n\nwhile (($hash_key, $hash_value) = each %perl_hash ){\n    print \n$hash_key uses port $hash_value n\n;\n} \nPrint Hash in Perl\n\n4.6.4. Merging Hashes\n#!/usr/bin/perl\n\n# CREATE HASH\n%perl_hash1 = qw( \n    Debian deb\n);\n%perl_hash2 = qw( \n    RedHat rpm\n);\n#MERGE HASHES\n%perl_hash3 = (%perl_hash1, %perl_hash2);\n\nwhile (($hash_key, $hash_value) = each %perl_hash3 ){\n    print \n$hash_key: $hash_value n\n;\n} \nMerging Hashes in perl\n\n5. Perl Regular Expressions\n5.1. Regular Expressions and Special Characters\n D  Matches non-digit character  d  Matches digit character  E  End case modification\n e  escape   f  Form feed    L  Matches lowercase until  E found\n l  Next character lower case    n  New line     r  Return\n S  Match a non-white space character    s  Match a white space character    t  Match tab\n U  Match upper case until  E found  u  Next character uppercase     W  Match non-word\n w  Match word   Q  Quote pattern metacharacter until  E found\n5.2. Match Characters\n#!/usr/bin/perl \n\nforeach(@ARGV) {\n# Regex Match lower case and upper case character \np\n ( ignores alphabetic case )\n    if (m/p/i) {$p1++;}\n# Regex Match lower case character \np\n only\n    if (m/p/) {$p2++;}\n# Regex Match two characters \nex\n and ignore alphabetic case\n    if (m/ex/i) {$ex++;}\n}\nprint \np1=$p1 np2=$p2 nex=$ex n\n; \nPerl Regular Expressions - Character Match\n\n5.3. Substitution\nSample File: perl_regex.txt\n\n# Perl Regular Expressions #\n# Character Substitute # \n#!/usr/bin/perl\n\nopen (FILEHANDLE, $ARGV[0]) || die \nProblems opening file\n;\n\n@file=;\n\nforeach(@file) {\n# Substitute \n#\n with \n$\n and work globally for each instance found\n# NOTE: all metcharacters needs to bu escaped with \n \n like in \n# this case \n$\n is escaped \n $\n to be read literally\n# Meta characters are:   | {  [ ( )   $ * + ? .\n    s/ #/ $/g;\n# Substitute upper case \nE\n with lower case \ne\n\n    s/E/e/;\n# Substitute first match of \n \n with \n_\n\n    s/ s/ _/;\n# Substitute first match of \n \n with \n \n\n# Note: Is your choice which substitute form you use s/// or s||| \n    s| s|  |;\n    print;\n} \nPerl Regular Expressions - Substitution\n\n5.3.1. Substitution with evaluation\nIn case a string is to be substituted with the output of a function call - rather than static text we can use the evaluation modifier (/e) which evaluates the right hand side as code, rather than a string.\n\n#!/usr/bin/perl\n\nmy $text_eval = my $text_noeval = \nHere is some texxxt. n\n;\n$text_noeval =~ s/(xx+)/'(x '.length($1).')'/;\nprint \nText without evaluation:\n.$text_noeval.\n n\n;\n$text_eval =~ s/(xx+)/'(x '.length($1).')'/e;\nprint \nText with evaluation:\n.$text_eval.\n n\n; \nlinuxconfig.org:~$ ./subst_eval.pl\nText without evaluation:Here is some te'(x '.length(xxx).')'t.\n\nText with evaluation:Here is some te(x 3)t. \n5.4. Translation\n#!/usr/bin/perl\n\n$string=\nuSe REgular Expression claSSes TO tRanslatE FroM upPEr case tO lOwER caSe chArActErs\n;\n# Use perl to convert string characters from upper case to lower case\n$string =~ tr/A-Z/a-z/;\nprint \n$string n\n;\n# Use perl to convert string characters from lower case to upper case\n$string =~ tr/a-z/A-Z/;\nprint \n$string n\n; \nPerl Translation Convert Character Case\n\n5.5. Classes\nA regular expression surrounded in square brackets is called a character class which matches any single character described by the regular expression.\n\n#!/usr/bin/perl \nforeach(@ARGV) {\n# Substitute all characters \nexcept  \n upper case characters and character \ne\n with \n#\n  \n    s/[ A-Ze]/ #/g; print;\n}\nprint \n n\n; \nPerl Regular Expressions - Classes\n\n5.6. Quantifiers\n#!/usr/bin/perl\n\n@array1 = @ARGV;\n@array2 = @ARGV;\n\nprint \n @array1 = \n;\nforeach(@array1) {\n# Substitute at least 3 \ns\n characters\n    s/s{3,}/SS/g;   print;\n} \nprint \n n @array2 = \n;\nforeach(@array2) {\n# Substitute one or more \ns\n characters\n    s/s+/S/g;   print;\n}\nprint \n n\n; \nPerl Regular Expressions - Quantifiers\n\n5.7. Assertion\n#!/usr/bin/perl \n\nforeach(@ARGV) {\n# Substitute character \na\n and the end of the string with \n$\n\n    s/a$/ $/g;\n# Substitute character \na\n and the beginning of the string with \n \n\n    s/ a/  /g;  \n    print;\n} \nprint \n n\n; \nPerl Regular Expressions - Assertion\n\n5.8. Multiple Match\n#!/usr/bin/perl\n# /g match globally\n$text=\nWe want to improve your Perl Regular Expressions skills.\n;\nprint \nNumber of Substitutions made: \n . ($text =~ s/e/E/);\nprint \n n$text n\n;\n\n$text=\nWe want to improve your Perl Regular Expressions skills.\n;\nprint \nNumber of Substitutions made: \n . ($text =~ s/e/E/g);\nprint \n n$text n\n; \nMultiple Match with regular Expressions\n\n5.9. Regular Expression Extention\n(?=)    Matches If would match next\n(?!)    Matches If would NOT match next\n(?\n=)   Matches If would match just before\n(?) Matches If would NOT match just before\n(?#)    = Comment\n#!/usr/bin/perl\n\n$_=\nWe want you to improve your Perl Regular Expressions skills.\n;\n# Replace space with \n#\n if it is followed by \nto\n\ns/ s(?=to)/#/g;\nprint \n$_ n\n;\n# Replace space with \n_\n if it is NOT followed by \ns\n\ns/ s(?!s)/_/g;\nprint \n$_ n\n; \nRegular Expression Extention\n\n5.10. Grouping\n#!/usr/bin/perl \n\n$a=$ARGV[0]; \n\nif ($a =~ /(.*)@(.*) .(.*)/) { \nprint \n$1 n$2 n$3 n\n; \n} \nPerl Regular Expressions - Grouping\n\n6. Perl Subroutines\n6.1. Create Simple Perl Subroutine\n#!/usr/bin/perl\n# Lets create subroutine which we can use to check for presence of number in the string.\n# Name of the subroutine is numbers_in_string\nsub numbers_in_string\n{\n    if ($mystring =~ /[0-9]/) {\n        print \nSupplied string contains numbers! n\n;\n    } else {\n        print \nSupplied string does NOT contain numbers! n\n;\n    }\n }\n# declare global scope variable which means that this variable can be accessed from anywhere in this code.\n$mystring=\nnumber one\n;\n# perl subroutine calls\nnumbers_in_string;\n$mystring=\nnumber 1\n;\n# perl subroutine calls\nnumbers_in_string;\nnumbers_in_string($mystring); \nExample of simple perl subroutine\n\n6.2. Pass and Return Values\n#!/usr/bin/perl\n\nsub perl_addition {\n# all variable passed to the perl subroutines are stored in special @_ variable\n    ($number1, $number2) = @_;\n# return the result\nreturn  $number1 + $number2 ;\n}\n # print result by calling perl_addition() subroutine\nprint \nNumber1 + Number2 = \n . perl_addition(4, 2) . \n n\n; \npassing and returning values to and from perl subroutines\n\n7. Perl operators\n7.1. Precedence of Perl operators\nOperators   Associativity\nParentheses and List operators  left\n-\n  left\n++ --   n/a\n**  Right\n! ~   unary+ unary- left\n=~ !~   left\n* / % x left\n+ - .   left\n\n \n   left\nNamed unary operators and file test operators   n/a\n\n \n \n+ \n+ lt gt le ge   n/a\n== != \n=\n eq ne cmp n/a\n\n   left\n|   left\n\n  left\n||  left\n.. ...  n/a\n?:  right\n=+= -+ *=   right\n, =\n    left\nRightward List operators    n/a\nnot right\nand left\nor xor  left\n#!/usr/bin/perl\n\nprint 1 + 2 * 3 + 4 . \n n\n;\nprint ((1 + 2) * (3 + 4));\nprint \n n\n;\n# Print as a function or operator\nprint ((5 + 5 ) * 5); print \n n\n;\nprint (5 + 5 ) * 5; print \n n\n;\n# Use unary + operator to tell perl\n# that we are not making print() function call\n# but rather using parentheses as a precedence\nprint +(5 + 5 ) * 5; print \n n\n; \nPrecedence of Perl operators\n\n7.2. Arrow operator\n#!/usr/bin/perl\n\n$perl_hash{browser} = iceweasel;\n$perl_hash_reference=  %perl_hash;\nprint $perl_hash_reference-\n{browser} . \n n\n; \nArrow operator in perl\n\n7.3. Increment and Decrement operators\n#!/usr/bin/perl\n\n$perl_scalar1 = 1;\n$perl_scalar2 = 2;\n$perl_scalar3 = 'p';\n$perl_scalar4 = 'PERL';\n\nprint $perl_scalar1++ . \n , \n;\nprint $perl_scalar1 . \n , \n;\nprint ++$perl_scalar3 . \n , \n;\nprint ++$perl_scalar4 . \n n\n; \nIncrement and Decrement operators in perl\n\n8. Loops\n8.1. Perl for loop\n#!/usr/bin/perl\n\n# Definition of perl for loop\nfor($for_loop=0;$for_loop\n=4;$for_loop++) {\n       print \nfor loop value is:\n.$for_loop.\n n\n;\n       } \nPerl for loop\n\n8.2. Perl while loop\n#!/usr/bin/perl\n#\n\n$while_loop=5;\n\n# Definition of perl while loop\nwhile ($while_loop\n=0) {\n       print \nwhile loop value is:\n.$while_loop.\n n\n;\n       $while_loop--;\n       } \nPerl while loop\n\n8.3. Perl until loop\n#!/usr/bin/perl\n#\n$until_loop=5;\n\n# Definition of perl until loop\nuntil ($until_loop==0) {\n       print \nuntil loop value is:\n.$until_loop.\n n\n;\n       $until_loop--;\n       } \nPerl until loop\n\n8.4. Perl foreach loop\n#!/usr/bin/perl\n\n#Declare array\n\n@foreach_loop = (\n Tutorial n\n , \n Scripting\n , \nPerl\n ) ;\nforeach $count (reverse @foreach_loop) {\n    print $count;\n    } \nPerl foreach loop\n\n9. Getting User Input\n#!/usr/bin/perl\n\n# getting user input\n$user_input = ; # also possible to use just (\n)\nprint $user_input;\n# clear user input and remove new line character\nchomp($user_input);\nprint $user_input .\n \n; \nGetting User Input in perl [[Image:perl_user_input.gif]]\n\n9.1. Reading Command Line Arguments\n#!/usr/bin/perl\n# reading command line arguments with perl\n# @ARGV is Perl build-in array which\n# contains all arguments passed during command line execution\nprint join(\n \n, @ARGV);\n\nprint \n n\n . $ARGV[0] . $ARGV[1] . $ARGV[2] . $ARGV[3] . $ARGV[4] . $ARGV[5] . \n n\n;  \nReading Command Line Arguments in perl\n\n10. File Handling\n10.1. Read File Passed from the Command line\n#!/usr/bin/perl\n\n# read all files passed by command line as a arguments.\nwhile (\n) {\n    print;\n} \nRead File Passed from the Command line in perl\n\n10.2. Open File for Read and Write\n#!/usr/bin/perl\n\n# Create filehandle for write called WFILEHANDLE for file perl.txt\n# if the file does not exists it will be created. \nopen (WFILEHANDLE, \nperl.txt\n) or die (\nCannot open perl.txt . n\n);\n\n# Insert data to perl.txt\nprint WFILEHANDLE \nPerl Programming Tutorial\n;\n\n#Close filehandle.\nclose (WFILEHANDLE);\n\n# Create filehandle for read called RFILEHANDLE for file perl.txt\nopen (RFILEHANDLE, \n\n\n# read file and print to \nwhile () {\nprint;\n}\nprint \n n\n; \nOpen File for Read and Write in perl\n\n10.3. Determine Number of Lines in a File\n#!/usr/bin/perl\n\nopen(FILEHANDLE, $ARGV[0]) or die (\nCould not open a given file\n);\n\n@lines=;\nprint \nNumber of Lines in the file: \n . scalar(@lines) . \n n\n;\n# Perl can Print particular line from the file \nprint \nLine number 23: \n. $lines[22] . \n/n\n; \nDetermine Number of Lines in a File with perl\n\n10.4. Determine Number of Characters in a File\n#!/usr/bin/perl\n\nopen(FILEHANDLE, $ARGV[0]) or die (\nCould not open a given file\n);\nmy $input =0;\nwhile (defined($char = getc FILEHANDLE)) {\n$input++;\n}\nprint \nNumber of characters: \n . $input . \n n\n;\nclose FILEHANDLE; \nDetermine Number of Characters in a File with perl\n\n10.5. Seek position within a File\n#!/usr/bin/perl\n\n# seek is helpful perl function, especially with huge files, where sequential access\n# may be time consuming and may require lots of processing power. Seek provides quick random access.\n# 0 -set the new position in bytes to POSITION\n# 1 -set the current position plus POSITION\n# 2 -set the new position EOF plus POSITION (often negative)\n# use seek function to set position 20000 bytes\n\nopen(FILEHANDLE, $ARGV[0]) or die (\nCould not open a given file !!\n);\nseek FILEHANDLE, 20000,0;\n# use perl tell function to check file position.\nprint tell FILEHANDLE;\nprint \n -\n seek FILEHANDLE, 20000,0  n\n;\n# Add another 36 bytes\nseek FILEHANDLE, 36,1;\nprint tell FILEHANDLE;\nprint \n -\n seek FILEHANDLE, 36,1  n\n;\n# Return position to byte 10\nseek FILEHANDLE, 10,0;\nprint tell FILEHANDLE;\nprint \n -\n seek FILEHANDLE, 10,0  n\n;\n# Set position to the end of the file (eof)\nseek FILEHANDLE, 0,2;\nprint tell FILEHANDLE;\nprint \n -\n seek FILEHANDLE, 0,2  n\n;\n\nclose FILEHANDLE; \nSeek position within a File with perl\n\n11. Simple Perl Arithmetics\n#!/usr/bin/perl\n\n#perl addition\n$addition=5+5.3;\nprint \nPerl Addition: n5 + 5 = \n.$addition.\n n\n;\n\n#perl subtraction\n$subtraction=100-23;\nprint \nPerl Subtraction: n100 - 23 = \n.$subtraction.\n n\n;\n\n#perl multiplication\n$multiplication=3*9;\nprint \nPerl Multiplication: n3 x 9 = \n.$multiplication.\n n\n;\n\n#perl division\n$division=45/5;\nprint \nPerl Division: n45 : 5 = \n.$division.\n n\n;\n\n#perl modulus\n$modulus=10%3;\nprint \nPerl Modulus: n10 % 3 = \n.$modulus.\n n\n;\n\n#perl exponential\n$exponential=3**4;\nprint \nPerl Exponential: n3 ** 4 = \n.$exponential.\n n\n; \nSimple Perl Arithmetics\n\n12. Perl Octal, Hexadecimal, And Decimal Conversions\n#!/usr/bin/perl\n\nprint \n n\n;\n\n#perl  bin to dec\n#PERL CONVERSION FROM BINARY TO DECIMAL\n$decimal_number = 0b10010110;\nprint \nBinary number 10010110 is \n . $decimal_number . \n in decimal. n\n;\n\n#perl  dec to bin\n#PERL CONVERSION FROM DECIMAL TO BINARY\n$decimal_number = 23451;\n$binary_number = unpack(\nB32\n, pack(\nN\n, $decimal_number));\nprint \nDecimal number \n . $decimal_number . \n is \n . $binary_number .\n\n in binary. n n\n;\n\n#perl  oct to dec\n#PERL CONVERSION FROM OCTAL TO DECIMAL\n$octal_number = 224;\n$decimal_number =  oct($octal_number);\nprint \nOctal number \n . $octal_number . \n is \n . $decimal_number . \n\nin decimal. n\n;\n#perl  dec to oct\n#PERL CONVERSION FROM DECIMAL TO OCTAL\n$decimal_number = 8;\n$octal_number = sprintf(\n%o\n,$decimal_number);\nprint \nDecimal number \n . $decimal_number . \n is \n . $octal_number . \n\nin octal. n n\n;\n\n#perl  hex to dec\n#PERL CONVERSION FROM HEXADECIMAL TO DECIMAL\n$hexadecimal_number = \nF1\n;\n$decimal_number =  hex($hexadecimal_number);\nprint \nHexadecimal number \n . $hexadecimal_number . \n is \n .\n$decimal_number . \n in decimal. n\n;\n\n#perl  dec to hex\n#PERL CONVERSION FROM DECIMAL TO HEXADECIMAL\n$decimal_number= 333;\n$hexadecimal_number = sprintf(\n%x\n, $decimal_number);\nprint \nDecimal number \n . $decimal_number . \n is \n .\n$hexadecimal_number . \n in hexadecimal. n n\n; \nPerl Octal, Hexadecimal, And Decimal Conversions\n\n13. Create Perl Package\nHere is an example of simple perl package: perl_package.pm\n\n# DECLARE PERL PACKAGE\npackage perl_package;\n\nBEGIN {\n# INITIALIZATION CODE\n}\n\n# DEFINE PERL PACKAGE\nsub package_subroutine {\nprint \nHello from Perl Package. n\n;\n}\n# TO INDICATE THAT PACKAGE LOADS OK\nreturn 1;\n\nEND {\n# CLEAN UP CODE\n}  \nWith the following script we can call package subroutine \npackage_subroutine\n: test_package.pl\n\n#!/usr/bin/perl\n\nuse perl_package;\n\nperl_package::package_subroutine(); \nExample of very simple perl package\n\n14. Databases connections\n14.1. Perl MySQL database connection\n#!/usr/bin/perl\n#\nuse Mysql;\n\n$mysql_host = \nperl_box\n;\n$mysql_database = \nperl_connect\n;\n$mysql_user = \nperl_programmer\n;\n$mysql_password = \nperl\n;\n\n$perl_mysql_connect = Mysql-\nconnect($mysql_host, $mysql_database,\n$mysql_user, $mysql_password);\n\nif ($perl_mysql_connect) {\n       print \nPerl have created connection to MySQL database! n\n\n} else {\n       print \nPerl could not create connection to MySQL database! n\n\n} \n\n14.2. Perl PostgreSQL database connection\n#!/usr/bin/perl\n\n#load perl postgresql module\nuse DBI;\n\n$postgresql_database=perl_connect;\n$postgresql_user=perl_programmer;\n$postgresql_password=perl;\n$postgresql_host=perl_box;\n\n# connect to perl to postgresql database\nmy $perl_postgresql =\nDBI-\nconnect(\nDBI:Pg:dbname=$postgresql_database;host=$postgresql_host\n,\n\n$postgresql_user\n, \n$postgresql_password\n);\n\nif($perl_postgresql) {\n       print \nPerl established connection to PostgreSQL database n\n;\n} \n\n15. Object Oriented Perl\nThere are many materials focussed on object oriented Perl from the introductory PerlBoot to the more comprehensive PerlToot. In this section are topics or viewpoints which couldn't be found elsewhere.\n\n15.1. Template of get/set methods\nBelow is an example of a script using an object with two pieces of data with a method to set/get each one: varName and varAge.\n\nlinuxconfig:~/learn_perl/oo$ $ cat test.pl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse Person;\n\nmy $p = Person-\nnew();\n\n$p-\nvarName('Anna');\n$p-\nvarAge(30);\n\nprint $p-\nvarName.\n is \n.$p-\nvarAge.\n years old. n\n; \nRunning this function behaves as expected:\n\nlinuxconfig:~/learn_perl/oo$ ./test.pl\nAnna is 30 years old. \nThe obvious implementation of this object would be as follows:\n\nlinuxconfig:~/learn_perl/oo$ cat Person.pm\npackage Person;\n\nuse strict;\nuse warnings;\n\nsub new\n{\n    my $class = shift;\n\n    my $self = {}; bless($self, $class);\n    return $self;\n}\n\nsub varName\n{\n        my ($self, $name) = @_;\n        if (defined($name)) {\n                $self-\n{NAME} = $name;\n        }\n        return  $self-\n{NAME};\n};\n\nsub varAge\n{\n        my ($self, $age) = @_;\n        if (defined($age)) {\n                $self-\n{AGE} = $age;\n        }\n        return  $self-\n{AGE};\n};\n\n1; \n\nThe main thing to observe in the code above is that the varName and varAge are identical in functionality. In the example below, we implement both of these methods using a single function template.\n\nlinuxconfig:~/learn_perl/oo$ cat Person.pm\npackage Person;\n\nuse strict;\nuse warnings;\n\nsub new\n{\n    my $class = shift;\n\n    my $self = {}; bless($self, $class);\n    return $self;\n}\n\nmy @vars = qw(Name Age);\nforeach my $var (@vars) {\n    no strict 'refs'; # permit the symbolic references to varName, varAge\n    *{\nvar\n.$var} =\n                sub\n        {\n            my ($self, $stuff) = @_;\n            if (defined($stuff)) {\n                $self-\n{uc($var)} = $stuff; # change Name to NAME\n            }\n            return  $self-\n{uc($var)};\n        };\n}\n\n1;", 
            "title": "Perl"
        }, 
        {
            "loc": "/shell/python/index.html", 
            "tags": "", 
            "text": "python\n\n\npython manpage", 
            "title": "Python"
        }, 
        {
            "loc": "/dev/git/index.html", 
            "tags": "", 
            "text": "Git Tutorial\n\n\nModified from \ngit tutorals\n\n\nGit installation on Linux\n\n\nLinux distributions provide packages for \ngit\n, for example Ubuntu 10.10 comes\nwith git 1.7.1:\n\n\n\n\nsudo apt-get install git\n\n  git --version\n\n  git version 1.7.1  \n\n\n\n\nCreating a new repository\n\n\ngit init\n creates an empty git repository in the current folder:\n\n\n\n\ngit init\n\n\n\n\nThis might surprise readers who are accustomed to traditional version control\nsystems like CVS or SVN. A git repository can be a completely local\nundertaking. The whole \nrepository\n content is stored in a folder named \n.git\n\nin the root of the project folder:\n\n\n\nOf course git can also work with remote or central repositories, but it does\nnot require them. We will have a look at working with remote repositories in a\nforthcoming part of the tutorial. For the moment let us enjoy the freedom of\ncreating a repository locally whenever and for whatever reason we may need\none!\n\n\nThe working tree\n\n\nYour own files in the repository folder are called \nworking tree\n:\n\n\n  \n\n\nThe staging index\n\n\nGit internally holds a thing called the \nindex\n, which is a snapshot of your\nproject files. After you have just created an empty repository, the index will\nbe empty. You must manually stage the files from your \nworking tree\n to the\n\nindex\n using \ngit add\n:\n\n\n\n\ngit add somefile.txt\n\n\n\n\ngit add\n works recursively, so you can also add whole folders:\n\n\n\n\ngit add somefolder\n\n\n\n\nThe same applies if you change a file in your working tree - you have to add\nthis change to the index with \ngit add\n:\n\n\n\n\nedit somefile.txt\n\n  git add somefile.txt\n\n\n\n\n  \n\n\nIt\u2019s important to realize that the index is a full snapshot of your project\nfiles - it is not just a list of the changed files.\n\n\nCommitting\n\n\ngit commit\n takes the contents of the index and creates a new \ncommit\n:\n\n\n\n\ngit commit -m  the 1st commit \n\n\n\n\nCommitting is a completely local operation, not related to sending something\nto a remote server. It just takes the contents of the index and keeps a\nsnapshot of your project files as they were in the index:  \n\n\n  \n\n\nSimiliar to the index a \ncommit\n is a full snapshot of your project files.\nDifferent from traditional version control systems, commits are not numbered.\nInstead, a \ncommit\n gets assigned a SHA-1 hash of the snapshot contents:\n\n\n  \n\n\nThis may look awkward the first time you see it. But it brings a huge\nadvantage with it: every commit, which is a full snapshot of your project\nfiles, is identified by a cryptographically tamper-proof signature of your\nfile contents. If somehow one byte of the contents or history of your files\nchanges, you would end up with an entirely different hash. So you\u2019re\nguaranteed to get out what you put into a git repository.\n\n\nAlso, you don\u2019t need to write the full commit hash when you want to refer to\nsome specific commit - you can always abbreviate them by their first\ncharacters. The first seven characters are usually enough to identify one\ncommit uniquely.\n\n\nCommit history\n\n\nThe workflow for editing files in a git repository looks like this:\n\n\n\n\nYou make changes to the \nworking tree\n files.\n You add these changes to the \nindex\n using \ngit add\n.\n You create a new commit from the \nindex\n using \ngit commit\n.\n\n\n\n\nAs you do this repeatedly, you will create a new \ncommit\n each time, pointing\nback to the previous commit:\n\n\n  \n\n\nThis is how git keeps track of the project history. It stores snapshots of the\nproject files as \ncommits\n. These commits point back to the commit they were\ncreated from. Of course, all these snapshots are saved in a very efficient\nmanner occupying only a fraction of disk space compared to a full copy of all\nyour files.\n\n\nYou can see the history using \ngit log\n:\n\n\n\n\ngit log\n\n   commit 068b9b9...\n\n   Author: Bob \n\n   Date:   Wed Jun 17 17:21:16 2009 +0200\n\n   the 3rd commit\n\n   commit 3720b35...\n\n   Author: Bob \n\n   Date:   Wed Jun 17 17:21:10 2009 +0200\n\n   the 2nd commit\n\n   commit a2a1eb3...\n\n   Author: Bob \n\n   Date:   Wed Jun 17 17:21:10 2009 +0200\n\n   the 1st commit\n\n\n\n\ngit can also show a shorter version of the history using:\n\n\n\n\ngit log --pretty=oneline --abbrev-commit\n\n   068b9b9 the 3rd commit\n\n   3720b35 the 2nd commit\n\n   a2a1eb3 the 1st commit  \n\n\n\n\nGit configuration: user settings\n\n\nIf you look at the full commit messages above, you will see that they contain\ninformation about their author. Where does git take this information from when\nit created the commit? Initially, it tries to guess these from your username\nand hostname. You can also configure them for your project manually:\n\n\n\n\ngit config user.name  Bob \n\n  git config user.email  bob@example.com \n\n\n\n\nYou can also configure this globally for all your git projects:\n\n\n\n\ngit config --global user.name  Bob \n\n  git config --global user.email  bob@example.com \n\n\n\n\nSeeing what will be committed\n\n\ngit status\n shows you how the \nworking tree\n is different from the \nindex\n\nand how the \nindex\n is different from the last \ncommit\n:\n\n\n\n\ngit status\n\n\n\n\nAt first, you will see the changes that were already added to the \nindex\n.\nThis list represents what will be in your next commit:\n\n\n\n\nChanges to be committed:\n\n  modified:   changed_file_added.txt\n\n\n\n\nAlso, git will show the changes that have been made to the working tree, but\nwere not yet added to the \nindex\n:\n\n\n\n\nChanged but not updated:\n\n  modified:   changed_file.txt\n\n  untracked files:\n\n  newfile.txt  \n\n\n\n\nShortcut: How to add changed files when committing\n\n\nWhen committing, you can leave the task of adding the changed files to git\nusing the \n-a\n command line option:\n\n\n\n\ngit commit -a -m  commit message \n\n\n\n\nThis will add all changed (but not new) files to the index before committing.\n\n\nThrowing changes away\n\n\nWhat if you made some changes to your project and want to return to the\noriginal state? This depends on where the changes are.\n\n\nIf you have not added them to the \nindex\n yet, you can restore them from the\n\nindex\n using \ngit checkout \nfilename\n:\n\n\n\n\ngit checkout somefile.txt\n\n\n\n\nThis restores a file or a folder as it is stored in the \nindex\n to your\n\nworking tree\n:  \n\n\n  \n\n\nWhat if you have already added the changes to the \nindex\n? You can restore the\n\nindex\n to the last commit using \ngit reset\n:\n\n\n\n\ngit reset HEAD somefile.txt\n\n\n\n\nYou can also restore the whole \nindex\n:\n\n\n\n\ngit reset HEAD\n\n\n\n\nHEAD\n always refers to the last commit which has been made. Using this, the\n\nindex\n is restored to the contents of the last commit - you can then use \ngit\ncheckout\n to restore your working tree as well:\n\n\n  \n\n\nReverting commits\n\n\nIf you have already committed your changes, you can make use of git\u2019s built-in\n\u201cundo\u201d command called \ngit revert \ncommit\n:\n\n\n\n\ngit revert 068b9b9\n\n\n\n\nThis will create a second commit which undoes the changes of the given commit:\n\n\n\n\n8b54ea7 Revert  the 3rd commit \n\n   068b9b9 the 3rd commit\n\n   3720b35 the 2nd commit\n\n   a2a1eb3 the 1st commit  \n\n\n\n\nPlease note that you can also revert older commits:\n\n\n\n\ngit revert 3720b35\n\n  git log --pretty=oneline --abbrev-commit\n  ab621c7 Revert  the 2nd commit \n  068b9b9 the 3rd commit\n  3720b35 the 2nd commit\n  a2a1eb3 the 1st commit\n\n\n\n\nHowever, reverting older commits can cause a conflict if the other commits\nchanged the same contents in the meantime. We will see how such conflicts are\nresolved later on.\n\n\nSeeing the diff between commits\n\n\nTo see the difference from one commit compared to its parent, use \ngit show\n\ncommit\n:\n\n\n\n\ngit show 3720b35\n\n\n\n\nTo compare two specific commits, use \ngit diff \ncommit_from\n..\ncommit_to\n:\n\n\n\n\ngit diff a2a1eb3..068b9b9\n\n\n\n\nTo see the diffs for the complete history, use \ngit log -p\n\n\n\n\ngit log -p\n\n\n\n\nConfiguring git: colored console output\n\n\nMany commands like \ngit status\n and \ngit diff\n can show colored console\noutput, which helps reading their output. You can configure this globally\nusing:\n\n\n\n\ngit config --global color.ui auto\n\n\n\n\nTagging commits\n\n\ngit tag \nname\n \ncommit\n assigns a tag to a commit. If \ncommit\n is omitted,\nthe last commit gets tagged:\n\n\n\n\ngit tag working 3720b35\n\n  git tag broken\n\n\n\n\nA tag is nothing more than a label that can be used to refer to the tagged\ncommit:\n\n\n\nTags can be used everywhere where you can use the commit hash, for example in\n\ngit diff\n:\n\n\n\n\ngit diff working..broken\n\n\n\n\nTags are perfect for labeling specific points in the history. It is very\ncommon to label commits with the version number when you publish a release of\nyour project - this way you can find these important commits easily:\n\n\n\n\ngit tag v1.0.3\n\n\n\n\nBranches\n\n\nSo far we have seen how you can create commits and work with them. Up until\nthis point, all the history of our repository has been linear.\n\n\nLet\u2019s say we we want to develop a new feature for our project. This is\nsomething very large and we want to keep those changes separate from other\nchanges. With branches, we can do that.\n\n\nAll the time, we were already working in a branch called \nmaster\n. This branch\nwas created automatically when we created the repository. You can see all\nbranches in the repository using \ngit branch\n:\n\n\n\n\ngit branch\n\n  master\n\n\n\n\nSo there is one branch called \nmaster\n. The asterisk denotes that this is the\nbranch we are working on. A branch can be compared, to some extent, with a\n\ntag\n. At all times, a branch points to some commit, in our case to the latest\ncommit we made. You can prove that using:\n\n\n\n\ngit branch -v\n\n  master 068b9b9 the 3rd commit\n\n\n\n\n  \n\n\nTo track changes in a separate branch, we have to create a new one using \ngit\nbranch \nname\n \ncommit\n. The specified commit will be the starting point for\nthe new branch - if you omit it, the latest commit will be used:\n\n\n\n\ngit branch newfeature\n\n\n\n\nThis will create a new branch called \nnewfeature\n based on the latest commit\nin \nmaster\n:\n\n\n  \n\n\nAt all times, there is one specific active branch. If you call \ngit branch\n,\nyou will see that a new branch named \nnewfeature\n was created, but \nmaster\n is\nstill the active one:\n\n\n\n\ngit branch\n\n  master\n\n  newfeature\n\n\n\n\nYou can switch between branches using \ngit checkout \nbranchname\n. This is the\nsame command we used before to get files from the staging index to the working\ntree. The meaning of \ngit checkout\n depends on its arguments.\n\n\n\n\ngit checkout newfeature\n\n\n\n\nNow the active branch in our repository is \nnewfeature\n:\n\n\n\n\ngit branch\n\n  master\n\n  newfeature  \n\n\n\n\nWe can start working in this branch using the already known commands \ngit\nadd\n, \ngit commit\n, etc. Let\u2019s see what happens when we create a new commit in\nthe branch:\n\n\n\n\nedit somefile.txt\n\n  git commit -a -m  api draft \n\n\n\n\n  \n\n\nThe commit was added to the repository and the branch \nnewfeature\n now points\nto the new commit. Conceptually a branch can be seen as a pointer to some\ncommit. Whenever you commit something, this \u201cpointer\u201d of the active branch is\nmoved forward to the new commit. This is everything it takes to keep branches\nseparate.\n\n\nTo continue the example, let\u2019s say we are finished with working on our new\nfeature for the moment and want to continue working on the master branch. That\nis easy - we just switch back to the \nmaster\n branch:\n\n\n\n\ngit checkout master\n\n\n\n\nThis will set the active branch back to \nmaster\n. It will also reset the\n\nindex\n and your \nworking tree\n to the contents of the last commit in master:  \n\n\n  \n\n\nSo you will see the project in the exact same state it was in when we forked\noff the new branch. There will be no trace of the changes of the \nnewfeature\n\nbranch.\n\n\nWhat happens if we add some changes and commit these?\n\n\n\n\nedit somefile.txt\n\n  git commit -a -m  bugfix \n\n\n\n\nThe same as before: A new commit will be created based on the latest commit in\n\nmaster\n and \nmaster\n will be pointing to the new commit after that:  \n\n\n  \n\n\nBranches are very cheap and fast in git, you can create as many as you need.\nSome developers like to work with a \nstable\n and an \nunstable\n branch whereas\nsome developers create a branch for every new feature they are working on -\nit\u2019s up to you.\n\n\nMerging\n\n\nLet\u2019s say we have completed the new feature and want to get it back into the\n\nmaster\n branch. This can be achieved with the \ngit merge\n command whilst\nhaving the master branch selected as the active branch:\n\n\n\n\ngit merge newfeature\n\n\n\n\nIf all goes well there will be no conflicts and git will just create a new\ncommit containing the changes which have been made in both branches:  \n\n\n  \n\n\nGenerally, git is very smart about merging. However, if the same contents were\nchanged in both branches, a conflict will arise:\n\n\n\n\nCONFLICT (content): Merge conflict in somefile.txt\n\n  Automatic merge failed; fix conflicts and then commit the result.\n\n\n\n\nWe have to resolve this conflict manually. If you have a look at the file with\nthe conflict, you will see the respective lines marked. On the top you will\nsee the version from the active branch, below you will see the version from\nthe merged branch:\n\n\n\n\n HEAD:somefile.txt\n\n    this change was done in master\n\n    =======\n\n    this change was done in newfeature\n\n    \n newfeature:somefile.txt  \n\n\n\n\nYou have to resolve this conflict and remove the markers. After that you add\nthe file to the \nindex\n and commit the result:\n\n\n\n\ngit add somefile.txt\n\n  git commit\n\n\n\n\nAfter you have merged the branch, you can delete it should you not need it\nanymore:\n\n\n\n\ngit branch -d newfeature\n\n\n\n\nYou could also continue working in the branch and later merge it again. git\nwill be smart enough to know that parts of the branch have been merged already\nand will only apply the new changes.\n\n\nTools\n\n\nSome versioning tasks can be performed in a simpler manner using GUI\napplications. git comes with the history browser \ngitk\n:  \n\n\n  \n\n\nFor staging changes and committing you can use \ngit gui\n:  \n\n\n  \n\n\nThese tools are not pretty, but they do their job very well. Mac OS X users\ncan use a nice alternative application for both tasks called\n\n\ngitx", 
            "title": "git-tutorial"
        }, 
        {
            "loc": "/dev/git_cheat_sheet/index.html", 
            "tags": "", 
            "text": "git cheat sheets\n\n\nModified from http://cheat.errtheblog.com/s/git  \n\n\nSetup\n\n\ngit clone \nrepo\n\n  clone the repository specified by \nrepo\n; this is similar to  checkout  in\n  some other version control systems such as Subversion and CVS\n\nAdd colors to your ~/.gitconfig file:\n\n  [color]\n    ui = auto\n  [color  branch ]\n    current = yellow reverse\n    local = yellow\n    remote = green\n  [color  diff ]\n    meta = yellow bold\n    frag = magenta bold\n    old = red bold\n    new = green bold\n  [color  status ]\n    added = yellow\n    changed = green\n    untracked = cyan\n\nHighlight whitespace in diffs\n\n  [color]\n    ui = true\n  [color  diff ]\n    whitespace = red reverse\n  [core]\n    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol\n\nAdd aliases to your ~/.gitconfig file:\n\n  [alias]\n    st = status\n    ci = commit\n    br = branch\n    co = checkout\n    df = diff\n    dc = diff --cached\n    lg = log -p\n    lol = log --graph --decorate --pretty=oneline --abbrev-commit\n    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all\n    ls = ls-files\n\n    # Show files ignored by git:\n    ign = ls-files -o -i --exclude-standard\n\n\n\nConfiguration\n\n\ngit config -e [--global]\n  edit the .git/config [or ~/.gitconfig] file in your $EDITOR\n\ngit config --global user.name 'John Doe'\ngit config --global user.email johndoe@example.com\n  sets your name and email for commit messages\n\ngit config branch.autosetupmerge true\n  tells git-branch and git-checkout to setup new branches so that git-pull(1)\n  will appropriately merge from that remote branch.  Recommended.  Without this,\n  you will have to add --track to your branch command or manually merge remote\n  tracking branches with  fetch  and then  merge .\n\ngit config core.autocrlf true\n  This setting tells git to convert the newlines to the system's standard\n  when checking out files, and to LF newlines when committing in\n\ngit config --list\n  To view all options\n\ngit config apply.whitespace nowarn\n  To ignore whitespace\n\nYou can add  --global  after  git config  to any of these commands to make it\napply to all git repos (writes to ~/.gitconfig).\n\n\n\nInfo\n\n\ngit reflog\n  Use this to recover from *major* mess ups! It's basically a log of the\n  last few actions and you might have luck and find old commits that\n  have been lost by doing a complex merge.\n\ngit diff\n  show a diff of the changes made since your last commit\n  to diff one file:  git diff -- \nfilename\n \n  to show a diff between staging area and HEAD: `git diff --cached`\n\ngit status\n  show files added to the staging area, files with changes, and untracked files\n\ngit log\n  show recent commits, most recent on top. Useful options:\n  --color       with color\n  --graph       with an ASCII-art commit graph on the left\n  --decorate    with branch and tag names on appropriate commits\n  --stat        with stats (files changed, insertions, and deletions)\n  -p            with full diffs\n  --author=foo  only by a certain author\n  --after= MMM DD YYYY  ex. ( Jun 20 2008 ) only commits after a certain date\n  --before= MMM DD YYYY  only commits that occur before a certain date\n  --merge       only the commits involved in the current merge conflicts\n\ngit log \nref\n..\nref\n\n  show commits between the specified range. Useful for seeing changes from remotes:\n  git log HEAD..origin/master # after git remote update\n\ngit show \nrev\n\n  show the changeset (diff) of a commit specified by \nrev\n, which can be any\n  SHA1 commit ID, branch name, or tag (shows the last commit (HEAD) by default)\n\n  also to show the contents of a file at a specific revision, use \n     git show \nrev\n:\nfilename\n\n  this is similar to cat-file but much simpler syntax.\n\ngit show --name-only \nrev\n\n  show only the names of the files that changed, no diff information.\n\ngit blame \nfile\n\n  show who authored each line in \nfile\n\n\ngit blame \nfile\n \nrev\n\n  show who authored each line in \nfile\n as of \nrev\n (allows blame to go back in\n  time)\n\ngit gui blame\n  really nice GUI interface to git blame\n\ngit whatchanged \nfile\n\n  show only the commits which affected \nfile\n listing the most recent first\n  E.g. view all changes made to a file on a branch:\n    git whatchanged \nbranch\n \nfile\n  | grep commit |  \n         colrm 1 7 | xargs -I % git show % \nfile\n\n  this could be combined with git remote show \nremote\n to find all changes on\n  all branches to a particular file.\n\ngit diff \ncommit\n head path/to/fubar\n  show the diff between a file on the current branch and potentially another branch\n\ngit diff --cached [\nfile\n]\n  shows diff for staged (git-add'ed) files (which includes uncommitted git cherry-pick'ed files)\n\ngit ls-files\n  list all files in the index and under version control.\n\ngit ls-remote \nremote\n [HEAD]\n  show the current version on the remote repo. This can be used to check whether\n  a local is required by comparing the local head revision.\n\n\n\nAdding / Deleting\n\n\ngit add \nfile1\n \nfile2\n ...\n  add \nfile1\n, \nfile2\n, etc... to the project\n\ngit add \ndir\n\n  add all files under directory \ndir\n to the project, including subdirectories\n\ngit add .\n  add all files under the current directory to the project\n  *WARNING*: including untracked files.\n\ngit rm \nfile1\n \nfile2\n ...\n  remove \nfile1\n, \nfile2\n, etc... from the project\n\ngit rm $(git ls-files --deleted)\n  remove all deleted files from the project\n\ngit rm --cached \nfile1\n \nfile2\n ...\n  commits absence of \nfile1\n, \nfile2\n, etc... from the project\n\n\n\nIgnoring\n\n\nOption 1:\n\nEdit $GIT_DIR/.git/info/exclude. See Environment Variables below for explanation on $GIT_DIR.\n\nOption 2:\n\nAdd a file .gitignore to the root of your project. This file will be checked in.\n\nEither way you need to add patterns to exclude to these files.\n\n\n\nStaging\n\n\ngit add \nfile1\n \nfile2\n ...\ngit stage \nfile1\n \nfile2\n ...\n  add changes in \nfile1\n, \nfile2\n ... to the staging area (to be included in\n  the next commit\n\ngit add -p\ngit stage --patch\n  interactively walk through the current changes (hunks) in the working\n  tree, and decide which changes to add to the staging area.\n\ngit add -i\ngit stage --interactive\n  interactively add files/changes to the staging area. For a simpler\n  mode (no menu), try `git add --patch` (above)\n\n\n\nUnstaging\n\n\ngit reset HEAD \nfile1\n \nfile2\n ...\n  remove the specified files from the next commit\n\n\n\nCommitting\n\n\ngit commit \nfile1\n \nfile2\n ... [-m \nmsg\n]\n  commit \nfile1\n, \nfile2\n, etc..., optionally using commit message \nmsg\n,\n  otherwise opening your editor to let you type a commit message\n\ngit commit -a\n  commit all files changed since your last commit\n  (does not include new (untracked) files)\n\ngit commit -v\n  commit verbosely, i.e. includes the diff of the contents being committed in\n  the commit message screen\n\ngit commit --amend\n  edit the commit message of the most recent commit\n\ngit commit --amend \nfile1\n \nfile2\n ...\n  redo previous commit, including changes made to \nfile1\n, \nfile2\n, etc...\n\n\n\nBranching\n\n\ngit branch\n  list all local branches\n\ngit branch -r\n  list all remote branches\n\ngit branch -a\n  list all local and remote branches\n\ngit branch \nbranch\n\n  create a new branch named \nbranch\n, referencing the same point in history as\n  the current branch\n\ngit branch \nbranch\n \nstart-point\n\n  create a new branch named \nbranch\n, referencing \nstart-point\n, which may be\n  specified any way you like, including using a branch name or a tag name\n\ngit push \nrepo\n \nstart-point\n:refs/heads/\nbranch\n\n  create a new remote branch named \nbranch\n, referencing \nstart-point\n on the\n  remote. Repo is the name of the remote.\n  Example: git push origin origin:refs/heads/branch-1\n  Example: git push origin origin/branch-1:refs/heads/branch-2\n  Example: git push origin branch-1 ## shortcut\n\ngit branch --track \nbranch\n \nremote-branch\n\n  create a tracking branch. Will push/pull changes to/from another repository.\n  Example: git branch --track experimental origin/experimental\n\ngit branch --set-upstream \nbranch\n \nremote-branch\n (As of Git 1.7.0)\n  Make an existing branch track a remote branch\n  Example: git branch --set-upstream foo origin/foo\n\ngit branch -d \nbranch\n\n  delete the branch \nbranch\n; if the branch you are deleting points to a\n  commit which is not reachable from the current branch, this command\n  will fail with a warning.\n\ngit branch -r -d \nremote-branch\n\n  delete a remote-tracking branch.\n  Example: git branch -r -d wycats/master\n\ngit branch -D \nbranch\n\n  even if the branch points to a commit not reachable from the current branch,\n  you may know that that commit is still reachable from some other branch or\n  tag. In that case it is safe to use this command to force git to delete the\n  branch.\n\ngit checkout \nbranch\n\n  make the current branch \nbranch\n, updating the working directory to reflect\n  the version referenced by \nbranch\n\n\ngit checkout -b \nnew\n \nstart-point\n\n  create a new branch \nnew\n referencing \nstart-point\n, and check it out.\n\ngit push \nrepository\n :\nbranch\n\n  removes a branch from a remote repository.\n  Example: git push origin :old_branch_to_be_deleted\n\ngit co \nbranch\n \npath to new file\n\n  Checkout a file from another branch and add it to this branch. File\n  will still need to be added to the git branch, but it's present.\n  Eg. git co remote_at_origin__tick702_antifraud_blocking ..../...nt_elements_for_iframe_blocked_page.rb\n\ngit show \nbranch\n -- \npath to file that does not exist\n\n  Eg. git show remote_tick702 -- path/to/fubar.txt\n  show the contents of a file that was created on another branch and that\n  does not exist on the current branch.\n\ngit show \nrev\n:\nrepo path to file\n\n  Show the contents of a file at the specific revision. Note: path has to be\n  absolute within the repo.\n\n\n\nMerging\n\n\ngit merge \nbranch\n\n  merge branch \nbranch\n into the current branch; this command is idempotent\n  and can be run as many times as needed to keep the current branch\n  up-to-date with changes in \nbranch\n\n\ngit merge \nbranch\n --no-commit\n  merge branch \nbranch\n into the current branch, but do not autocommit the\n  result; allows you to make further tweaks\n\ngit merge \nbranch\n -s ours\n  merge branch \nbranch\n into the current branch, but drops any changes in\n  \nbranch\n, using the current tree as the new tree\n\n\n\nCherry-Picking\n\n\ngit cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] \ncommit\n\n  selectively merge a single commit from another local branch\n  Example: git cherry-pick 7300a6130d9447e18a931e898b64eefedea19544\n\ngit hash-object \nfile-path\n\n  get the blob of some file whether it is in a repository or not\n\nFind the commit in the repository that contains the file blob:\n\n    obj_blob= $1 \n    git log --pretty=format:'%T %h %s'  \n    | while read tree commit subject ; do\n        if git ls-tree -r $tree | grep -q  $obj_blob  ; then\n            echo $commit  $subject \n        fi\n    done\n\n\n\nSquashing\n\n\nWARNING:  git rebase  changes history. Be careful. Google it.\n\ngit rebase --interactive HEAD~10\n  (then change all but the first  pick  to  squash )\n  squash the last 10 commits into one big commit\n\n\n\nConflicts\n\n\ngit mergetool\n  work through conflicted files by opening them in your mergetool (opendiff,\n  kdiff3, etc.) and choosing left/right chunks. The merged result is staged for\n  commit.\n\nFor binary files or if mergetool won't do, resolve the conflict(s) manually\nand then do:\n\n  git add \nfile1\n [\nfile2\n ...]\n\nOnce all conflicts are resolved and staged, commit the pending merge with:\n\n  git commit\n\n\n\nSharing\n\n\ngit fetch \nremote\n\n  update the remote-tracking branches for \nremote\n (defaults to  origin ).\n  Does not initiate a merge into the current branch (see  git pull  below).\n\ngit pull\n  fetch changes from the server, and merge them into the current branch.\n  Note: .git/config must have a [branch  some_name ] section for the current\n  branch, to know which remote-tracking branch to merge into the current\n  branch.  Git 1.5.3 and above adds this automatically.\n\ngit push\n  update the server with your commits across all branches that are *COMMON*\n  between your local copy and the server.  Local branches that were never\n  pushed to the server in the first place are not shared.\n\ngit push origin \nbranch\n\n  update the server with your commits made to \nbranch\n since your last push.\n  This is always *required* for new branches that you wish to share. After\n  the first explicit push,  git push  by itself is sufficient.\n\ngit push origin \nbranch\n:refs/heads/\nbranch\n\n  E.g. git push origin twitter-experiment:refs/heads/twitter-experiment\n  Which, in fact, is the same as git push origin \nbranch\n but a little\n  more obvious what is happening.\n\n\n\nReverting\n\n\ngit revert \nrev\n\n  reverse commit specified by \nrev\n and commit the result.  This does *not* do\n  the same thing as similarly named commands in other VCS's such as  svn\n  revert  or  bzr revert , see below\n\ngit checkout \nfile\n\n  re-checkout \nfile\n, overwriting any local changes\n\ngit checkout .\n  re-checkout all files, overwriting any local changes.  This is most similar\n  to  svn revert  if you're used to Subversion commands\n\n\n\nFix mistakes / Undo\n\n\ngit reset --hard\n  abandon everything since your last commit; this command can be DANGEROUS.\n  If merging has resulted in conflicts and you'd like to just forget about\n  the merge, this command will do that.\n\ngit reset --hard ORIG_HEAD or git reset --hard origin/master \n  undo your most recent *successful* merge *and* any changes that occurred\n  after.  Useful for forgetting about the merge you just did.  If there are\n  conflicts (the merge was not successful), use  git reset --hard  (above)\n  instead.\n\ngit reset --soft HEAD \n  forgot something in your last commit? That's easy to fix. Undo your last\n  commit, but keep the changes in the staging area for editing.\n\ngit commit --amend\n  redo previous commit, including changes you've staged in the meantime.\n  Also used to edit commit message of previous commit.\n\n\n\nPlumbing\n\n\ntest \nsha1-A\n = $(git merge-base \nsha1-A\n \nsha1-B\n)\n  determine if merging sha1-B into sha1-A is achievable as a fast forward;\n  non-zero exit status is false.\n\n\n\nStashing\n\n\ngit stash\ngit stash save \noptional-name\n\n  save your local modifications to a new stash (so you can for example\n   git svn rebase  or  git pull )\n\ngit stash apply\n  restore the changes recorded in the stash on top of the current working tree\n  state\n\ngit stash pop\n  restore the changes from the most recent stash, and remove it from the stack\n  of stashed changes\n\ngit stash list\n  list all current stashes\n\ngit stash show \nstash-name\n -p\n  show the contents of a stash - accepts all diff args\n\ngit stash drop [\nstash-name\n]\n  delete the stash\n\ngit stash clear\n  delete all current stashes\n\n\n\nRemotes\n\n\ngit remote add \nremote\n \nremote_URL\n\n  adds a remote repository to your git config.  Can be then fetched locally.\n  Example:\n    git remote add coreteam git://github.com/wycats/merb-plugins.git\n    git fetch coreteam\n\ngit push \nremote\n :refs/heads/\nbranch\n\n  delete a branch in a remote repository\n\ngit push \nremote\n \nremote\n:refs/heads/\nremote_branch\n\n  create a branch on a remote repository\n  Example: git push origin origin:refs/heads/new_feature_name\n\ngit push \nrepository\n +\nremote\n:\nnew_remote\n\n  replace a \nremote\n branch with \nnew_remote\n\n  think twice before do this\n  Example: git push origin +master:my_branch\n\ngit remote prune \nremote\n\n  prune deleted remote-tracking branches from  git branch -r  listing\n\ngit remote add -t master -m master origin git://example.com/git.git/\n  add a remote and track its master\n\ngit remote show \nremote\n\n  show information about the remote server.\n\ngit checkout -b \nlocal branch\n \nremote\n/\nremote branch\n\n  Eg.:\n    git checkout -b myfeature origin/myfeature\n    git checkout -b myfeature remotes/\nremote\n/\nbranch\n\n\n  Track a remote branch as a local branch. It seems that\n  somtimes an extra 'remotes/' is required, to see the exact\n  branch name, 'git branch -a'.\n\ngit pull \nremote\n \nbranch\n\ngit push\n  For branches that are remotely tracked (via git push) but\n  that complain about non-fast forward commits when doing a\n  git push. The pull synchronizes local and remote, and if\n  all goes well, the result is pushable.\n\ngit fetch \nremote\n\n  Retrieves all branches from the remote repository. After\n  this 'git branch --track ...' can be used to track a branch\n  from the new remote.\n\n\n\nSubmodules\n\n\ngit submodule add \nremote_repository\n \npath/to/submodule\n\n  add the given repository at the given path. The addition will be part of the\n  next commit.\n\ngit submodule update [--init]\n  Update the registered submodules (clone missing submodules, and checkout\n  the commit specified by the super-repo). --init is needed the first time.\n\ngit submodule foreach \ncommand\n\n  Executes the given command within each checked out submodule.\n\nRemoving submodules\n\n   1. Delete the relevant line from the .gitmodules file.\n   2. Delete the relevant section from .git/config.\n   3. Run git rm --cached path_to_submodule (no trailing slash).\n   4. Commit and delete the now untracked submodule files.\n\nUpdating submodules\n  To update a submodule to a new commit:\n    1. update submodule:\n        cd \npath to submodule\n\n        git pull\n    2. commit the new version of submodule:\n        cd \npath to toplevel\n\n        git commit -m  update submodule version \n    3. check that the submodule has the correct version\n        git submodule status\n  If the update in the submodule is not committed in the\n  main repository, it is lost and doing git submodule\n  update will revert to the previous version.\n\n\n\nPatches\n\n\ngit format-patch HEAD \n  Generate the last commit as a patch that can be applied on another\n  clone (or branch) using 'git am'. Format patch can also generate a\n  patch for all commits using 'git format-patch HEAD  HEAD'\n  All page files will be enumerated with a prefix, e.g. 0001 is the\n  first patch.\n\ngit format-patch \nRevision\n ..\nRevision\n\n  Generate a patch for a single commit. E.g.\n    git format-patch d8efce43099 ..d8efce43099\n  Revision does not need to be fully specified.\n\ngit am \npatch file\n\n  Applies the patch file generated by format-patch.\n\ngit diff --no-prefix \n patchfile\n  Generates a patch file that can be applied using patch:\n    patch -p0 \n patchfile\n  Useful for sharing changes without generating a git commit.\n\n\n\nTags\n\n\ngit tag -l\n  Will list all tags defined in the repository.\n\ngit co \ntag_name\n\n  Will checkout the code for a particular tag. After this you'll\n  probably want to do: 'git co -b \nsome branch name\n' to define\n  a branch. Any changes you now make can be committed to that\n  branch and later merged.\n\n\n\nArchive\n\n\ngit archive master | tar -x -C /somewhere/else\n  Will export expanded tree as tar archive at given path\n\ngit archive master | bzip2 \n source-tree.tar.bz2\n  Will export archive as bz2\n\ngit archive --format zip --output /full/path master\n  Will export as zip\n\nGit Instaweb\n------------\n\ngit instaweb --httpd=webrick [--start | --stop | --restart]\n\n\n\nEnvironment Variables\n\n\nGIT_AUTHOR_NAME, GIT_COMMITTER_NAME\n  Your full name to be recorded in any newly created commits.  Overrides\n  user.name in .git/config\n\nGIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL\n  Your email address to be recorded in any newly created commits.  Overrides\n  user.email in .git/config\n\nGIT_DIR\n  Location of the repository to use (for out of working directory repositories)\n\nGIT_WORKING_TREE\n  Location of the Working Directory - use with GIT_DIR to specifiy the working directory root\n  or to work without being in the working directory at all.\n\n\n\nChanging history\n\n\nChange author for all commits with given name\n\n  git filter-branch --commit-filter '\n          if [  $GIT_COMMITTER_NAME  =  \nOld Name\n  ];\n          then\n                  GIT_COMMITTER_NAME= \nNew Name\n ;\n                  GIT_AUTHOR_NAME= \nNew Name\n ;\n                  GIT_COMMITTER_EMAIL= \nNew Email\n ;\n                  GIT_AUTHOR_EMAIL= \nNew Email\n ;\n                  git commit-tree  $@ ;\n          else\n                  git commit-tree  $@ ;\n          fi' HEAD", 
            "title": "git-cheat-sheet"
        }, 
        {
            "loc": "/dev/gdb/index.html", 
            "tags": "", 
            "text": "How to Debug Using GDB\n\n\nModified from \ngdb tutorial\n  \n\n\nWe are going to be using two programs to illustrate how GDB can be used to\ndebug code.\n\n\nDebugging a program with a logical error\n\n\ncode for broken.cpp  \n\n\n#include \niostream\n\n#include \ncmath\n\n\nusing namespace std;\n\nint ComputeFactorial(int number) {\n  int fact = 0;\n\n  for (int j = 1; j \n= number; j++) {\n    fact = fact * j;\n  }\n\n  return fact;\n}\n\ndouble ComputeSeriesValue(double x, int n) {\n  double seriesValue = 0.0;\n  double xpow = 1;\n\n  for (int k = 0; k \n= n; k++) {\n    seriesValue += xpow / ComputeFactorial(k);\n    xpow = xpow * x;\n  }\n\n  return seriesValue;\n}\n\nint main() {\n  cout \n \u201cThis program is used to compute the value of the following series : \u201c \n endl;\n\n  cout \n \u201c(x 0)/0! + (x 1)/1! + (x 2)/2! + (x 3)/3! + (x 4)/4! + ........ + (x n)/n! \u201c \n endl;\n\n  cout \n \u201cPlease enter the value of x : \u201c ;\n\n  double x;\n  cin \n x;\n\n  int n;\n  cout \n endl \n \u201cPlease enter an integer value for n : \u201c ;\n  cin \n n;\n  cout \n endl;\n\n  double seriesValue = ComputeSeriesValue(x, n);\n  cout \n \u201cThe value of the series for the values entered is \u201c\n    \n seriesValue \n endl;\n\n  return 0;\n}\n\n\n\n\nThe first sample program has some logical errors. The program is supposed to\noutput the summation of (X 0)/0! + (X 1)/1! + (X 2)/2! + (X 3)/3! + (X 4)/4! +\n... + (X n)/n!, given x and n as inputs. However the program outputs a value\nof infinity, regardless of the inputs. We will take you step by step through\nthe debugging process and trace the errors:\n\n\n\n\nDownload the sample program \nbroken.cpp\n\n\nCompile the program and execute the program.\n\n\n% g++ -g broken.cpp -o broken\n\n    % ./broken\n\n\n\n\n\n\n\n\nWhatever the input, the output will be inf. The -g option is important because\nit enables meaningful GDB debugging.\n\n\n\n\nStart the debugger\n\n\n% gdb broken\n\n\n\n\n\n\n\n\nThis only starts the debugger; it does not start running the program in the\ndebugger.\n\n\n\n\nLook at the source code and set a breakpoint at line 43\n\n\n(gdb) b 43\n\n\n\n\n\n\n\n\nwhich is\n\n\n\n\ndouble seriesValue = ComputeSeriesValue(x, n);\n\n\n\n\n\n\nNow, we start to run the program in the debugger.\n\n\n(gdb) run\n\n\n\n\n\n\n\n\nNote: If you need to supply the command-line arguments for the execution of\nthe program, simply include them after the run command, just as normally done\non the command line.\n\n\n\n\nThe program starts running and asks us for the input.\nLet's enter the values as x=2 and n=3. The expected output value is 5. The\nfollowing is a snapshot of the program running in the debugger:\n\n\n\n\n\n\nThis program is used to compute the value of the following series :\n    (x 0)/0! + (x 1)/1! + (x 2)/2! + (x 3)/3! + (x 4)/4! + ........ + (x n)/n!\n    Please enter the value of x : 2\n\n    lease enter an integer value for n : 3\n\n    Breakpoint 1, main () at broken.cpp:43\n\n    43  double seriesValue = ComputeSeriesValue(x, n);  \n\n\n\n\nNote that the program execution stopped at our first (and only) breakpoint.\n\n\n\n\nStep into the ComputeSeriesValue() function\nTo step into a function call, we use the following command:\n\n\n\n\n\n\n(gdb) step\n\n    ComputeSeriesValue (x=2, n=3) at broken.cpp:17\n\n    17  double seriesValue=0.0;  \n\n\n\n\nAt this point, the program control is at the first statement of the function\nComputeSeriesValue (x=2, n=3)\n\n\n\n\nNext let's step through the program until we get into ComputeFactorial.\n\n\n(gdb) next\n\n    18  double xpow=1;\n\n    (gdb) n\n\n    20  for (int k = 0; k \n= n; k++) {\n\n    (gdb)\n    21    seriesValue += xpow / ComputeFactorial(k) ;\n\n    (gdb) s\n\n    ComputeFactorial (number=0) at broken.cpp:7\n\n    7  int fact=0;  \n\n\n\n\n\n\n\n\nHere we use the next command, which is similar to step except it will step\nover (instead of into) functions. The distinction doesn't matter here since\nthere are no functions. You may use the shortest, unambigious spelling of a\nGDB command to save some typing. Here we use n and s instead of next and step,\nrespectively. If the command is simply a repeat of the previous command, you\ncan just hit return, which will execute the last command. Finally, we step\n(with s) into ComputeFactorial(). (If we'd used next, it would have stepped\nover ComputeFactorial.)\n\n\n\n\nWhere are we?\nIf you want to know where you are in the program's execution (and how, to some\nextent, you got there), you can view the contents of the stack using the\nbacktrace command as follows:\n\n\n\n\n\n\n(gdb) bt\n\n    #0  ComputeFactorial (number=0) at broken.cpp:7\n\n    #1  0x08048907 in ComputeSeriesValue (x=3, n=2) at broken.cpp:21\n\n    #2  0x08048a31 in main () at broken.cpp:43  \n\n\n\n\n\n\nWatching changes We can step through the program and examine the values using the print command.\n\n\n\n\n\n\n(gdb) n\n\n    9  for (int j = 0; j \n= number; j++) {\n\n    (gdb) n\n\n    10    fact = fact * j;\n\n    (gdb) n\n\n    9  for (int j = 0; j \n= number; j++) {\n\n    (gdb) print fact\n\n    $2 = 0\n\n    (gdb) n\n\n    13  return fact;\n\n    (gdb) quit  \n\n\n\n\nThe print command (abbreviated p) reveals that the value of fact never\nchanges. Note that the function is returning a value of 0 for the function\ncall ComputeFactorial(number=0). This is an ERROR!\n\n\nBy taking a closer look at the values printed above, we realize that we are\ncomputing fact=fact * j where fact has been initialized to 0; fact should have\nbeen initialized to 1. We quit GDB with the quit command. Next we need to\nchange the following line:\n\n\n\n\nint fact = 1;\n\n\n\n\nRecompile the code and run it, you will get the expected output.\n\n\nDebugging a program that produces a core dump\n\n\ncode for testit.c  \n\n\n#include \nstdio.h\n\nvoid main()\n{\n    char *temp = \u201cParas\u201d;\n\n    int i;\n    i=0;\n\n    temp[3]=\u2019F\u2019;\n\n    for (i =0 ; i \n 5 ; i++ )\n        printf(\u201c%c n\u201d, temp[i]);\n}\n\n\n\n\nThis program causes a core dump due to a segmentation fault. We will try to\ntrace the reason for this core dump.\n\n\nDownload the program, from \nhere.\n\n\n\n\nCompile the program using the following command.\n\n\n\n\n\n\ng++ testit.c -g -o testit\n\n\n\n\n\n\nRun it normally, you should get the following result:\n\n\n\n\n\n\n_ Segmentation fault (core dumped)_\n\n\n\n\n\n\nThe core dump generates a file called \ncore_which can be used for\ndebugging. Since, this program is really short, we will not need to set any\nbreakpoints. Use the following command to start running the debugger to debug\nthe _core\n file produced by \ntestit.\n\n\n\n\n\n\ngdb testit core\n\n\n\n\nThe output of the above command should look like this:\n\n\nbash$ gdb testit core\n\n\n\n\nGNU gdb 19991004\n\nCopyright 1998 Free Software\nCore was generated by `testit'.\n\nProgram terminated with signal 11, Segmentation fault.\n\nReading symbols from /usr/lib/libstdc++-libc6.1-1.so.2...done.\n\nReading symbols from /lib/libm.so.6...done.\n\nReading symbols from /lib/libc.so.6...done.\n\nReading symbols from /lib/ld-linux.so.2...done.\n\n0 0x804851a in main () at testit.c:10\n\n10 temp[3]='F';  \n\n\n\n\n\n\nAs we can see from the output above, the core dump was produced\n\n\n\n\nas a result of execution of the statement on line 10: _temp[3] ='F';\n\n\nTake a closer look at the declaration of temp on line 5 :\n\n\n\n\nLine 5 char *temp =  Paras ;\n\n\n\n\nWe find that \ntemp\n is a char* which has been assigned a \nstring literal\n, and\nso we cannot modify the contents of the literal as on line 10. This is what is\ncausing a core dump", 
            "title": "gdb"
        }, 
        {
            "loc": "/adv/article/index.html", 
            "tags": "", 
            "text": "swap FQA\n\n\nswap FQA\n\nFrom this ubuntu swap fqa, you can know:\n\nWhat is swap?\n\nWhy do I need swap?\nHow much swap do I need?\n\nHow do I add/eanable more swap?  \n\n\nLinux boot process\n\n\nlinux boot process\n\n\nwiki for linux boot", 
            "title": "Article"
        }, 
        {
            "loc": "/adv/os/index.html", 
            "tags": "", 
            "text": "linuxfromscratch.org\n\n\nlinuxfromscratch\n\nBuilding LFS teaches you about all that makes Linux tick, how things work together and depend on each other. And most importantly, how to customize it to your own tastes and needs.  \n\n\ntinycorelinux.net\n\n\ntinycorelinux.net\n\nTiny Core, a unique and minimalist distribution of the Linux operating system and tools.\n\n\narchlinux.org\n\n\narchlinux.org\n\nArch Linux, a lightweight and flexible Linux\u00ae distribution that tries to Keep It Simple.", 
            "title": "OS"
        }, 
        {
            "loc": "/faq/common/index.html", 
            "tags": "", 
            "text": "What is Linux?\n\n\nThe name  Linux  is usually used to mean a complete operating system, like Microsoft's Windows or Apple's Mac OS X. But really, deep down,  Linux  is just the bit that looks after your computer: it runs programs, it stores information in your RAM and on your hard disk, and it also provides support for things like connecting to a network.\n\n\nLinux by itself, known as  the kernel  because it's the true core of any desktop system, isn't very interesting. It doesn't have a graphical user interface. It doesn't let you chat to your friends online. And it certainly won't open any Microsoft Office documents! Instead, all these services are provided by applications that are designed to run on top of Linux.\n\n\nBecause just giving someone the Linux kernel is pretty much useless, a lot of people have taken the time to put it together with lots of other programs, utilities, tools and documentation to produce something that is useful. These combinations of software is called a Linux distribution (usually shortened to  distro ), and, because people choose different kinds of software or target different kinds users, there are lots of different distros around.\n\n\nWho created Linux?\n\n\nLinux was created in 1991 as the personal project of a Finnish student called Linus Torvalds, and since then it has grown quickly as other people (and, later, companies) joined in its development. Linux was originally written to work only on Intel CPUs, but since then has been made to work on dozens of different computer architectures - many phones run Linux, for example.\n\n\nWhy is Linux free?\n\n\nNearly all the Linux distributions in the world are free, meaning that they cost $0 to install and use on your computer. The reason for this is that all Linux distros take their software from the same pool - if one distro has a really awesome program, chances are 50 other distros also have exactly the same feature, so if a company tried to sell their version of Linux people would just go elsewhere.\n\n\nThe big upside to all this is that if you ever decide you don't like the direction one distro is taking, you can jump ship and try a different one - you'll find all the same software there ready for you.\n\n\nWhat's the difference between free software and open source?\n\n\nThe term Free Software was coined to mean software that came with freedoms that you otherwise would not have had. For example, if a program is Free Software it means you can download its source code, modify it, sell it and all sorts of other good things. But, a Free Software application doesn't necessarily have to have zero cost. This is where a lot of people get confused, so the most common explanation is  free as in speech, not as in beer. \n\n\nIf you're completely lost now, let us explain. You have free speech in this world. That doesn't mean you pay $0 for the right to talk, instead it means that you have the freedom to say what you want. Conversely, if I give you a free can of beer, that beer does have zero cost - the beer doesn't have any freedoms to express its opinion! So when people say Free Software they mean  free  as in  freedom , not  free  as in  cost . Yes, most Free Software does cost nothing, but it's not required.\n\n\nBecause of this mixup between free speech and free beer, another group of people came up with the term  open source . This was originally meant to have the same meaning - that someone could download the source code to a program and do what they want with it - but a lot of people have since misinterpreted that too!\n\n\nFor most people, Free Software and Open Source mean exactly the same thing. Open source has slightly looser restrictions in its definition, which means that a Free Software program is also open source, but an open source program is not necessarily Free Software.\n\n\nWhy is Linux open source?\n\n\nOne of Linux's many advantages is that it is developed by thousands of programmers around the world. Intel, IBM, Oracle, Google, HP, AMD, Nvidia, Dell, Cisco, Nokia, Motorola and more all help contribute to Linux precisely because it is open. Intel wants its CPUs, its graphics chips and its network cards to work perfectly on Linux, so it writes the programming code itself and gives it away as part of Linux. As a result, you can be sure you're getting the fastest and most stable experience around!\n\n\nThe other advantage to Linux being open is that no one vendor can control it - no one can pull it one direction, because everyone works together.\n\n\nWhat is the GPL?\n\n\nGPL stands for  General Public License , and is a software licence that lets people download, modify and distribute the source code to a program. The GPL is the most common licence used on Linux, which is why you get all the software at no cost and also why you can install it on as many machines as you want. There are lots of other licences in use, but the GPL is by far the most popular.\n\n\nWhy is Linux different?\n\n\nOne of the big advantages to Linux is its openness. If you choose one distro and find it doesn't suit you in the future, you're not stuck with it. Or if the developers behind it try to make changes that no one else likes, the users can go somewhere else to get their software - it's all shared! This is very different to the traditional software model used by both Microsoft and Apple where they (and only they!) can provide upgrades to their operating system, and if you find the latest version of Windows runs slowly there's not much you can do!\n\n\nWhat is The Linux Foundation?\n\n\nThe Linux Foundation is a nonprofit consortium dedicated to fostering the growth of Linux. Founded in 2000, it sponsors the work of Linux creator Linus Torvalds and is supported by leading companies and developers from around the world. The Linux Foundation promotes, protects and advances Linux by providing unified resources and services needed for open source to successfully compete with closed platforms.\n\n\nWhy do you call it GNU/Linux and not Linux?\n\n\nMost operating system distributions based on Linux as kernel are basically modified versions of the GNU operating system. We began developing GNU in 1984, years before Linus Torvalds started to write his kernel. Our goal was to develop a complete free operating system. Of course, we did not develop all the parts ourselves\u2014but we led the way. We developed most of the central components, forming the largest single contribution to the whole system. The basic vision was ours too.", 
            "title": "Common"
        }, 
        {
            "loc": "/ref/awesome-linux-resources/README/index.html", 
            "tags": "", 
            "text": "awesome-linux-resources\n\n\nuseful resources for linux begeinners\n\n\nUseful Linux tutorials, web sites and online books, you also can find more linux beginner tutorials from \nwww.linux6.com\n.\n\n\n\n\nawesome-linux-resources\n\n\nenv\n\n\ncmds\n\n\nshell\n\n\nDev tools\n\n\nlinux web sites\n  \n\n\nfree Linux books\n\n\nperl\n\n\npython\n\n\nother awesomes\n\n\n\n\nenv\n\n\n\n\nvim_tutorial\n\n\nanother-vim-tutorial\n\n\n\n\ncmds\n\n\n\n\nexplainshell.com\n\n\nbropages.org\n\n\ncomputerhope.com\n\n\nalvinalexander.com-cmds\n\n\ngrymoire.com-sed\n\n\ngrymoire.com-grep\n\n\ngrymoire.com-awk\n\n\nss64.com-cmds\n\n\n\n\nshell\n\n\n\n\nlearnshell.org\n  \n\n\nwikibooks.org-bash\n\n\nshell script cheat sheet\n\n\nlinuxcommand.org-learning_shell\n\n\nlinuxcommand.org-writing_shell\n\n\ncyberciti.biz-bash\n\n\ngrymoire.com-sh\n\n\nlinuxconfig.org-bash\n\n\nbash-hackers.org\n\n\ngrymoire.com-csh\n\n\ngrymoire.com-regex\n\n\nhyperpolyglot.org-script_compare\n\n\nwooledge.org-bash_fqa\n\n\nzshwiki.org\n\n\nbash by example\n\n\nadvanced bash\n  \n\n\n\n\nDev tools\n\n\n\n\nyolinux.com-gdb\n\n\ncprogramming.com-gdb\n\n\ngitref.org\n\n\nbacklogtool.com-git\n\n\noschina.net-git\n  \n\n\nyyz.us-git_for_kernel\n\n\ngit-scm.com\n  \n\n\ntry.github.io\n   \n\n\n\n\nLinux web sites\n\n\n\n\nlinuxtechi.com\n\n\ntecadmin.net\n\n\nxmodulo.com\n\n\nlinoxide.com\n\n\nlinux-tutorial.info\n\n\nlinuxdoc.org\n  \n\n\nthegeekstuff.com\n\n\nhowtoforge.com\n  \n\n\ntldp.org\n  \n\n\nmylinuxbook.com\n  \n\n\n\n\nfree Linux books\n\n\n\n\nlinux-101-hacks-ebook\n\n\nThe-linux-command-line\n\n\nadvanced-bash-scripting-guide\n  \n\n\nlinux-cookbook\n  \n\n\nlinux-network-admin-guide\n  \n\n\nhelp.ubuntu.com\n  \n\n\naskubuntu.com\n  \n\n\nubuntu-pocket-guide\n  \n\n\nlinux-ebooks\n  \n\n\ntech-books-for-free\n  \n\n\nonline-books\n  \n\n\nlinuxtopia-books\n  \n\n\nfreetechbooks.com\n  \n\n\n\n\nperl\n\n\n\n\nperl.org-tutorials\n\n\nperl-tutorial.org\n  \n\n\nmodernperlbooks.com\n  \n\n\n\n\npython\n\n\n\n\nlearnpython.org\n  \n\n\npythontutor.com\n  \n\n\nzetcode.com-python\n  \n\n\njava2s.com-python\n  \n\n\npython-guide.org\n\n\nfullstackpython.com\n  \n\n\n\n\nother awesomes\n\n\n\n\nawesome-shell\n\n\nawesome-dotfiles\n\n\nsysadmin\n\n\nawesome-devenv\n\n\nawesome-python\n\n\ngithub-cheat-sheet\n\n\ngit-cheat-sheet\n \n\n\nawesome-vim\n\n\nawesome-emacs\n\n\nawesome-free-books\n\n\nawesome\n\n\nawesome-awesome", 
            "title": "awesome_linux"
        }, 
        {
            "loc": "/ref/awesome-shell/README/index.html", 
            "tags": "", 
            "text": "Awesome Shell\n\n\nA curated list of awesome command-line frameworks, toolkits, guides and gizmos. Inspired by awesome-php. This awesome collection is also available on \nUnix-Shell.ZEEF.com\n.\n- \nAwesome Bash\n\n    - \nNetworking and Servers\n\n    - \nCustomization\n\n    - \nPackage Management and Frameworks\n\n    - \nWriting and Testing Scripts\n\n    - \nMultimedia\n\n    - \nGames\n\n    - \nUtilities and Tools\n\n- \nGuides\n\n- \nOther Awesome Lists\n\n\nNetworking and Servers\n\n\nSelf-hosted, lightweight servers and networking tools written in shell scripts.\n\n\n\n\nballs\n - Bash on Balls\n\n\nbashblog\n - A Bash script that handles blog posting\n\n\nbashttpd\n - A web server written in bash\n\n\nbitpocket\n -  DIY Dropbox  or  2-way directory (r)sync with proper deletion \n\n\ndokku\n - Docker powered mini-Heroku in around 100 lines of Bash\n\n\nDropbox-Uploader\n - Dropbox Uploader is a BASH script which can be used to upload, download, list or delete files from Dropbox\n\n\nhttpie\n - HTTPie is a command line HTTP client, a user-friendly cURL replacement\n\n\nngincat\n - Tiny bash HTTP server using netcat\n\n\npushblast\n - Get PushBullet notifications when a shell program exits\n\n\npushbullet-bash\n - Bash interface to the PushBullet API\n\n\nresty\n - Little command line REST client that you can use in pipelines\n\n\n\n\nCustomization\n\n\nCustom prompts, color themes, etc.\n\n\n\n\nawesome-zsh-plugins\n - A list of zsh plugins usable with antigen, dotzsh, oh-my-zsh \n prezto.\n\n\nbase16-shell\n - Base16 for Shells\n\n\nbash-git-prompt\n - An informative and fancy bash prompt for Git users\n\n\nbash-powerline\n - Powerline-style Bash prompt in pure Bash script\n\n\nbashstrap\n - A quick way to spruce up OSX terminal\n\n\nflatui-terminal-theme\n - Nicer colors for terminal\n\n\ngit-prompt\n - bash prompt with GIT, SVN and HG modules\n\n\nliquidprompt\n - A full-featured \n carefully designed adaptive prompt for Bash \n Zsh\n\n\npowerline-zsh\n - Powerline for Zsh\n\n\npure\n - Pretty, minimal and fast ZSH prompt\n\n\nsexy-bash-prompt\n - Bash prompt with colors, git statuses, and git branches\n\n\nzsh-autosuggestions\n - Fish-like autosuggestions for zsh\n\n\nzsh-git-prompt\n - Informative git prompt for zsh\n\n\nzsh-prompt-powerline\n - A ZSH prompt based on the powerline font from the popular vim plugin\n\n\nzsh-syntax-highlighting\n - Fish shell like syntax highlighting for zsh\n\n\nzsh-history-substring-search\n - An implementation of the Fish shell's history search feature for zsh.\n\n\n\n\nPackage Management and Frameworks\n\n\nTools for managing multiple shell configurations.\n\n\n\n\nantigen\n - A plugin manager for zsh, inspired by oh-my-zsh and vundle\n\n\nantigen-hs\n - A replacement for antigen optimized for a low overhead when starting up the shell.\n\n\nbash-it\n - A community bash framework\n\n\nbasher\n - A package manager for shell scripts\n\n\nbpkg\n - JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg\n\n\ndotzsh\n - dotzsh strives to be platform and version independent, some functionality may be lost when running under older versions of zsh, but it should degrade cleanly and allow you to use the same setup on multiple machines of differing OS's without problems.\n\n\nfresh\n - Keep your dotfiles fresh\n\n\nhomeshick\n - git dotfile synchronizer written in bash\n\n\noh-my-fish\n - Framework for managing your fish shell configuration inspired by Oh My ZSH\n\n\noh-my-zsh\n - A community-driven framework for managing your zsh configuration\n\n\nprezto\n - The configuration framework for Zsh\n\n\nvcsh\n - config manager based on Git\n\n\n\n\nWriting and Testing Scripts\n\n\nBoilerplate-like templates and systems to jump-start whatever script you are writing.\n\n\n\n\nbashful\n - A collection of libraries to simplify writing bash scripts\n\n\nbats\n - Bash Automated Testing System\n\n\ncomposure\n - Compose, document, version and organize your shell functions\n\n\ndispatch\n - A command line argument parser in 50 lines of portable shell script.\n\n\nshpec\n - A shell testing framework\n\n\nsub\n - a delicious way to organize programs\n\n\nts\n - a shell test script\n\n\n\n\nMultimedia\n\n\nTools for handling video and audio files.\n\n\n\n\nBeets\n - Music library manager and MusicBrainz tagger\n\n\nPiCAST\n - PiCAST turns your $35 Raspberry Pi in to a Chromecast like Device\n\n\n\n\nGames\n\n\nAll work and no play is a cruddy way to spend your day.\n\n\n\n\nbash2048\n - Bash implementation of 2048 game\n\n\nminesweeper\n - Bash implementation of minesweeper\n\n\nsedtris\n - Tetris in sed\n\n\nsed-scripts\n - Arkanoid and Sokoban written using sed\n\n\n\n\nUtilities and Tools\n\n\nOther various neat gizmos to make your terminal experience more enjoyable.\n\n\n\n\nAndroid-Kitchen\n - A text-based kitchen for Android ROM customization. Uses shell scripts and works with Cygwin/OS X/Linux\n\n\nansiweather\n - Weather in your terminal, with ANSI colors and Unicode symbols\n\n\nautoenv\n - Directory-based environments\n\n\nautojump\n - A cd command that learns - easily navigate directories from the command line\n\n\nbash-slugify\n - Command that converts filenames and directories to a web friendly format\n\n\nbashmarks\n - Directory bookmarks for the shell\n\n\nbyobu\n - Text-based window manager and terminal multiplexer\n\n\ncommacd\n - A faster way to move around in Bash\n\n\ncv\n - Linux tool to show progress for cp, rm, dd, ...\n\n\nfasd\n - Command-line productivity booster, offers quick access to files and directories\n\n\ngeeknote\n - Command line evernote client\n\n\ngit-extras\n - GIT utilities -- repo summary, repl, changelog population, author commit percentages and more\n\n\ngit-sh\n - A customized bash environment suitable for git work\n\n\nquick-secure\n - Quickly secure and harden UNIX/Linux systems\n\n\nhhighlighter\n - Colorize words in a command output\n\n\nhr\n - \nhr /\n for your terminal\n\n\nhstr\n - BASH History Suggest Box\n\n\njrnl\n - A simple command line journal application that stores your journal in a plain text file\n\n\nk\n - k is a zsh script to make directory listings more readable, adding git status, fileweight colors and rotting dates\n\n\nledger\n - Command line accounting\n\n\nlsp\n - An improved \nls\n, with file descriptions in plain language and intelligent file grouping\n\n\nmr\n - Multiple Respository management tool\n\n\npercol\n - Adds flavor of interactive filtering to the traditional pipe concept of UNIX shell\n\n\npretty-time-zsh\n - Convert seconds to a human readable string: \n165392\n \u2192 \n1d 21h 56m 32s\n\n\nrerun\n - A modular shell automation framework to organize your keeper scripts\n\n\nsejda\n - Command line manipulation of PDF documents (split, merge, rotate, convert to jpg, extract text, etc)\n\n\nsemver_bash\n - Semantic Versioning in Bash\n\n\nshellcheck\n - Static analysis tool for shell scripts\n\n\nshipit\n - Minimalistic SSH deployment\n\n\nslap\n - Sublime-like terminal-based text editor that runs on Node.js\n\n\nspark\n - \u2581\u2582\u2583\u2585\u2582\u2587 in your shell\n\n\nspot\n - Tiny file search utility\n\n\nsshrc\n - bring your .bashrc, .vimrc, etc. with you when you ssh\n\n\ntmux\n - amazing terminal multiplexer\n\n\ntransfer.sh\n \u2014 Quickly upload and share files from your shell\n\n\nv\n - z for vim.\n\n\nwemux\n - Multi-User Tmux Made Easy\n\n\nz\n - z is the new j, yo\n\n\nzsh-dwim\n - ZSH Do what I mean.\n\n\nzsh-notify\n - Desktop notifications for long running commands in zsh\n\n\nzshmarks\n - A port of Bashmarks (simple bookmarking plugin by Todd Werth) for oh-my-zsh\n\n\n\n\nGuides\n\n\n\n\nBash Hackers Wiki\n\n\nGreg Wooledge's (aka  greycat ) wiki\n.\n  Specifically \nBash Guide\n, \nBash FAQ\n and \nBash Pitfalls\n\n\nGoogle's Shell Style Guide\n\n\nThe Linux Documentation Project: Bash Programming - Intro/How-to\n\n\nThe Linux Documentation Project: Advanced Bash Scripting Guide\n\n\nWikiBooks: Bash Shell Scripting\n\n\nUse the Unofficial Bash Strict Mode (Unless You Looove Debugging)\n\n\n\n\nOther Awesome Lists\n\n\nOther amazingly awesome lists can be found in \nawesome-awesome\n and \nawesome-awesomeness\n.", 
            "title": "awesome_shell"
        }, 
        {
            "loc": "/ref/awesome-dotfiles/README/index.html", 
            "tags": "", 
            "text": "Awesome dotfiles\n\n\nA curated list of dotfiles resources. Inspired by the \nawesome\n list thing.\n\n\nArticles\n\n\nIntroduction\n\n\n\n\nGetting started with dotfiles\n\n\nManaging your dotfiles\n\n\nDotfiles Are Meant to Be Forked\n\n\nDotfile discovery\n\n\n\n\nTutorials\n\n\n\n\nSetting up a new (OS X) development machine: Part 3 - Dotfiles and custom SSH config\n\n\nSetting Up a Mac Dev Machine From Zero to Hero With Dotfiles\n\n\nUsing Git and GitHub to manage your dotfiles\n\n\nconf.d like directories for zsh/bash dotfiles\n\n\n\n\nShell startup\n\n\n\n\nShell startup scripts\n\n\nZsh/Bash startup files loading order\n\n\n\n\nUsing GNU Stow\n\n\n\n\nUsing GNU Stow to manage your dotfiles\n\n\nManaging dotfiles with GNU Stow\n\n\n\n\nUsing vcsh \n mr\n\n\n\n\nManage dotfiles Quickly and Effortlessly\n\n\nManaging dot-files with vcsh and myrepos\n\n\nManage dotfiles using vcsh and mr\n\n\n\n\nUsing Ansible\n\n\n\n\nDotfiles and dev tools provisioned by Ansible\n\n\nManage a development machine with Ansible\n\n\n\n\nDotfiles repos\n\n\nA collection of the most popular, well-maintained, and collaborative dotfiles repositories \n frameworks. Some projects contain just the dotfiles. Others go further by allowing you to easily add your own custom dotfiles, and/or including scripts to manage dotfiles/plugins.\n\n\nBash\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\nFocus\n\n\n\n\n\n\n\n\n\n\nBashstrap\n\n\nBootstrap for your terminal. A quick way to spruce up OSX terminal.\n\n\nOS X Terminal, prompt, iTerm.\n\n\n\n\n\n\nBash it\n\n\nCommunity bash framework.\n\n\nAutocompletion, themes, aliases, custom functions. Well-structured framework.\n\n\n\n\n\n\nMathias\u2019s dotfiles\n\n\n.files, including ~/.osx \u2014 sensible hacker defaults for OS X\n\n\nLots of goodness here, great collaborative community effort.\n\n\n\n\n\n\nMaximum Awesome\n\n\nConfig files for vim and tmux, by Square vimsters.\n\n\nVim, tmux. Built for Mac OS X.\n\n\n\n\n\n\n\n\nZsh\n\n\n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\nFocus\n\n\n\n\n\n\n\n\n\n\nthoughtbot dotfiles\n\n\nSet of vim, zsh, git, and tmux configuration files\n\n\nZsh, vim, tmux, git, homebrew. Uses \nrcm\n.\n\n\n\n\n\n\noh-my-zsh\n\n\nCommunity-driven framework for managing your zsh configuration.\n\n\nIncludes 120+ optional plugins (rails, git, OSX, hub, capistrano, brew, ant, macports, etc), over 120 themes to spice up your morning, and an auto-update tool.\n\n\n\n\n\n\nPrezto\n\n\nPrezto is the configuration framework for Zsh.\n\n\nEnriches the command line interface environment with sane defaults, aliases, functions, auto completion, and prompt themes.\n\n\n\n\n\n\nYADR\n\n\nThe best vim, git, zsh plugins and the cleanest vimrc you've ever seen\n\n\nHomebrew, zsh, git, vim, and more. Active repository.\n\n\n\n\n\n\nholman does dotfiles\n\n\nholman does dotfiles\n\n\nOrganized well around topics. Author wants it to work for everyone.\n\n\n\n\n\n\nantigen\n\n\nPlugin manager for zsh, inspired by oh-my-zsh and vundle.\n\n\nAntigen is a small set of functions that help you easily manage your shell (zsh) plugins, called bundles.\n\n\n\n\n\n\nEduardo's dotfiles\n\n\nThe first JavaScript-based dotfiles powered by Grunt.\n\n\nZsh, Node.js, Ruby, OS X defaults. Installable from npm.\n\n\n\n\n\n\n\n\nThere are many more great dotfiles repos out there, each containing their own inspiration and gems.\n\n\n\n\nSearch GitHub for  dotfiles \n\n\nGoogle for  dotfiles \n\n\nArchlinux collection\n\n\n\n\nTip: search for a filename on GitHub, e.g. \nsite:github.com .gitconfig\n.\n\n\nTools\n\n\n\n\nAnsible\n - Radically simple configuration-management, application deployment, task-execution, and multinode orchestration engine.\n\n\nbattleschool\n - Development environment provisioning using ansible\n\n\nBork\n - Bash DSL for config management\n\n\ndotbot\n - Tool that bootstraps your dotfiles\n\n\nfresh\n - Keep your dot files fresh. fresh is a tool to source shell configuration (aliases, functions, etc) from others into your own configuration files.\n\n\nGNU Stow\n - GNU Stow is a symlink farm manager which takes distinct packages of software and/or data located in separate directories on the filesystem, and makes them appear to be installed in the same place.\n\n\nhomeshick\n - Git dotfile synchronizer written in bash\n\n\nhomesick\n - Your home directory is your castle. Don't leave your dotfiles behind (\npost\n).\n\n\nmackup\n - Keep your application settings in sync (OS X/Linux)\n\n\nrcm\n - rc file (dotfile) management\n\n\nSuper User Stone\n - SUS manages the deployment of your configuration files (dotfiles)  (\npost\n).\n\n\nvcsh\n - Version Control System for $HOME, multiple Git repositories in $HOME\n\n\n\n\nOS X\n\n\n\n\nCider\n - Cider is a simple wrapper for Homebrew and Homebrew Cask that allows you to save your setup across different machines.\n\n\ndockutil\n - Command line tool for managing dock items\n\n\nkody\n - Dotfiles runner/manager written in node\n\n\nosxc\n - Set of playbook roles made for OS X configuration\n\n\n\n\nMiscellaneous\n\n\n\n\nA lesson in shortcuts\n - How the idea of  hidden  or  dot  files was born, by Rob Pike.\n\n\ndotfiles.github.io\n - Your unofficial guide to dotfiles on GitHub.\n\n\ndotfiles.org\n - dotfiles.org is a place to upload, download, and share your dotfiles.\n\n\nOS X Defaults\n - Centralized place for the awesome work started by \n@mathiasbynens on .osx\n.\n\n\n\n\nRelated Lists\n\n\n\n\nAwesome Shell\n - Curated list of awesome command-line frameworks, toolkits, guides and gizmos.\n\n\nAwesome Zsh Plugins\n - List of Zsh plugins suitable for use with oh-my-zsh, antigen \n Prezto.\n\n\nAwesome Dev Env\n - Curated list of awesome tools, resources and workflow tips making an awesome development environment.", 
            "title": "awesome_dotfiles"
        }, 
        {
            "loc": "/ref/awesome-devenv/README/index.html", 
            "tags": "", 
            "text": "Awesome Dev Env\n\n\nA curated list of awesome tools, resources and workflow tips making an awesome development environment.\n\n\nInspired by \nawesome-go\n, which was in turn inspired by \nawesome-python\n.\n\n\nContributing\n\n\nGuidelines\n tweaked and adapted from \nawesome-go\n - thanks!\n\n\nBut in short:\n\n\n\n\nList is alphabetically sorted\n\n\nIf you think an item shouldn't be here \nopen an issue\n\n\n\n\nMany thanks to everyone on the \ncontributor list\n :)\n\n\nContent\n\n\nNote: for an OS specific tool, please do your best to mark with \nOSX/WIN/*NIX/LIN\n\n\n\n\nAdmins\n\n\nBenchmarking\n\n\nData\n\n\nDiagnostics\n\n\nDesktop\n\n\nDotfiles\n\n\nEditors\n\n\nSublime Text\n\n\nVim\n\n\nGit\n\n\nPresentation\n\n\nText\n\n\nTerminal\n\n\nWorkflow\n\n\n\n\nAdmins\n\n\nTools to manage databases, permissions, etc.\n\n\n\n\nMongoHub\n - Native OSx client for mongo\n\n\nRobomongo\n - a cross platform Admin for MongoDB\n\n\n\n\nBenchmarking\n\n\nTools to benchmark your code or services\n\n\n\n\napachebench (ab)\n\n\nboom\n\n\nhttperf\n\n\nphantomas\n - website perf evaluation tool\n\n\nsiege\n\n\nVegeta\n\n\nwrk\n\n\nredis-faina\n Instagram's Redis counter/timing stats based on the MONITOR command\n\n\n\n\nData\n\n\nTools for handling online and offline data\n\n\n\n\ns3cmd\n - the S3 CLI tool for Amazon\n\n\n\n\nDiagnostics\n\n\nTools for checking diagnosing your system while you work\n\n\n\n\nglances\n\n\nnmon\n \n\n\n\n\nDesktop\n\n\nTools for improving and hacking around with your vanilla desktop\n\n\n\n\nAlfred\n - OSX productivity app \n/OSX/\n\n\nhydra\n - script your desktop\n  \n/OSX/\n\n\nKeycastr\n - show your keys while\n  presenting/casting \n/OSX/\n\n\n\n\nDotfiles\n\n\n\n\nZach Holman's\n - oh-my-zsh, osx, Zsh, vi, Ruby, Git, and more\n\n\nMathias Bynens's\n - .files, including ~/.osx \u2014 sensible hacker defaults for OS X\n\n\nThoughtbot's\n - A set of vim, zsh, git, and tmux configuration files\n\n\n\n\nEditors\n\n\nOnly awesome tools and addons for your favorite editor\n\n\nVim\n\n\n\n\nPowerline\n - improved status bar for your buffers.\n\n\nsnipmate\n - textual snippets compatiable with Textmate snippets.\n\n\nThe Ultimate Vim Distribution\n - spf13-vim is a distribution of vim plugins and resources for Vim, GVim and MacVim. \n\n\n\n\nSublime Text 3\n\n\n\n\nAdvancedNewFile\n - File creation plugin.\n\n\njsFormat\n - Javascript formatting.\n\n\nLiveReload\n - LiveReload plugin.\n\n\nMarkdownEditing\n - Markdown syntax understanding and good color schemes.\n\n\nPackage Control\n - The Sublime Text package manager.\n\n\nRubyTest\n - Plugin for running Ruby tests.\n\n\nSide Bar Enhancments\n - Enhancements to Sublime Text sidebar. Files and folders.\n\n\nSublime Git\n - Git Integration for Sublime.\n\n\nSublime Linter\n - Interactive code linting.\n\n\nTrailingSpaces\n - Highlight trailing spaces and delete them in a flash.\n\n\n\n\nIntellij\n\n\n\n\nkeymap\n - a hybrid Vim/ReSharper/Intellij keymap\n\n\n\n\nGit\n\n\nTools and addons for making an awesome Git experience\n\n\n\n\ngit-up\n - a better 'git pull'\n\n\ngit-sweep\n - safely removes branches that have been merged into the master\n\n\nhub\n - git CLI wrapper which makes working with GitHub easier\n\n\ngh\n - Fast GitHub command line client (hub port to Go)\n\n\nscm_breeze\n Streamline your git workflow\n\n\n\n\nPresentation\n\n\nTools for presenting your work\n\n\n\n\nremark\n - markdown based presentation on your browser\n\n\nreveal.js\n - markdown based presentation on your browser\n\n\ndeck.js\n - markdown based presentation on your browser\n\n\nvimdeck\n - present inside your Vim\n\n\n\n\nText\n\n\nTools for working with text files - search, replace, processing\n\n\n\n\nack\n - the Perl based\n  better-than-grep tool.\n\n\nag\n - A C based code-searching tool similar to ack, but faster\n\n\npeco\n - interactive filtering, like interactive Grep\n\n\n\n\nTerminal\n\n\nTools and addons for terminal and terminal work\n\n\n\n\nautojump\n - remembers your\n  folders and jump to them based on partial recall (e.g. \nj proj\n will jump\nto \n/home/Users/yourself/projects\n.\n\n\nfasd\n Command-line productivity booster, offers quick access to files and directories.\n\n\nhttpie\n A command line HTTP client, a user-friendly cURL replacement.\n\n\niTerm2\n - a great terminal replacement \n/OSX/\n\n\noh-my-zsh\n - the\n  incredible ZSH addon.\n\n\ntmux\n the awesome terminal multiplexer.\n\n\n\n\nWorkflow\n\n\nTools and addons which improve your daily workflow with code\n\n\n\n\nfswatch\n - a watch tool which\n  will emit FS events and you can run commands on demand with. Note -\n\nfswatch-run\n too.\n\n\nguard\n - FS watch tool with a huge ecosystem of plugins\n\n\nLiveReload\n - FS watch and preprocessor as a desktop app for \n/OSX/\n and \n/WIN/\n with complementary browser extensions\n\n\nguard-livereload\n - Guard plugin compatible with LiveReload's browser extensions\n\n\nwatchman\n - Facebook's better\n  \nwatch\n - note it works as a service.", 
            "title": "awesome_devenv"
        }, 
        {
            "loc": "/ref/awesome-sysadmin/README/index.html", 
            "tags": "", 
            "text": "Awesome Sysadmin\n\n\nA curated list of amazingly awesome open source sysadmin resources inspired by \nAwesome PHP\n\n\n\n\nAwesome Sysadmin\n\n\nBackups\n\n\nCloning\n\n\nCloud Computing\n\n\nCloud Storage\n\n\nCode Review\n\n\nCollaborative Software\n\n\nConfiguration Management Database\n\n\nConfiguration Management\n\n\nContinuous Integration \n Continuous Deployment\n\n\nDistributed Filesystems\n\n\nDNS\n\n\nHosting Control Panels\n\n\nIMAP/POP3\n\n\nIT Asset Management\n\n\nLDAP\n\n\nLog Management\n\n\nMonitoring\n\n\nMetric \n Metric Collection\n\n\nNetwork Configuration Management\n\n\nNewsletter\n\n\nNoSQL\n\n\nPackaging\n\n\nQueuing\n\n\nRDBMS\n\n\nSecurity\n\n\nService Discovery\n\n\nSMTP\n\n\nSoftware Containers\n\n\nSSH\n\n\nStatistics\n\n\nTicketing systems\n\n\nTroubleshooting\n\n\nProject Management\n\n\nVersion control\n\n\nVirtualization\n\n\nVPN\n\n\nXMPP\n\n\nWeb\n\n\nWebmails\n\n\nWikis\n\n\nResources\n\n\nBlogs\n\n\nBooks\n\n\nEditors\n\n\nNewsletters\n\n\nRepositories\n\n\nWebsites\n\n\nContributing\n\n\n\n\nBackups\n\n\nBackup software.\n\n\n\n\nAmanda\n - Client-server model backup tool.\n\n\nBacula\n - Another Client-server model backup tool.\n\n\nBackupninja\n - Lightweight, extensible meta-backup system.\n\n\nBackuppc\n - Client-server model backup tool with file pooling scheme.\n\n\nBurp\n - Network backup and restore program.\n\n\nDuplicity\n - Encrypted bandwidth-efficient backup using the rsync algorithm.\n\n\nLsyncd\n - Watches a local directory trees for changes, and then spawns a process to synchronize the changes. Uses rsync by default.\n\n\nRsnapshot\n - Filesystem Snapshotting Utility.\n\n\nSafeKeep\n - Centralized pull-based backup using \nrdiff-backup\n.\n\n\nTarSnap\n - Secure backup service with an open-source client.\n\n\nUrBackup\n - Another client-server backup system.\n\n\nDREBS\n - AWS EBS backup script that supports strategies.\n\n\n\n\nCloning\n\n\nCloning software.\n\n\n\n\nClonezilla\n - Partition and disk imaging/cloning program.\n\n\nFog\n - Another computer cloning solution.\n\n\nRedo Backup\n - Easy Backup, Recovery and Restore.\n\n\n\n\nCloud Computing\n\n\n\n\nAppScale\n - Open source cloud software with Google App Engine compatibility.\n\n\nArchipel\n - Manage and supervise virtual machines using Libvirt.\n\n\nCloudStack\n - Cloud computing software for creating, managing, and deploying infrastructure cloud services.\n\n\nCobbler\n - Cobbler is a Linux installation server that allows for rapid setup of network installation environments.\n\n\nEucalyptus\n - Open source private cloud software with AWS compatibility.\n\n\nMesos\n - Develop and run resource-efficient distributed systems.\n\n\nOpenNebula\n - An user-driven cloud management platform for sysadmins and devops.\n\n\nOpenStack\n - Open source software for building private and public clouds.\n\n\nThe Foreman\n - Foreman is a complete lifecycle management tool for physical and virtual servers. FOSS.\n\n\n\n\nCloud Orchestration\n\n\n\n\nBOSH\n -  IaaS orchestration platform originally written for deploying and managing Cloud Foundry PaaS, but also useful for general purpose distributed systems.\n\n\nCloudify\n -  Open source TOSCA-based cloud orchestration software platform written in Python and YAML.\n\n\nJuju\n - Cloud orechestration tool which manages services as charms, YAML configuration and deployment script bundles.\n\n\nMCollective\n - Ruby framework to manage server orchestration, developed by Puppet labs.\n\n\nOvercast\n - Deploy VMs across different cloud providers, and run commands and scripts across any or all of them in parallel via SSH.\n\n\nRundeck\n - Simple orchestration tool.\n\n\nSalt\n - It's written in Python.\n\n\n\n\nCloud Storage\n\n\n\n\ngit-annex assistant\n - A synchronised folder on each of your OSX and Linux computers, Android devices, removable drives, NAS appliances, and cloud services.\n\n\nownCloud\n - Provides universal access to your files via the web, your computer or your mobile devices.\n\n\nSeafile\n - Another Open Source Cloud Storage solution.\n\n\nSparkleShare\n - Provides cloud storage and file synchronization services. By default, it uses Git as a storage backend.\n\n\nSwift\n - A highly available, distributed, eventually consistent object/blob store.\n\n\nSyncthing\n - Open Source system for private, encrypted and authenticated distrobution of data.\n\n\n\n\nCode Review\n\n\nWeb Based collaborative code review system.\n\n\n\n\nGerrit\n - Based on the Git version control, it facilitates software developers to review modifications to the source code and approve or reject those changes.\n\n\nReview Board\n - Available as free software uner the MIT License.\n\n\n\n\nCollaborative Software\n\n\nCollaborative software or groupware suites.\n\n\n\n\nCitadel/UX\n - Collaboration suite (messaging and groupware) that is descended from the Citadel family of programs.\n\n\nEGroupware\n - Groupware software written in PHP.\n\n\nHorde Groupware\n - PHP based collaborative software suite that includes email, calendars, wikis, time tracking and file management.\n\n\nKolab\n - Another groupware suite.\n\n\nSOGo\n - Collaborative software server with a focus on simplicity and scalability.\n\n\nZimbra\n - Collaborative software suite, that includes an email server and web client.\n\n\n\n\nConfiguration Management Database\n\n\nConfiguration management database (CMDB) software.\n\n\n\n\ni-doit\n - Open Source IT Documentation and CMDB.\n\n\niTop\n - A complete open source, ITIL, web based service management tool.\n\n\nRalph\n - Asset management, DCIM and CMDB system for large Data Centers as well as smaller LAN networks.\n\n\nClusto\n - Helps you keep track of your inventory, where it is, how it's connected, and provides an abstracted interface for interacting with the elements of the infrastructure.\n\n\n\n\nConfiguration Management\n\n\nConfiguration management tools.\n\n\n\n\nAnsible\n -  It's written in Python and manages the nodes over SSH.\n\n\nCFEngine\n - Lightweight agent system. Configuration state is specified via a declarative language.\n\n\nChef\n - It's written in Ruby and Erlang and uses a pure-Ruby DSL.\n\n\nFabric\n - Python library and cli tool for streamlining the use of SSH for application deployment or systems administration tasks.\n\n\nPallet\n - Infrastructure definition, configuration and management via a Clojure DSL.\n\n\nPuppet\n - It's written in Ruby and uses Puppet's declarative language or a Ruby DSL.\n\n\nSalt\n - It's written in Python.\n\n\nSlaughter\n - It's written in Perl.\n\n\n\n\nContinuous Integration \n Continuous Deployment\n\n\nContinuous integration/deployment software.\n\n\n\n\nBuildbot\n - Python-based toolkit for continuous integration.\n\n\nDrone\n - Continuous integration server built on Docker and configured using YAML files.\n\n\nGitLab CI\n - Based off of ruby. They also provide GitLab, which manages git repositories.\n\n\nGo\n - Open source continuous delivery server.\n\n\nJenkins\n - An extendable open source continuous integration server.\n\n\nVlad the Deployer\n - Deployment automation.\n\n\n\n\nDistributed Filesystems\n\n\nNetwork distributed filesystems.\n\n\n\n\nCeph\n - Distributed object store and file system.\n\n\nDRBD\n - Disributed Replicated Block Device.\n\n\nLeoFS\n - Unstructured object/data storage and a highly available, distributed, eventually consistent storage system.\n\n\nGlusterFS\n - Scale-out network-attached storage file system.\n\n\nHDFS\n - Distributed, scalable, and portable file-system written in Java for the Hadoop framework.\n\n\nLustre\n -  A type of parallel distributed file system, generally used for large-scale cluster computing.\n\n\nMooseFS\n - Fault tolerant, network distributed file system.\n\n\nMogileFS\n - Application level, network distributed file system.\n\n\nOpenAFS\n - Distributed network file system with read-only replicas and multi-OS support.\n\n\nTahoeLAFS\n - secure, decentralized, fault-tolerant, peer-to-peer distributed data store and distributed file system.\n\n\nXtreemFS\n - XtreemFS is a fault-tolerant distributed file system for all storage needs.\n\n\n\n\nDNS\n\n\nDNS servers.\n\n\n\n\nBind\n - The most widely used name server software.\n\n\ndjbdns\n - A collection of DNS applications, including tinydns.\n\n\nDesignate\n - DNS REST API that support several DNS servers as its backend.\n\n\ndnsmasq\n - A lightweight service providing DNS, DHCP and TFTP services to small-scale networks.\n\n\nKnot\n - High performance authoritative-only DNS server.\n\n\nNSD\n - Authoritative only, high performance, simple name server.\n\n\nPowerDNS\n - DNS server with a variety of data storage back-ends and load balancing features.\n\n\nUnbound\n - Validating, recursive, and caching DNS resolver.\n\n\nYadifa\n - Lightweight authoritative Name Server with DNSSEC capabilities powering the .eu top-level domain.\n\n\n\n\nHosting Control Panels\n\n\nWeb hosting control panels\n\n\n\n\nAjenti\n - Control panel for Linux and BSD.\n\n\nFeathur\n - VPS Provisioning and Management Software.\n\n\nISPConfig\n - Hosting control panel for Linux.\n\n\nVestaCP\n - Hosting panel for Linux but with Nginx.\n\n\nVirtualmin\n - Control panel for Linux based on webmin.\n\n\nZPanel\n - Control panel for Linux, BSD, and Windows.\n\n\n\n\nIMAP/POP3\n\n\nIMAP/POP3 mail servers.\n\n\n\n\nCourier IMAP/POP3\n - Fast, scalable, enterprise IMAP and POP3 server.\n\n\nCyrus IMAP/POP3\n - Intended to be run on sealed servers, where normal users are not permitted to log in.\n\n\nDovecot\n - IMAP and POP3 server written primarily with security in mind.\n\n\nQpopper\n - One of the oldest and most popular server implementations of POP3.\n\n\n\n\nIT Asset Management\n\n\nIT Assets Management software.\n\n\n\n\nGLPI\n - Information Resource-Manager with an additional Administration Interface.\n\n\nOCS Inventory NG\n - Enables users to inventory their IT assets.\n\n\nRackTables\n - Datacenter and server room asset management like document hardware assets, network addresses, space in racks, networks configuration.\n\n\nRalph\n - Asset management, DCIM and CMDB system for large Data Centers as well as smaller LAN networks.\n\n\nSnipe IT\n - Asset \n license management software.\n\n\n\n\nLDAP\n\n\nLDAP servers.\n\n\n\n\n389 Directory Server\n - Developed by Red Hat.\n\n\nApache Directory Server\n - Apache Software Foundation project written in Java.\n\n\nFusion Directory\n - Improve the Management of the services and the company directory based on OpenLDAP.\n\n\nOpenDJ\n - Fork of OpenDS.\n\n\nOpenDS\n - Another directory server written in Java.\n\n\nOpenLDAP\n - Developed by the OpenLDAP Project.\n\n\n\n\nLog Management\n\n\nLog management tools: collect, parse, visualize ...\n\n\n\n\nElasticsearch\n - A Lucene Based Document store mainly used for log indexing, storage and analysis.\n\n\nFluentd\n - Log Collector and Shipper.\n\n\nFlume\n - Distributed log collection and aggregation system.\n\n\nGraylog2\n - Pluggable Log and Event Analysis Server with Alerting options.\n\n\nHeka\n - Stream processing system which may be used for log aggregation.\n\n\nKibana\n - Visualize logs and time-stamped data.\n\n\nLogstash\n - Tool for managing events and logs.\n\n\nOctopussy\n - Log Management Solution (Visualize / Alert / Report).\n\n\n\n\nMonitoring\n\n\nMonitoring software.\n\n\n\n\nCacti\n - Web-based network monitoring and graphing tool.\n\n\nCabot\n - Monitoring and alerts, similar to PagerDuty.\n\n\ncheck_mk\n - Collection of extensions for Nagios.\n\n\nDash\n - A low-overhead monitoring web dashboard for a GNU/Linux machine.\n\n\nIcinga\n - Fork of Nagios.\n\n\nLibreNMS\n - fork of Observium.\n\n\nMonit\n - Small Open Source utility for managing and monitoring Unix systems.\n\n\nMunin\n - Networked resource monitoring tool.\n\n\nNaemon\n - Network monitoring tool based on the Nagios 4 core with performance enhancements and new features.\n\n\nNagios\n - Computer system, network and infrastructure monitoring software application.\n\n\nObservium\n - SNMP monitoring for servers and networking devices. Runs on linux.\n\n\nOMD\n - The Open Monitoring Distribution.\n\n\nOpsview\n - Based on Nagios 4, Opsview Core is ideal for small IT and test environments.\n\n\nRiemann\n - Flexible and fast events processor allowing complex events/metrics analysis.\n\n\nSensu\n - Open source monitoring framework.\n\n\nSentry\n - Application monitoring, event logging and aggregation.\n\n\nShinken\n - Another monitoring framework.\n\n\nThruk\n - Multibackend monitoring webinterface with support for Naemon, Nagios, Icinga and Shinken.\n\n\nXymon\n - Network monitoring inspired by Big Brother.\n\n\nZabbix\n - Enterprise-class software for monitoring of networks and applications.\n\n\nZenoss\n - Application, server, and network management platform based on Zope.\n\n\n\n\nMetric \n Metric Collection\n\n\nMetric gathering and display software.\n\n\n\n\nCollectd\n - System statistic collection daemon.\n\n\nCollectl\n - High precision system performance metrics collecting tool.\n\n\nDashing\n - Ruby gem that allows for rapid statistical dashboard development. An all HTML5 approach allows for big screen displays in data centers or conference rooms.\n\n\nDiamond\n - Python based statistic collection daemon.\n\n\nGanglia\n - High performance, scalable RRD based monitoring for grids and/or clusters of servers. Compatible with Graphite using a single collection process.\n\n\nGrafana\n - A Graphite \n InfluxDB Dashboard and Graph Editor.\n\n\nGraphite\n - Open source scaleable graphing server.\n\n\nInfluxDB\n - Open source distributed time series database with no external dependencies.\n\n\nKairosDB\n - Fast distributed scalable time series database, fork of OpenTSDB 1.x.\n\n\nOpenTSDB\n - Store and server massive amounts of time series data without losing granularity.\n\n\nRRDtool\n - Open source industry standard, high performance data logging and graphing system for time series data.\n\n\nStatsd\n - Application statistic listener.\n\n\n\n\nNetwork Configuration Management\n\n\nNetwork configuration management tools.\n\n\n\n\nGesti\u00f3IP\n - An automated web based IPv4/IPv6 IP Address Management tool.\n\n\nRANCID\n - Monitors network device's configurarion and maintain history of changes.\n\n\nrConfig\n - Another network device configuration management tool.\n\n\n\n\nNewsletters\n\n\nNewsletter software.\n\n\n\n\nDadaMail\n - Mailing List Manager, written in Perl.\n\n\nphpList\n - Newsletter manager written in PHP.\n\n\n\n\nNoSQL\n\n\nNoSQL databases.\n\n\n\n\nColumn-Family\n\n\nApache HBase\n - Hadoop database, a distributed, big data store.\n\n\nCassandra\n - Distributed DBMS designed to handle large amounts of data across many servers.\n\n\nHypertable\n - C++ based BigTable-like DBMS, communicates through Thrift and runs either as stand-alone or on distributed FS such as Hadoop.\n\n\nDocument Store\n\n\nCouchDB\n - Ease of use, with multi-master replication document-oriented database system.\n\n\nElasticSearch\n - Java based database, popular with log aggregation, and email archiving projects.\n\n\nMongoDB\n - Another document-oriented database system.\n\n\nRavenDB\n - Document based database with ACID/Transactional features.\n\n\nRethinkDB\n - Open source distributed document store database, focuses on JSON.\n\n\nGraph\n\n\nFlockDB\n - Twitter's distributed, fault-tolerant graph database.\n\n\nNeo4j\n - Open source graph database.\n\n\nKey-Value\n\n\nLevelDB\n - Google's high performance key/value database.\n\n\nRedis\n - Networked, in-memory, key-value data store with optional durability.\n\n\nRiak\n - Another fault-tolerant key-value NoSQL database.\n\n\n\n\nComparison of NoSQL servers: http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis\n\n\nPackaging\n\n\n\n\nfpm\n - Versatile multi format package creator.\n\n\nomnibus-ruby\n - Full stack, cross distro packaging software (Ruby).\n\n\npackman\n - Full stack, cross distro packaging software (Python).\n\n\ntito\n - Builds RPMs for git-based projects.\n\n\n\n\nQueuing\n\n\n\n\nBeanstalkD\n - A simple, fast work queue.\n\n\nGearman\n - Fast multi-language queuing/job processing platform.\n\n\nNSQ\n - A realtime distributed messaging platform.\n\n\nRabbitMQ\n - Robust, fully featured, cross distro queuing system.\n\n\nZeroMQ\n - Lightweight queuing system.\n\n\n\n\nRDBMS\n\n\nRelational DBMS.\n\n\n\n\nFirebird\n - True universal open source database.\n\n\nGalera\n - Galera Cluster for MySQL is an easy-to-use high-availability solution with high system up-time, no data loss, and scalability for future growth.\n\n\nMariaDB\n - Community-developed fork of the MySQL.\n\n\nMySQL\n - Most popular RDBMS server.\n\n\nPercona Server\n - Enhanced, drop-in MySQL replacement.\n\n\nPostgreSQL\n - Object-relational database management system (ORDBMS).\n\n\nPostgreSQL-XL\n - Scalable Open Source PostgreSQL-based database cluster.\n\n\nSQLite\n - Library that implements a self-contained, serverless, zero-configuration, transactional SQL DBS.\n\n\n\n\nSecurity\n\n\nSecurity tools.\n\n\n\n\nDenyhosts\n - Thwart SSH dictionary based attacks and brute force attacks.\n\n\nFail2Ban\n - Scans log files and takes action on IPs that show malicious behavior.\n\n\nSpamAssassin\n - A powerful and popular email spam filter employing a variety of detection techniques.\n\n\n\n\nService Discovery\n\n\n\n\nConsul\n - Consul is a tool for service discovery, monitoring and configuration.\n\n\nDoozerd\n - Doozer is a highly-available, completely consistent store for small amounts of extremely important data.\n\n\nZooKeeper\n - ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.\n\n\n\n\nSMTP\n\n\nSMTP servers.\n\n\n\n\nExim\n - Message transfer agent (MTA) developed at the University of Cambridge.\n\n\nHaraka\n - A high-performance, pluginable SMTP server written in JavaScript.\n\n\nMailCatcher\n - Ruby gem that deploys a simply SMTP MTA gateway that accepts all mail and displays in web interface. Useful for debugging or development.\n\n\nMaildrop\n - Open Source disposable email SMTP server, also useful for development.\n\n\nOpenSMTPD\n - Secure SMTP server implementation from the OpenBSD project.\n\n\nPostfix\n - Fast, easy to administer, and secure Sendmail replacement.\n\n\nQmail\n - Secure Sendmail replacement.\n\n\nSendmail\n - Message transfer agent (MTA).\n\n\n\n\nSoftware Containers\n\n\nOperating system\u2013level virtualization.\n\n\n\n\nBitnami\n - Produces open source installers or software packages for web applications and development stacks as well as virtual appliances.\n\n\nDocker\n - Open platform for developers and sysadmins to build, ship, and run distributed applications.\n\n\nOpenVZ\n - Container-based virtualization for Linux.\n\n\n\n\nSSH\n\n\nSSH tools.\n\n\n\n\nautossh\n - Automatically respawn ssh session after network interruption.\n\n\nCluster SSH\n - Controls a number of xterm windows via a single graphical console.\n\n\nDSH\n - Dancer's shell / distributed shell - Wrapper for executing multiple remote shell commands from one command line.\n\n\nMosh\n - The mobile shell.\n\n\nparallel-ssh\n - Provides parallel versions of OpenSSH and related tools.\n\n\nSSH Power Tool\n - Execute commands and upload files to many servers simultaneously without using pre-shared keys.\n\n\n\n\nStatistics\n\n\nAnalytics software.\n\n\n\n\nAnalog\n - The most popular logfile analyser in the world.\n\n\nGoAccess\n - Open source real-time web log analyzer and interactive viewer that runs in a terminal.\n\n\nPiwik\n - Free and open source web analytics application.\n\n\nWebalizer\n - Fast, free web server log file analysis program.\n\n\n\n\nTicketing systems\n\n\nWeb-based ticketing system.\n\n\n\n\nBugzilla\n - General-purpose bugtracker and testing tool originally developed and used by the Mozilla project.\n\n\nCerb\n - A group-based e-mail management project built with a commercial open source license.\n\n\nFlyspray\n - Web-based bug tracking system written in PHP.\n\n\nMantisBT\n - Another web-based bug tracking system.\n\n\nosTicket\n - Open source support ticket system.\n\n\nOtrs\n - A free and open-source trouble ticket system software package that a company, organization, or other entity can use to assign tickets to incoming queries and track further communications about them.\n\n\nRequest Tracker\n - Ticket-tracking system written in Perl.\n\n\nTheBugGenie\n - Open source ticket system with extremely complete users rights granularity.\n\n\n\n\nTroubleshooting\n\n\nTroubleshooting Tools.\n\n\n\n\nmitmproxy\n - A Python tool used for intercepting, viewing and modifying network traffic. Invaluable in troubleshooting certain problems.\n\n\nSysdig\n - Capture system state and activity from a running Linux instance, then save, filter and analyze.\n\n\nWireshark\n - The world's foremost network protocol analyzer.\n\n\n\n\nProject Management\n\n\nWeb-based project management and bug tracking systems.\n\n\n\n\nChiliProject\n - Fork of Redmine.\n\n\nGitBucket\n Clone of GitHub written in Scala; single jar install.\n\n\nGitLab\n - Clone of GitHub written in Ruby.\n\n\nGogs\n - Written in Go.\n\n\nOpenProject\n - Project collaboration with open source.\n\n\nPhabricator\n Written in PHP.\n\n\nRedmine\n - Written in ruby on rails.\n\n\nThe Bug Genie\n - Written in PHP.\n\n\nTrac\n - Written in python.\n\n\n\n\nVersion control\n\n\nSoftware versioning and revision control.\n\n\n\n\nFossil\n - Distributed version control with built-in wiki and bug tracking.\n\n\nGit\n - Distributed revision control and source code management (SCM) with an emphasis on speed.\n\n\nGNU Bazaar\n - Distributed revision control system sponsored by Canonical.\n\n\nMercurial\n - Another distributed revision control.\n\n\nSubversion\n - Client-server revision control system.\n\n\n\n\nVirtualization\n\n\nVirtualization software.\n\n\n\n\nGaneti\n - Cluster virtual server management software tool built on top of KVM and Xen.\n\n\nKVM\n - Linux kernel virtualization infrastructure.\n\n\noVirt\n - Manages virtual machines, storage and virtual networks.\n\n\nPacker\n - A tool for creating identical machine images for multiple platforms from a single source configuration.\n\n\nVagrant\n - Tool for building complete development environments.\n\n\nVirtualBox\n - Virtualization product from Oracle Corporation.\n\n\nXen\n - Virtual machine monitor for 32/64 bit Intel / AMD (IA 64) and PowerPC 970 architectures.\n\n\n\n\nVPN\n\n\nVPN software.\n\n\n\n\nOpenVPN\n - Uses a custom security protocol that utilizes SSL/TLS for key exchange.\n\n\nPritunl\n - OpenVPN based solution. Easy to set up.\n\n\nSoftEther\n - Multi-protocol software VPN with advanced features\n\n\nsshuttle\n - Poor man's VPN.\n\n\nstrongSwan\n - Complete IPsec implementation for Linux.\n\n\ntinc\n - Distributed p2p VPN.\n\n\n\n\nXMPP\n\n\nXMPP servers.\n\n\n\n\nejabberd\n - XMPP instant messaging server written in Erlang/OTP.\n\n\nMetronome IM\n - Fork of Prosody IM.\n\n\nMongooseIM\n - Fork of ejabberd.\n\n\nOpenfire\n - Real time collaboration (RTC) server.\n\n\nProsody IM\n - XMPP server written in Lua.\n\n\nTigase\n - XMPP server implementation in Java.\n\n\n\n\nWebmails\n\n\nWebmail applications.\n\n\n\n\nMailpile\n - A modern, fast web-mail client with user-friendly encryption and privacy features.\n\n\nRoundcube\n - Browser-based IMAP client with an application-like user interface.\n\n\n\n\nWeb\n\n\nWeb servers.\n\n\n\n\nApache\n - Most popular web server.\n\n\nCherokee\n - Lightweight, high-performance web server/reverse proxy.\n\n\nLighttpd\n - Web server more optimized for speed-critical environments.\n\n\nNginx\n - Reverse proxy, load balancer, HTTP cache, and web server.\n\n\nuWSGI\n - The uWSGI project aims at developing a full stack for building hosting services.\n\n\n\n\nWeb Performance\n\n\n\n\nHAProxy\n - Software based load Balancing, SSL offloading and performance optimization, compression, and general web routing.\n\n\nVarnish\n - HTTP based web application accelerator focusing on optimizing caching and compression.\n\n\n\n\nWikis\n\n\nWiki software.\n\n\n\n\nDokuWiki\n - Simple to use and highly versatile wiki that doesn't require a database.\n\n\nGollum\n - A simple, Git-powered wiki with a sweet API and local frontend.\n\n\nikiwiki\n - A wiki compiler.\n\n\nMediawiki\n - Used to power Wikipedia.\n\n\nMoinMoin\n - An advanced, easy to use and extensible WikiEngine with a large community of users.\n\n\n\u014clelo Wiki\n - A a wiki that stores pages in a Git repository.\n\n\nTiddlyWiki\n - Complete interactive wiki in JavaScript.\n\n\n\n\nResources\n\n\nVarious resources, such as books, websites and articles, for improving your skills and knowledge.\n\n\nBlogs\n\n\n\n\nCode as Craft\n - Etsy's Ops blog, lots of technical posts.\n\n\nDevOpsGuys\n - Devops consultants who blog about operations.\n\n\nRackspace Developers\n - Slightly biased blog with lots of Devops Topics.\n\n\n\n\nBooks\n\n\nSysadmin related books.\n\n\n\n\nThe Linux Command Line\n - A book about the Linux command line by William Shotts.\n\n\nThe Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win\n - How DevOps techniques can fix the problems that happen in IT organizations.\n\n\nThe Practice of System and Network Administration\n - The first and second editions describes the best practices of system and network administration, independent of specific platforms or technologies.\n\n\nThe Visible Ops Handbook: Implementing ITIL in 4 Practical and Auditable Steps\n - Is a methodology designed to jumpstart implementation of controls and process improvement.\n\n\nUNIX and Linux System Administration Handbook\n - Approaches system administration from a practical perspective.\n\n\n\n\nEditors\n\n\nOpen source code editors.\n\n\n\n\nAtom\n - A hackable text editor from Github.\n\n\nBrackets\n - Open source code editor for web designers and front-end developers.\n\n\nEclipse\n - IDE written in Java with an extensible plug-in system.\n\n\nGeany\n - GTK2 text editor.\n\n\nGNU Emacs\n - An extensible, customizable text editor-and more.\n\n\nHaroopad\n - Markdown editor with live preview.\n\n\nICEcoder\n - Code editor awesomeness, built with common web languages.\n\n\njotgit\n - Git-backed real-time collaborative code editing.\n\n\nLight Table\n - The next generation code editor.\n\n\nLime\n - Aims to provide an open source solution to Sublime Text\n\n\nTextMate\n - A graphical text editor for OS X.\n\n\nVim\n - A highly configurable text editor built to enable efficient editing.\n\n\n\n\nNewsletters\n\n\n\n\nServers for Hackers\n - Newsletter for programmers who find themselves needing to know their way around a server.\n\n\n\n\nRepositories\n\n\nSoftware package repositories.\n\n\n\n\nDotdeb\n - Repository with LAMP updated packages for Debian.\n\n\nRemi\n - Repository with LAMP updated packages for RHEL/Centos/Fedora.\n\n\n\n\nWebsites\n\n\nUseful sysadmin related websites.\n\n\n\n\nOps School\n - Comprehensive program that will help you learn to be an operations engineer.\n\n\nDigital Ocean Tutorials\n - A surprisingly vast resource for getting the basics of certain applications, tools, or even systems administration topics.\n\n\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.", 
            "title": "awesome_sysadmin"
        }, 
        {
            "loc": "/ref/awesome-python/README/index.html", 
            "tags": "", 
            "text": "Awesome Python\n\n\nA curated list of awesome Python frameworks, libraries and software. Inspired by \nawesome-php\n.\n\n\n\n\nAwesome Python\n\n\nEnvironment Management\n\n\nPackage Management\n\n\nPackage Repositories\n\n\nDistribution\n\n\nBuild Tools\n\n\nInteractive Interpreter\n\n\nFiles\n\n\nDate and Time\n\n\nText Processing\n\n\nSpecific Formats Processing\n\n\nNatural Language Processing\n\n\nDocumentation\n\n\nConfiguration\n\n\nCommand-line Tools\n\n\nDownloader\n\n\nImagery\n\n\nOCR\n\n\nAudio\n\n\nVideo\n\n\nGeolocation\n\n\nHTTP\n\n\nDatabase\n\n\nDatabase Drivers\n\n\nORM\n\n\nWeb Frameworks\n\n\nPermissions\n\n\nCMS\n\n\nE-commerce\n\n\nRESTful API\n\n\nAuthentication\n\n\nTemplate Engine\n\n\nQueue\n\n\nSearch\n\n\nNews Feed\n\n\nAsset Management\n\n\nCaching\n\n\nEmail\n\n\nInternationalization\n\n\nURL Manipulation\n\n\nHTML Manipulation\n\n\nWeb Crawling\n\n\nWeb Content Extracting\n\n\nForms\n\n\nData Validation\n\n\nAnti-spam\n\n\nTagging\n\n\nAdmin Panels\n\n\nStatic Site Generator\n\n\nProcesses and Threads\n\n\nConcurrency and Networking\n\n\nWebSocket\n\n\nWSGI Servers\n\n\nRPC Servers\n\n\nCryptography\n\n\nGUI\n\n\nGame Development\n\n\nLogging\n\n\nTesting\n\n\nCode Analysis and Linter\n\n\nDebugging Tools\n\n\nScience and Data Analysis\n\n\nData Visualization\n\n\nComputer Vision\n\n\nMachine Learning\n\n\nFunctional Programming\n\n\nMapReduce\n\n\nThird-party APIs\n\n\nDevOps Tools\n\n\nJob Scheduler\n\n\nForeign Function Interface\n\n\nHigh Performance\n\n\nNetwork Virtualization and SDN\n\n\nHardware\n\n\nCompatibility\n\n\nMiscellaneous\n\n\nAlgorithms and Design Patterns\n\n\nEditor Plugins\n\n\n\n\n\n\nResources\n\n\nWebsites\n\n\nWeekly\n\n\nTwitter\n\n\n\n\n\n\nOther Awesome Lists\n\n\nContributing\n\n\n\n\n\n\nEnvironment Management\n\n\nLibraries for Python version and environment management.\n\n\n\n\npyenv\n - Simple Python version management.\n\n\nvirtualenv\n - A tool to create isolated Python environments.\n\n\nvirtualenvwrapper\n - A set of extensions to virtualenv.\n\n\nvirtualenv-api\n - An API for virtualenv and pip.\n\n\npew\n - A set of tools to manage multiple virtual environments.\n\n\nVex\n - Run a command in the named virtualenv.\n\n\nPyRun\n - A one-file, no-installation-needed version of Python.\n\n\n\n\nPackage Management\n\n\nLibraries for package and dependency management.\n\n\n\n\npip\n - The Python package and dependency manager.\n\n\nPython Package Index\n\n\n\n\n\n\nconda\n - Cross-platform, Python-agnostic binary package manager.\n\n\nCurdling\n - Curdling is a command line tool for managing Python packages.\n\n\nwheel\n - The new standard of Python distribution and are intended to replace eggs.\n\n\n\n\nPackage Repositories\n\n\nLocal PyPI repository server and proxies.\n\n\n\n\nwarehouse\n - Next generation Python Package Repository (PyPI).\n\n\nWarehouse\n\n\n\n\n\n\ndevpi\n - PyPI server and packaging/testing/release tool.\n\n\nlocalshop\n - PyPI server which mirrors official packages on-demand, and also supports local (private) package uploads.\n\n\n\n\nDistribution\n\n\nLibraries to create packaged executables for release distribution.\n\n\n\n\ncx-Freeze\n - Freezes Python scripts (cross-platform).\n\n\npy2exe\n - Freezes Python scripts (Windows).\n\n\npynsist\n - A tool to build Windows installers, installers bundle Python itself.\n\n\npy2app\n - Freezes Python scripts (Mac OS X).\n\n\nPyInstaller\n - Converts Python programs into stand-alone executables (cross-platform).\n\n\ndh-virtualenv\n - Build and distribute a virtualenv as a Debian package.\n\n\nNuitka\n - Compile scripts, modules, packages to an executable or extension module.\n\n\n\n\nBuild Tools\n\n\nCompile software from source code.\n\n\n\n\nbuildout\n - A build system for creating, assembling and deploying applications from multiple parts, some of which may be non-Python-based.\n\n\nSCons\n - A software construction tool.\n\n\nPlatformIO\n - A console tool to build code with different development platforms.\n\n\nBitBake\n - A make-like build tool with the special focus of distributions and packages for embedded Linux.\n\n\nfabricate\n - A build tool that finds dependencies automatically for any language.\n\n\n\n\nInteractive Interpreter\n\n\nInteractive Python interpreters.\n\n\n\n\nIPython\n - A rich toolkit to help you make the most out of using Python interactively.\n\n\nbpython\n \u2013 A fancy interface to the Python interpreter.\n\n\npython-prompt-toolkit\n - A Library for building powerful interactive command lines.\n\n\n\n\nFiles\n\n\nLibraries for file manipulation and MIME type detection.\n\n\n\n\nmimetypes\n - (Python standard library) Map filenames to MIME types.\n\n\nimghdr\n - (Python standard library) Determine the type of an image.\n\n\npython-magic\n - A Python interface to the libmagic file type identification library.\n\n\npath.py\n - A module wrapper for \nos.path\n.\n\n\nwatchdog\n - API and shell utilities to monitor file system events.\n\n\nUnipath\n - An object-oriented approach to file/directory operations.\n\n\npathlib\n - (Python standard library in Python 3.4+) An cross-platform, object-oriented path library.\n\n\n\n\nDate and Time\n\n\nLibraries for working with dates and times.\n\n\n\n\narrow\n - Better dates \n times for Python.\n\n\nChronyk\n - A Python 3 library for parsing human-written times and dates.\n\n\ndateutil\n - Extensions to the standard Python \ndatetime\n module.\n\n\ndelorean\n - A library for clearing up the inconvenient truths that arise dealing with datetimes.\n\n\nwhen.py\n - Providing user-friendly functions to help perform common date and time actions.\n\n\nmoment\n - A Python library for dealing with dates/times. Inspired by \nMoment.js\n.\n\n\npytz\n - World timezone definitions, modern and historical. Brings the \ntz database\n into Python.\n\n\n\n\nText Processing\n\n\nLibraries for parsing and manipulating plain texts.\n\n\n\n\nGeneral\n\n\ndifflib\n - (Python standard library) Helpers for computing deltas.\n\n\nLevenshtein\n - Fast computation of Levenshtein distance and string similarity.\n\n\nfuzzywuzzy\n - Fuzzy String Matching.\n\n\nesmre\n - Regular expression accelerator.\n\n\nshortuuid\n - A generator library for concise, unambiguous and URL-safe UUIDs.\n\n\nftfy\n - Makes Unicode text less broken and more consistent automagically.\n\n\nunidecode\n - ASCII transliterations of Unicode text.\n\n\nchardet\n - Python 2/3 compatible character encoding detector.\n\n\nxpinyin\n - A library to translate Chinese hanzi (\u6f22\u5b57) to pinyin (\u62fc\u97f3).\n\n\npangu.py\n - Spacing texts for CJK and alphanumerics.\n\n\npyfiglet\n - An implementation of figlet written in Python.\n\n\nuniout\n - Print readable chars instead of the escaped string.\n\n\n\n\n\n\nSlugify\n\n\nawesome-slugify\n - A Python slugify library that can preserve unicode.\n\n\npython-slugify\n - A Python slugify library that translates unicode to ASCII.\n\n\nunicode-slugify\n - A slugifier that generates unicode slugs with Django as a dependency.\n\n\n\n\n\n\nParser\n\n\nPLY\n - Implementation of lex and yacc parsing tools for Python\n\n\nphonenumbers\n - Parsing, formatting, storing and validating international phone numbers.\n\n\npython-user-agents\n - Browser user agent parser.\n\n\nsqlparse\n - A non-validating SQL parser.\n\n\nPygments\n - A generic syntax highlighter.\n\n\npython-nameparser\n - Parsing human names into their individual components.\n\n\npyparsing\n - A general purpose framework for generating parsers.\n\n\n\n\n\n\n\n\nSpecific Formats Processing\n\n\nLibraries for parsing and manipulating specific text formats.\n\n\n\n\nGeneral\n\n\ntablib\n - A module for Tabular Datasets in XLS, CSV, JSON, YAML.\n\n\n\n\n\n\nOffice\n\n\npython-docx\n - Reads, queries and modifies Microsoft Word 2007/2008 docx files.\n\n\nxlwt\n / \nxlrd\n - Writing and reading data and formatting information from Excel files.\n\n\nXlsxWriter\n - A Python module for creating Excel .xlsx files.\n\n\nxlwings\n - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.\n\n\nMarmir\n - Takes Python data structures and turns them into spreadsheets.\n\n\n\n\n\n\nPDF\n\n\nPDFMiner\n - A tool for extracting information from PDF documents.\n\n\nPyPDF2\n - A library capable of splitting, merging and transforming PDF pages.\n\n\n\n\n\n\nMarkdown\n\n\nPython-Markdown\n - A Python implementation of John Gruber\u2019s Markdown.\n\n\nMistune\n - Fastest and full featured pure Python parsers of Markdown.\n\n\n\n\n\n\nYAML\n\n\nPyYAML\n - YAML implementations for Python.\n\n\n\n\n\n\nCSV\n\n\ncsvkit\n - Utilities for converting to and working with CSV.\n\n\n\n\n\n\nArchive\n\n\nunp\n - A command line tool that can unpack archives easily.\n\n\n\n\n\n\n\n\nNatural Language Processing\n\n\nLibraries for working with human languages.\n\n\n\n\nNLTK\n - A leading platform for building Python programs to work with human language data.\n\n\nPattern\n - A web mining module for the Python. It has tools for natural language processing, machine learning, among others.\n\n\nTextBlob\n - Providing a consistent API for diving into common NLP tasks. Stands on the giant shoulders of NLTK and Pattern.\n\n\njieba\n - Chinese Words Segmentation Utilities.\n\n\nSnowNLP\n - A library for processing Chinese text.\n\n\nloso\n - Another Chinese segmentation library.\n\n\ngenius\n - A Chinese segment base on Conditional Random Field.\n\n\n\n\nDocumentation\n\n\nLibraries for generating project documentation.\n\n\n\n\nSphinx\n - Python Documentation generator.\n\n\nawesome-sphinxdoc\n\n\n\n\n\n\nreStructuredText\n - Markup Syntax and Parser Component of Docutils.\n\n\nMkDocs\n - Markdown friendly documentation generator.\n\n\nPycco\n - The original quick-and-dirty, hundred-line-long, literate-programming-style documentation generator.\n\n\npdoc\n - Epydoc replacement to auto generate API documentation for Python libraries.\n\n\n\n\nConfiguration\n\n\nLibraries for storing configuration options.\n\n\n\n\nConfigParser\n - (Python standard library) INI file parser.\n\n\nConfigObj\n - INI file parser with validation.\n\n\nconfig\n - Hierarchical config from the author of \nlogging\n.\n\n\nprofig\n - Config from multiple formats with value conversion.\n\n\n\n\nCommand-line Tools\n\n\nLibraries for building command-line application.\n\n\n\n\nCommand-line Application Development\n\n\ncement\n - Cement provides a light-weight and fully featured foundation to build anything from single file scripts to complex and intricately designed applications.\n\n\nclick\n - A package for creating beautiful command line interfaces in a composable way.\n\n\nclint\n - Python Command-line Application Tools.\n\n\ncliff\n - A framework for creating command-line programs with multi-level commands.\n\n\nClime\n \u2013 Clime lets you convert any module into a multi-command CLI program without any configuration.\n\n\ndocopt\n - Pythonic command line arguments parser.\n\n\ncolorama\n - Cross-platform colored terminal text.\n\n\npyCLI\n - Command-line applications supporting standard command line parsing, logging, unit and functional testing.\n\n\nGooey\n - Turn command line programs into a full GUI application with one line\n\n\n\n\n\n\nProductivity Tools\n\n\ncookiecutter\n - A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.\n\n\nhttpie\n - A command line HTTP client, a user-friendly cURL replacement.\n\n\npercol\n - Adds flavor of interactive selection to the traditional pipe concept on UNIX.\n\n\nRainbowStream\n - Smart and nice Twitter client on terminal.\n\n\ncaniusepython3\n - Determine what projects are blocking you from porting to Python 3.\n\n\n\n\n\n\n\n\nDownloader\n\n\nLibraries for downloading.\n\n\n\n\ns3cmd\n - A command line tool for managing Amazon S3 and CloudFront.\n\n\nyoutube-dl\n - A small command-line program to download videos from YouTube.\n\n\nyou-get\n - A YouTube/Youku/Niconico video downloader written in Python 3.\n\n\ncoursera\n - Script for downloading Coursera.org videos and naming them.\n\n\nWikiTeam\n - Tools for downloading and preserving wikis.\n\n\nsubliminal\n - Library and command line tool to search and download subtitles.\n\n\n\n\nImagery\n\n\nLibraries for manipulating images.\n\n\n\n\npillow\n - Pillow is the friendly \nPIL\n fork.\n\n\nwand\n - Python bindings for \nMagickWand\n, C API for ImageMagick.\n\n\nthumbor\n - A smart imaging service. It enables on-demand crop, resizing and flipping of images.\n\n\nimgSeek\n - A project for searching a collection of images using visual similarity.\n\n\npython-qrcode\n - A pure Python QR Code generator.\n\n\npyBarcode\n - Create barcodes in Python without needing PIL.\n\n\npygram\n - Instagram-like image filters.\n\n\nQuads\n - Computer art based on quadtrees.\n\n\nnude.py\n - Nudity detection.\n\n\nscikit-image\n - A Python library for (scientific) image processing.\n\n\nhmap\n - Image histogram remapping.\n\n\n\n\nOCR\n\n\nLibraries for Optical Character Recognition.\n\n\n\n\n[python-tesseract] (https://code.google.com/p/python-tesseract) - A wrapper class for \nGoogle Tesseract OCR\n.\n\n\npytesseract\n - Another wrapper for Google Tesseract OCR. \n\n\npyocr\n - A wrapper for Tesseract and Cuneiform.\n\n\n\n\nAudio\n\n\nLibraries for manipulating audio.\n\n\n\n\naudiolazy\n - Expressive Digital Signal Processing (DSP) package for Python.\n\n\naudioread\n - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.\n\n\nbeets\n - A music library manager and \nMusicBrainz\n tagger.\n\n\ndejavu\n - Audio fingerprinting and recognition.\n\n\ndjango-elastic-transcoder\n - Django + \nAmazon Elastic Transcoder\n.\n\n\neyeD3\n - A tool for working with audio files, specifically MP3 files containing ID3 metadata.\n\n\nid3reader\n - A Python module for reading MP3 meta data.\n\n\nmutagen\n - A Python module to handle audio metadata.\n\n\npydub\n - Manipulate audio with a simple and easy high level interface.\n\n\npyechonest\n - Python client for the \nEcho Nest\n API.\n\n\ntalkbox\n - A Python library for speech/signal processing.\n\n\nTimeSide\n - Open web audio processing framework.\n\n\ntinytag\n - A library for reading music meta data of MP3, OGG, FLAC and Wave files.\n\n\nm3u8\n - A module for parsing m3u8 file.\n\n\n\n\nVideo\n\n\nLibraries for manipulating video and GIFs.\n\n\n\n\nmoviepy\n - A module for script-based movie editing with many formats, including animated GIFs.\n\n\nshorten.tv\n - Video summarization.\n\n\nscikit-video\n - Video processing routines for SciPy.\n\n\n\n\nGeolocation\n\n\nLibraries for geocoding addresses and working with latitudes and longitudes.\n\n\n\n\nGeoDjango\n - A world-class geographic web framework.\n\n\ngeopy\n - Python Geocoding Toolbox.\n\n\npygeoip\n - Pure Python GeoIP API.\n\n\nGeoIP\n - Python API for MaxMind GeoIP Legacy Database.\n\n\ngeojson\n - Python bindings and utlities for GeoJSON.\n\n\ndjango-countries\n - A Django app that provides country choices for use with forms, flag icons static files, and a country field for models.\n\n\n\n\nHTTP\n\n\nLibraries for working with HTTP.\n\n\n\n\nrequests\n - HTTP Requests for Humans\u2122.\n\n\ngrequests\n - requests + gevent for asynchronous HTTP requests.\n\n\nurllib3\n - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.\n\n\nhttplib2\n - Comprehensive HTTP client library.\n\n\ntreq\n - Python requests like API built on top of Twisted's HTTP client.\n\n\n\n\nDatabase\n\n\nDatabases implemented in Python.\n\n\n\n\nZODB\n - A native object database for Python. A key-value and object graph database.\n\n\npickleDB\n - A simple and lightweight key-value store for Python.\n\n\nTinyDB\n - A tiny, document-oriented database.\n\n\n\n\nDatabase Drivers\n\n\nLibraries for connecting and operating databases.\n\n\n\n\nRelational Databases\n\n\nmysql-python\n - The MySQL database connector for Python.\n\n\nmysqlclient\n - mysql-python fork supporting Python 3.\n\n\nPyMySQL\n - Pure Python MySQL driver compatible to mysql-python.\n\n\nmysql-connector-python\n - A pure Python MySQL driver from Oracle.\n\n\noursql\n - A better MySQL connector with support for native prepared statements and BLOBs.\n\n\npsycopg2\n - The most popular PostgreSQL adapter for Python.\n\n\ntxpostgres\n - Twisted based asynchronous driver for PostgreSQL.\n\n\nqueries\n - A wrapper of the psycopg2 library for interacting with PostgreSQL.\n\n\ndataset\n - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.\n\n\n\n\n\n\nNoSQL Databases\n\n\ncassandra-python-driver\n - Python driver for Cassandra.\n\n\npycassa\n - Python Thrift driver for Cassandra.\n\n\nHappyBase\n - A developer-friendly library for Apache HBase.\n\n\nPyMongo\n - The official Python client for MongoDB.\n\n\nPlyvel\n - A fast and feature-rich Python interface to LevelDB.\n\n\nredis-py\n - The Redis Python Client.\n\n\npy2neo\n - Python wrapper client for Neo4j's restful interface.\n\n\ntelephus\n - Twisted based client for Cassandra.\n\n\ntxRedis\n - Twisted based client for Redis.\n\n\n\n\n\n\n\n\nORM\n\n\nLibraries that implement Object-Relational Mapping or datamapping techniques.\n\n\n\n\nRelational Databases\n\n\nDjango Models\n - A part of Django.\n\n\nSQLAlchemy\n - The Python SQL Toolkit and Object Relational Mapper.\n\n\nawesome-sqlalchemy\n\n\n\n\n\n\npeewee\n - A small, expressive ORM.\n\n\nPonyORM\n - ORM that provides a generator-oriented interface to SQL.\n\n\n\n\n\n\nNoSQL Databases\n\n\nMongoEngine\n - A Python Object-Document-Mapper for working with MongoDB.\n\n\ndjango-mongodb-engine\n - Django MongoDB Backend.\n\n\nredisco\n - A Python Library for Simple Models and Containers Persisted in Redis.\n\n\nflywheel\n - Object mapper for Amazon DynamoDB.\n\n\n\n\n\n\nOthers\n\n\nbutterdb\n - A Python ORM for Google Drive Spreadsheets.\n\n\n\n\n\n\n\n\nWeb Frameworks\n\n\nFull stack web frameworks.\n\n\n\n\nDjango\n - The most popular web framework in Python.\n\n\nawesome-django\n\n\n\n\n\n\nFlask\n - A microframework for Python.\n\n\nawesome-flask\n\n\n\n\n\n\nBottle\n - A fast, simple and lightweight WSGI micro web-framework.\n\n\nPyramid\n - A small, fast, down-to-earth, open source Python web framework.\n\n\nweb2py\n - A full stack web framework and platform focused in the ease of use.\n\n\nweb.py\n - A web framework for Python that is as simple as it is powerful.\n\n\nTurboGears\n - The Web Framework that starts as a microframework and scales up to a fullstack solution.\n\n\nCherryPy\n - A Minimalist Python Web Framework, HTTP/1.1-compliant and WSGI thread-pooled.\n\n\nGrok\n - A framework built on the existing Zope 3 libraries.\n\n\nBluebream\n - An open-source web application server, framework and library, formerly known as Zope 3.\n\n\nguava\n - A lightweight and high performance web framework for Python written in C.\n\n\n\n\nPermissions\n\n\nLibraries that allow or deny users access to data or functionality.\n\n\n\n\ndjango-guardian\n - Implementation of per object permissions for Django 1.2+\n\n\nCarteblanche\n - Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.\n\n\n\n\nCMS\n\n\nContent Management Systems.\n\n\n\n\ndjango-cms\n - An Open source enterprise CMS based on the Django.\n\n\ndjedi-cms\n - A lightweight but yet powerful Django CMS with plugins, inline editing and performance in mind.\n\n\nFeinCMS\n - One of the most advanced Content Management Systems built on Django.\n\n\nKotte\n - A high-level, Pythonic web application framework built on Pyramid.\n\n\nMezzanine\n - A powerful, consistent, and flexible content management platform.\n\n\nOpps\n - A Django-based CMS for magazines, newspapers websites and portals with high-traffic.\n\n\nPlone\n - A CMS built on top of the open source application server Zope.\n\n\nQuokka\n - Flexible, extensible, small CMS powered by Flask and MongoDB.\n\n\nWagtail\n - A Django content management system.\n\n\nWidgy\n - Last CMS framework, based on Django.\n\n\n\n\nE-commerce\n\n\nFrameworks and libraries for e-commerce and payments.\n\n\n\n\ndjango-oscar\n - An open-source e-commerce framework for Django.\n\n\ndjango-shop\n - A Django based shop system.\n\n\nmerchant\n - A Django app to accept payments from various payment processors.\n\n\nmoney\n - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.\n\n\npython-currencies\n - Display money format and its filthy currencies.\n\n\n\n\nRESTful API\n\n\nLibraries for developing RESTful APIs.\n\n\n\n\ncornice\n - A REST framework for Pyramid.\n\n\ndjango-rest-framework\n - A powerful and flexible toolkit that makes it easy to build Web APIs.\n\n\ndjango-tastypie\n - Creating delicious APIs for Django apps.\n\n\ndjango-formapi\n - Create JSON APIs with HMAC authentication and Django form-validation.\n\n\nflask-api\n - An implementation of the same web browsable APIs that django-rest-framework provides.\n\n\nflask-restful\n - An extension for Flask that adds support for quickly building REST APIs.\n\n\nflask-restless\n - A Flask extension for generating ReSTful APIs for database models defined with SQLAlchemy (or Flask-SQLAlchemy).\n\n\nflask-api-utils\n - Flask extension that takes care of API representation and authentication.\n\n\nfalcon\n - A high-performance Python framework for building cloud APIs and web app backends.\n\n\neve\n - REST API framework powered by Flask, MongoDB and good intentions.\n\n\nsandman\n - Automated REST APIs for existing database-driven systems.\n\n\nrestless\n - Framework agnostic REST framework based on lessons learned from TastyPie.\n\n\nsavory-pie\n - REST API building library (django, and others)\n\n\n\n\nAuthentication\n\n\nLibraries for implementing authentications schemes.\n\n\n\n\nOAuth\n\n\nAuthomatic\n - Simple but powerful framework agnostic authentication/authorization client package.\n\n\nOAuthLib\n - A generic, spec-compliant, thorough implementation of the OAuth request-signing logic.\n\n\nrauth\n - A Python library for OAuth 1.0/a, 2.0, and Ofly.\n\n\npython-oauth2\n - A fully tested, abstract interface to creating OAuth clients and servers.\n\n\npython-social-auth\n - An easy-to-setup social authentication mechanism.\n\n\ndjango-oauth-toolkit\n - OAuth2 goodies for the Djangonauts.\n\n\ndjango-oauth2-provider\n - Providing OAuth2 access to Django app.\n\n\ndjango-allauth\n - Authentication app for Django that  just works. \n\n\nFlask-OAuthlib\n - OAuth 1.0/a, 2.0 implementation of client and provider for Flask.\n\n\nsanction\n - A dead simple OAuth2 client implementation.\n\n\n\n\n\n\nOthers\n\n\nPyJWT\n - Implementation of the JSON Web Token draft 01.\n\n\npython-jwt\n - Module for generating and verifying JSON Web Tokens.\n\n\npython-jws\n - Implementation of JSON Web Signatures draft 02.\n\n\njose\n - JavaScript Object Signing and Encryption draft implementation.\n\n\n\n\n\n\n\n\nTemplate Engine\n\n\nLibraries and tools for templating and lexing.\n\n\n\n\nJinja2\n - A modern and designer friendly templating language.\n\n\nGenshi\n - Python templating toolkit for generation of web-aware output.\n\n\nMako\n - Hyperfast and lightweight templating for the Python platform.\n\n\nChameleon\n - An HTML/XML template engine. Modeled after ZPT, optimized for speed.\n\n\nSpitfire\n - A very fast Python template compiler.\n\n\n\n\nQueue\n\n\nLibraries for working with event and task queues.\n\n\n\n\ncelery\n - An asynchronous task queue/job queue based on distributed message passing.\n\n\nhuey\n - Little multi-threaded task queue.\n\n\nmrq\n - Mr. Queue - A distributed worker task queue in Python using Redis \n gevent.\n\n\nrq\n - Simple job queues for Python.\n\n\nsimpleq\n - A simple, infinitely scalable, Amazon SQS based queue.\n\n\n\n\nSearch\n\n\nLibraries and software for indexing and performing search queries on data.\n\n\n\n\ndjango-haystack\n - Modular search for Django.\n\n\nelasticsearch-py\n - The official low-level Python client for \nElasticsearch\n.\n\n\nsolrpy\n - A Python client for \nsolr\n.\n\n\nWhoosh\n - A fast, pure Python search engine library.\n\n\n\n\nNews Feed\n\n\nLibraries for building user's activities.\n\n\n\n\nFeedly\n - A library to build newsfeed and notification systems using Cassandra and Redis.\n\n\ndjango-activity-stream\n - Generate generic activity streams from the actions on your site.\n\n\n\n\nAsset Management\n\n\nTools for managing, compressing and minifying website assets.\n\n\n\n\ndjango-compressor\n - Compresses linked and inline javascript or CSS into a single cached file.\n\n\njinja-assets-compressor\n - A Jinja extension to compile and compress your assets.\n\n\nwebassets\n - Bundles, optimizes, and manages unique cache-busting URLs for static resources.\n\n\nfanstatic\n - Packages, optimizes, and serves static file dependencies as Python packages.\n\n\nfileconveyor\n - Monitors changes, processes, and transports assets to CDNs and file storage systems.\n\n\ndjango-storages\n - A collection of custom storage backends for Django.\n\n\nglue\n - Glue is a simple command line tool to generate CSS sprites.\n\n\nlibsass-python\n - A Python binding of \nlibsass\n, the reference implementation of SASS/SCSS.\n\n\nFlask-Assets\n - Helps you integrate webassets into your Flask app.\n\n\n\n\nCaching\n\n\nLibraries for caching data.\n\n\n\n\nBeaker\n - A library for caching and sessions for use with web applications and stand-alone Python scripts and applications.\n\n\ndogpile.cache\n - dogpile.cache is next generation replacement for Beaker made by same authors.\n\n\nHermesCache\n - Python caching library with tag-based invalidation and dogpile effect prevention.\n\n\ndjango-cache-machine\n - Automatic caching and invalidation for Django models through the ORM.\n\n\ndjango-cacheops\n - A slick ORM cache with automatic granular event-driven invalidation.\n\n\njohnny-cache\n - A caching framework for django applications.\n\n\ndjango-viewlet\n - Render template parts with extended cache control.\n\n\npylibmc\n - A Python wrapper around the \nlibmemcached\n interface.\n\n\n\n\nEmail\n\n\nLibraries for sending and parsing email.\n\n\n\n\ninbox.py\n - Python SMTP Server for Humans.\n\n\nimbox\n - Python IMAP for Humans.\n\n\ninbox\n - The open source email toolkit.\n\n\nlamson\n - Pythonic SMTP Application Server.\n\n\nflanker\n - A email address and Mime parsing library.\n\n\nmarrow.mailer\n - High-performance extensible mail delivery framework.\n\n\ndjango-celery-ses\n - Django email backend with AWS SES and Celery.\n\n\nmodoboa\n - A mail hosting and management platform including a modern and simplified Web UI.\n\n\nenvelopes\n - Mailing for human beings.\n\n\nmailjet\n - Mailjet API implementation for batch mailing, statistics and more.\n\n\nTalon\n - Mailgun library to extract message quotations and signatures.\n\n\npyzmail\n - Compose, send and parse emails.\n\n\n\n\nInternationalization\n\n\nLibraries for woking with i18n.\n\n\n\n\nBabel\n - An internationalization library for Python.\n\n\nKorean\n - A library for \nKorean\n morphology.\n\n\n\n\nURL Manipulation\n\n\nLibraries for parsing URLs.\n\n\n\n\nfurl\n - A small Python library that makes manipulating URLs simple.\n\n\npurl\n - A simple, immutable URL class with a clean API for interrogation and manipulation.\n\n\npyshorteners\n - A pure Python URL shortening lib.\n\n\nshort_url\n - Python implementation for generating Tiny URL and bit.ly-like URLs.\n\n\nwebargs\n - A friendly library for parsing HTTP request arguments, with built-in support for popular web frameworks, including Flask, Django, Bottle, Tornado, and Pyramid.\n\n\n\n\nHTML Manipulation\n\n\nLibraries for working with HTML and XML.\n\n\n\n\nBeautifulSoup\n - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.\n\n\nlxml\n - A very fast, easy-to-use and versatile library for handling HTML and XML.\n\n\nhtml5lib\n - A standards-compliant library for parsing and serializing HTML documents and fragments.\n\n\npyquery\n - A jQuery-like library for parsing HTML.\n\n\ncssutils\n - A CSS library for Python.\n\n\nMarkupSafe\n - Implements a XML/HTML/XHTML Markup safe string for Python.\n\n\nbleach\n - A whitelist-based HTML sanitization and text linkification library.\n\n\nxmltodict\n - Working with XML feel like you are working with JSON.\n\n\nxhtml2pdf\n - HTML/CSS to PDF converter.\n\n\nuntangle\n - Converts XML documents to Python objects for easy access.\n\n\n\n\nWeb Crawling\n\n\nLibraries for scraping websites.\n\n\n\n\nScrapy\n - A fast high-level screen scraping and web crawling framework.\n\n\nportia\n - Visual scraping for Scrapy.\n\n\nfeedparser\n - Universal feed parser.\n\n\nRoboBrowser\n - A simple, Pythonic library for browsing the web without a standalone web browser.\n\n\nMechanicalSoup\n - A Python library for automating interaction with websites.\n\n\nmechanize\n - Stateful programmatic web browsing.\n\n\nDemiurge\n - PyQuery-based scraping micro-framework.\n\n\ncola\n - A distributed crawling framework.\n\n\npyspider\n - A powerful spider system.\n\n\n\n\nWeb Content Extracting\n\n\nLibraries for extracting web contents.\n\n\n\n\nnewspaper\n - News extraction, article extraction and content curation in Python.\n\n\nhtml2text\n - Convert HTML to Markdown-formatted text.\n\n\npython-goose\n - HTML Content/Article Extractor.\n\n\nlassie\n - Web Content Retrieval for Humans.\n\n\nmicawber\n - A small library for extracting rich content from URLs.\n\n\nsumy\n - A module for automatic summarization of text documents and HTML pages.\n\n\nHaul\n - An Extensible Image Crawler.\n\n\npython-readability\n - Fast Python port of arc90's readability tool.\n\n\nopengraph\n - A Python module to parse the Open Graph Protocol\n\n\ntextract\n - Extract text from any document, Word, PowerPoint, PDFs, etc.\n\n\nsanitize\n - Bringing sanity to world of messed-up data.\n\n\n\n\nForms\n\n\nLibraries for working with forms.\n\n\n\n\nWTForms\n - A flexible forms validation and rendering library.\n\n\nWTForms-JSON\n - A WTForms extension for JSON data handling.\n\n\nDeform\n - Python HTML form generation library influenced by the formish form generation library.\n\n\ndjango-bootstrap3\n - Bootstrap 3 integration with Django.\n\n\ndjango-crispy-forms\n - A Django app which lets you create beautiful forms in a very elegant and DRY way.\n\n\ndjango-remote-forms\n - A platform independent Django form serializer.\n\n\n\n\nData Validation\n\n\nLibraries for validating data. Used for forms in many cases.\n\n\n\n\nvoluptuous\n - A Python data validation library. It is primarily intended for validating data coming into Python as JSON, YAML, etc.\n\n\ncolander\n - A system for validating and deserializing data obtained via XML, JSON, an HTML form post or any other equally simple data serialization.\n\n\nschema\n - A library for validating Python data structures.\n\n\nSchematics\n - Data Structure Validation.\n\n\nkmatch\n - A language for matching/validating/filtering Python dictionaries.\n\n\nvalideer\n - Lightweight extensible data validation and adaptation library.\n\n\n\n\nAnti-spam\n\n\nLibraries for fighting spam.\n\n\n\n\nStopspam\n - Intelligent spam detection for Python.\n\n\ndjango-simple-spam-blocker\n - Simple spam blocker for Django.\n\n\ndjango-simple-captcha\n - A simple and highly customizable Django app to add captcha images to any Django form.\n\n\n\n\nTagging\n\n\nLibraries for tagging items.\n\n\n\n\ndjango-taggit\n - Simple tagging for Django.\n\n\n\n\nAdmin Panels\n\n\nLibraries for administrative interfaces.\n\n\n\n\nAjenti\n - The admin panel your servers deserve.\n\n\nGrappelli\n \u2013 A jazzy skin for the Django Admin-Interface.\n\n\ndjango-suit\n - Alternative Django Admin-Interface (free only for Non-commercial use).\n\n\ndjango-xadmin\n - Drop-in replacement of Django admin comes with lots of goodies.\n\n\nflask-admin\n - Simple and extensible administrative interface framework for Flask.\n\n\nflower\n - Real-time monitor and web admin for Celery.\n\n\n\n\nStatic Site Generator\n\n\nStatic site generator is a software that takes some text + templates as input and produces html files on the output.\n\n\n\n\nPelican\n - Uses Markdown or ReST for content and Jinja 2 for themes. Supports DVCS, Disqus. AGPL.\n\n\nCactus\n \u2013 Static site generator for designers.\n\n\nHyde\n - Jinja2-based static web site generator.\n\n\nNikola\n - A static website and blog generator.\n\n\nTags\n - The simplest static site generator.\n\n\nTinkerer\n - Tinkerer is a blogging engine/.static website generator powered by Sphinx.\n\n\n\n\nProcesses and Threads\n\n\nLibraries for woking with processes or threads\n\n\n\n\nmultiprocessing\n - (Python standard library) Process-based  threading  interface.\n\n\nthreading\n - (Python standard library) Higher-level threading interface.\n\n\nenvoy\n - Python Subprocesses for Humans\u2122.\n\n\nsh\n - A full-fledged \nsubprocess\n replacement for Python.\n\n\nsarge\n - A wrapper for subprocess.\n\n\n\n\nConcurrency and Networking\n\n\nLibraries for concurrency and network programming.\n\n\n\n\nasyncio\n - (Python standard library in Python 3.4+) Asynchronous I/O, event loop, coroutines and tasks.\n\n\ngevent\n - A coroutine-based Python networking library that uses \ngreenlet\n.\n\n\nTwisted\n - An event-driven networking engine.\n\n\nTornado\n - A Web framework and asynchronous networking library.\n\n\npulsar\n - Event-driven concurrent framework for Python.\n\n\ndiesel\n - Greenlet-based event I/O Framework for Python.\n\n\neventlet\n - Asynchronous framework with WSGI support.\n\n\npyzmq\n - A Python wrapper for the 0MQ message library.\n\n\ntxZMQ\n - Twisted based wrapper for the 0MQ message library.\n\n\nCrossbar\n - Open-source Unified Application Router (Websocket \n WAMP for Python on Autobahn).\n\n\n\n\nWebSocket\n\n\nLibraries for woking with WebSocket.\n\n\n\n\nAutobahnPython\n - WebSocket \n WAMP for Python on Twisted and \nasyncio\n.\n\n\nWebSocket-for-Python\n - WebSocket client and server library for Python 2 and 3 as well as PyPy.\n\n\n\n\nWSGI Servers\n\n\nWSGI-compatible web servers.\n\n\n\n\nwsgiref\n - (Python standard library) WSGI reference implementation, single-threaded.\n\n\nWerkzeug\n - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.\n\n\npaste\n - Multi-threaded, stable, tried and tested.\n\n\nrocket\n - Multi-threaded.\n\n\nwaitress\n - Multi-threaded, poweres Pyramid.\n\n\nnetius\n - Asynchronous, very fast.\n\n\ngunicorn\n - Pre-forked, partly written in C.\n\n\nfapws3\n - Asynchronous (network side only), written in C.\n\n\nmeinheld\n - Asynchronous, partly written in C.\n\n\nbjoern\n - Asynchronous, very fast and written in C.\n\n\n\n\nRPC Servers\n\n\nRPC-compatible servers.\n\n\n\n\nSimpleXMLRPCServer\n - (Python standard library) Simple XML-RPC server implementation, single-threaded.\n\n\nSimpleJSONRPCServer\n - This library is an implementation of the JSON-RPC specification.\n\n\nzeroRPC\n - zerorpc is a flexible RPC implementation based on \nZeroMQ\n and \nMessagePack\n.\n\n\n\n\nCryptography\n\n\n\n\nPyCrypto\n - The Python Cryptography Toolkit.\n\n\nParamiko\n - A Python (2.6+, 3.3+) implementation of the SSHv2 protocol, providing both client and server functionality.\n\n\ncryptography\n - A package designed to expose cryptographic primitives and recipes to Python developers.\n\n\nPyNacl\n - Python binding to the Networking and Cryptography (NaCl) library.\n\n\nhashids\n - Implementation of \nhashids\n in Python.\n\n\nPasslib\n - Secure password storage/hashing library, very high level.\n\n\n\n\nGUI\n\n\nLibraries for working with graphical user interface applications.\n\n\n\n\nPyQt\n - Python bindings for the \nQt\n cross-platform application and UI framework, with support for both Qt v4 and Qt v5 frameworks.\n\n\nPySide\n - Python bindings for the \nQt\n cross-platform application and UI framework, supporting the Qt v4 framework.\n\n\nwxPython\n - A blending of the wxWidgets C++ class library with the Python.\n\n\nkivy\n - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.\n\n\ncurses\n - Built-in wrapper for \nncurses\n used to create terminal GUI applications.\n\n\nurwid\n - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.\n\n\npyglet\n - A cross-platform windowing and multimedia library for Python.\n\n\nTkinter\n - Tkinter is Python's de-facto standard GUI package.\n\n\nenaml\n - Creating beautiful user-interfaces with Declaratic Syntax like QML.\n\n\nToga\n - A Python native, OS native GUI toolkit.\n\n\n\n\nGame Development\n\n\nAwesome game development libraries.\n\n\n\n\nPygame\n - Pygame is a set of Python modules designed for writing games.\n\n\nCocos2d\n - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. It is based on pyglet.\n\n\nPySDL2\n - A ctypes based wrapper for the SDL2 library.\n\n\nPanda3D\n - 3D game engine developed by Disney and maintained by Carnegie Mellon's Entertainment Technology Center. Written in C++, completely wrapped in Python.\n\n\nPyOgre\n - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.\n\n\nPyOpenGL\n - Python ctypes bindings for OpenGL and it's related APIs.\n\n\nPySFML\n - Python bindings for \nSFML\n\n\nRenPy\n - A Visual Novel engine.\n\n\n\n\nLogging\n\n\nLibraries for generating and working with log files.\n\n\n\n\nlogging\n - (Python standard library) Logging facility for Python.\n\n\nlogbook\n - Logging replacement for Python.\n\n\nSentry\n - A realtime logging and aggregation server.\n\n\nRaven\n - The Python client for Sentry.\n\n\n\n\nTesting\n\n\nLibraries for testing codebases and generating test data.\n\n\n\n\nTesting Frameworks\n\n\nunittest\n - (Python standard library) Unit testing framework.\n\n\nnose\n - nose extends unittest.\n\n\npytest\n - A mature full-featured Python testing tool.\n\n\nmamba\n - The definitive testing tool for Python. Born under the banner of BDD.\n\n\ncontexts\n - A BDD framework for Python 3.3+. Inspired by C#'s \nMachine.Specifications\n.\n\n\npyshould\n - Should style asserts based on \nPyHamcrest\n.\n\n\npyvows\n - BDD style testing for Python. Inspired by \nVows.js\n.\n\n\n\n\n\n\nWeb Testing\n\n\nSelenium\n - Python bindings for \nSelenium\n WebDriver.\n\n\nsplinter\n - Open source tool for testing web applications.\n\n\nlocust\n - Scalable user load testing tool written in Python.\n\n\nsixpack\n - A language-agnostic A/B Testing framework.\n\n\n\n\n\n\nMock\n\n\nmock\n - A Python Mocking and Patching Library for Testing.\n\n\nresponses\n - A utility library for mocking out the requests Python library.\n\n\ndoublex\n - Powerful test doubles framework for Python.\n\n\nfreezegun\n - Travel through time by mocking the datetime module.\n\n\nhttpretty\n - HTTP request mock tool for Python.\n\n\nhttmock\n - A mocking library for requests for Python 2.6+ and 3.2+.\n\n\n\n\n\n\nCode Coverage\n\n\ncoverage\n - Code coverage measurement.\n\n\n\n\n\n\nFake Data\n\n\nfaker\n - A Python package that generates fake data.\n\n\nfake2db\n - Fake database generator.\n\n\nmixer\n - Generating fake data and creating random fixtures for testing in Django ORM, SQLAlchemy, Peewee, MongoEngine, Pony ORM and etc.\n\n\nmodel_mommy\n - Creating random fixtures for testing in Django.\n\n\nForgeryPy\n - An easy to use forged data generator for Python. It's a port of \nforgery\n.\n\n\nradar\n - Generate random datetime / time.\n\n\n\n\n\n\nError Handler\n\n\nFuckIt.py\n - FuckIt.py uses state-of-the-art technology to make sure your Python code runs whether it has any right to or not.\n\n\n\n\n\n\n\n\nCode Analysis and Linter\n\n\nLibraries and tools for analysing, parsing and manipulation codebases.\n\n\n\n\nCode Analysis\n\n\npysonar2\n - A type inferencer and indexer for Python.\n\n\npycallgraph\n - A library that visualises the flow (call graph) of your Python application.\n\n\ncode2flow\n - Turn your Python and JavaScript code into DOT flowcharts.\n\n\n\n\n\n\nLinter\n\n\nFlake8\n - The modular source code checker: pep8, pyflakes and co.\n\n\npylama\n - Code audit tool for Python and JavaScript.\n\n\nPylint\n - A source code analyzer.\n\n\n\n\n\n\n\n\nDebugging Tools\n\n\nLibraries for debugging code.\n\n\n\n\npdb\n - (Python standard library) The Python Debugger.\n\n\nipdb\n - IPython-enabled pdb.\n\n\nwinpdb\n - A Platform Independent Python Debugger with GUI.\n\n\npudb\n \u2013 A full-screen, console-based Python debugger.\n\n\npyringe\n - Debugger capable of attaching to and injecting code into Python processes.\n\n\npython-statsd\n - Python Client for the \nstatsd\n server.\n\n\nmemory_profiler\n - Monitor Memory usage of Python code.\n\n\nprofiling\n - An interactive Python profiler.\n\n\ndjango-debug-toolbar\n - Display various debug information about the current request/response.\n\n\ndjango-devserver\n - A drop-in replacement for Django's runserver.\n\n\nflask-debugtoolbar\n - A port of the django-debug-toolbar to flask.\n\n\npyelftools\n - A pure-Python library for parsing and analyzing ELF files and DWARF debugging information.\n\n\n\n\nScience and Data Analysis\n\n\nLibraries for scientific computing and data analyzing.\n\n\n\n\nSciPy\n - A Python-based ecosystem of open-source software for mathematics, science, and engineering.\n\n\nNumPy\n - A fundamental package for scientific computing with Python.\n\n\nNumba\n - Python JIT (just in time) complier to LLVM aimed at scientific Python by the developers of Cython and NumPy.\n\n\nNetworkX\n - A high-productivity software for complex networks.\n\n\nPandas\n - A library providing high-performance, easy-to-use data structures and data analysis tools.\n\n\nOpen Mining\n - Business Intelligence (BI) in Python (Pandas web interface)\n\n\nPyMC\n - Markov Chain Monte Carlo sampling toolkit.\n\n\nzipline\n - A Pythonic algorithmic trading library.\n\n\nPyDy\n - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion based around NumPy, SciPy, IPython, and matplotlib.\n\n\nSymPy\n - A Python library for symbolic mathematics.\n\n\nstatsmodels\n - Statistical modeling and econometrics in Python.\n\n\nastropy\n - A community Python library for Astronomy.\n\n\norange\n - Data mining, data visualization, analysis and machine learning through visual programming or Python scripting.\n\n\nRDKit\n - Cheminformatics and Machine Learning Software.\n\n\nOpen Babel\n - A chemical toolbox designed to speak the many languages of chemical data.\n\n\ncclib\n - A library for parsing and interpreting the results of computational chemistry packages.\n\n\nBiopython\n - Biopython is a set of freely available tools for biological computation.\n\n\nbccb\n - Collection of useful code related to biological analysis.\n\n\nbcbio-nextgen\n - A toolkit providing best-practice pipelines for fully automated high throughput sequencing analysis.\n\n\nblaze\n - NumPy and Pandas interface to Big Data.\n\n\n\n\nData Visualization\n\n\nLibraries for visualizing data. See: \nawesome-javascript\n.\n\n\n\n\nmatplotlib\n - A Python 2D plotting library.\n\n\nbokeh\n - Interactive Web Plotting for Python.\n\n\nplotly\n - Collaborative web plotting for Python and matplotlib.\n\n\nvincent\n - A Python to Vega translator.\n\n\nd3py\n - A plottling library for Python, based on \nD3.js\n.\n\n\nggplot\n - Same API as ggplot2 for R.\n\n\nKartograph.py\n - Rendering beautiful SVG maps in Python.\n\n\npygal\n - A Python SVG Charts Creator.\n\n\npygraphviz\n - Python interface to \nGraphviz\n.\n\n\nPyQtGraph\n - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.\n\n\n\n\nComputer Vision\n\n\nLibraries for computer vision.\n\n\n\n\nOpenCV\n - Open Source Computer Vision Library.\n\n\nSimpleCV\n - An open source framework for building computer vision applications.\n\n\n\n\nMachine Learning\n\n\nLibraries for Machine Learning. See: \nawesome-machine-learning\n.\n\n\n\n\nscikit-learn\n - A Python module for machine learning built on top of SciPy.\n\n\npattern\n - Web mining module for Python.\n\n\nNuPIC\n - Numenta Platform for Intelligent Computing.\n\n\nPylearn2\n - A Machine Learning library based on \nTheano\n.\n\n\nhebel\n - GPU-Accelerated Deep Learning Library in Python.\n\n\ngensim\n - Topic Modelling for Humans.\n\n\nPyBrain\n - Another Python Machine Learning Library.\n\n\nCrab\n - A \ufb02exible, fast recommender engine.\n\n\npython-recsys\n - A Python library for implementing a Recommender System.\n\n\nvowpal_porpoise\n - A lightweight Python wrapper for \nVowpal Wabbit\n.\n\n\n\n\nMapReduce\n\n\nFramworks and libraries for MapReduce.\n\n\n\n\nPySpark\n - The Spark Python API.\n\n\ndpark\n - Python clone of Spark, a MapReduce alike framework in Python.\n\n\nluigi\n - A module that helps you build complex pipelines of batch jobs.\n\n\nmrjob\n - Run MapReduce jobs on Hadoop or Amazon Web Services.\n\n\ndumbo\n - Python module that allows one to easily write and run Hadoop programs.\n\n\nstreamparse\n - Run Python code against real-time streams of data. Integrates with \nApache Storm\n.\n\n\n\n\nFunctional Programming\n\n\nFunctional Programming with Python.\n\n\n\n\nfn.py\n - Functional programming in Python: implementation of missing features to enjoy FP.\n\n\nfuncy\n - A fancy and practical functional tools.\n\n\nToolz\n - A collection of functional utilities for iterators, functions, and dictionaries.\n\n\nCyToolz\n - Cython implementation of Toolz: High performance functional utilities.\n\n\n\n\nThird-party APIs\n\n\nLibraries for accessing third party services APIs. See: \nList of Python API Wrappers and Libraries\n.\n\n\n\n\napache-libcloud\n - One Python library for all clouds.\n\n\nboto\n - Python interface to Amazon Web Services.\n\n\ntwython\n - A Python wrapper for the Twitter API.\n\n\ngoogle-api-python-client\n - Google APIs Client Library for Python.\n\n\ngspread\n - Google Spreadsheets Python API.\n\n\nfacebook-sdk\n - Facebook Platform Python SDK.\n\n\nfacepy\n - Facepy makes it really easy to interact with Facebook's Graph API\n\n\ngmail\n - A Pythonic interface for Gmail.\n\n\ndjango-wordpress\n - WordPress models and views for Django.\n\n\n\n\nDevOps Tools\n\n\nSoftware and libraries for DevOps.\n\n\n\n\nOpenStack\n - Open source software for building private and public clouds.\n\n\nAnsible\n - A radically simple IT automation platform.\n\n\nSaltStack\n - Infrastructure automation and management system.\n\n\nFabric\n - A simple, Pythonic tool for remote execution and deployment.\n\n\nFabtools\n - Tools for writing awesome Fabric files.\n\n\ncuisine\n - Chef-like functionality for Fabric.\n\n\npsutil\n - A cross-platform process and system utilities module.\n\n\npexpect\n - Controlling interactive programs in a pseudo-terminal like GNU expect.\n\n\nprovy\n - An easy-to-use provisioning system in Python.\n\n\nhoncho\n - A Python port of \nForeman\n, a tool for managing Procfile-based applications.\n\n\ngunnery\n - Multipurpose task execution tool for distributed systems with web-based interface.\n\n\nfig\n - Fast, isolated development environments using \nDocker\n.\n\n\nhgapi\n - Pure-Python API for Mercurial.\n\n\ngitapi\n - Pure-Python API for git.\n\n\n\n\nJob Scheduler\n\n\nLibraries for scheduling jobs.\n\n\n\n\nAPScheduler\n - A light but powerful in-process task scheduler that lets you schedule functions.\n\n\ndjango-schedule\n - A calendaring app for Django.\n\n\ndoit\n - A task runner/build tool.\n\n\nJoblib\n - A set of tools to provide lightweight pipelining in Python.\n\n\nPlan\n - Writing crontab file in Python like a charm.\n\n\nSpiff\n - A powerful workflow engine implemented in pure Python.\n\n\nschedule\n - Python job scheduling for humans.\n\n\nTaskFlow\n - A Python library that helps to make task execution easy, consistent and reliable.\n\n\n\n\nForeign Function Interface\n\n\nLibraries for providing foreign function interface.\n\n\n\n\nctypes\n - (Python standard library) Foreign Function Interface for Python calling C code.\n\n\ncffi\n - Foreign Function Interface for Python calling C code.\n\n\nSWIG\n - Simplified Wrapper and Interface Generator.\n\n\nPyCUDA\n - A Python wrapper for Nvidia's CUDA API.\n\n\n\n\nHigh Performance\n\n\nLibraries for making Python faster.\n\n\n\n\nCython\n - Optimizing Static Complier for Python. Uses type mixins to compile Python into C or C++ modules resulting in large performance gains.\n\n\nPyPy\n - An implementation of Python in Python. The interpreter uses black magic to make Python very fast without having to add in additional type information.\n\n\nStackless Python\n - An enhanced version of the Python.\n\n\nPyston\n - A Python implementation built using LLVM and modern JIT techniques with the goal of achieving good performance.\n\n\n\n\nMicrosoft Windows\n\n\nPython programming on Microsoft Windows.\n\n\n\n\npythonlibs\n - Unofficial Windows(32/64-bit) binaries for Python extension packages\n\n\nPython(x,y)\n - Scientific-applications-oriented Python Distribution based on Qt and Spyder.\n\n\nspyder\n - IDE for the Python language with advanced editing, interactive testing, debugging and introspection features (also comes with Anaconda).\n\n\n\n\nNetwork Virtualization and SDN\n\n\nTools and libraries for Virtual Networking and SDN (Software Defined Networking).\n\n\n\n\nMininet\n - A popular network emulator and API written in Python.\n\n\nPOX\n - An open source development platform for Python-based Software Defined Networking (SDN) control applications, such as OpenFlow SDN controllers.\n\n\nPyretic\n - A member of the Frenetic family of SDN programming languages that provides powerful abstractions over network switches or emulators.\n\n\nSDX Platform\n - SDN based IXP implementation that leverages Mininet, POX and Pyretic.\n\n\n\n\nHardware\n\n\nLibraries for programming with hardware.\n\n\n\n\nPyUserInput\n - A module for cross-platform control of the mouse and keyboard.\n\n\nwifi\n - A Python library and command line tool for working with WiFi on Linux.\n\n\nscapy\n - A brilliant packet manipulation library.\n\n\nino\n - Command line toolkit for working with \nArduino\n.\n\n\nPyro\n - Python Robotics.\n\n\n\n\nCompatibility\n\n\nLibraries for migrating from Python 2 to 3.\n\n\n\n\nSix\n - Python 2 and 3 compatibility utilities.\n\n\nPython-Future\n - The missing compatibility layer between Python 2 and Python 3.\n\n\nPython-Modernize\n - Modernizes Python code for eventual Python 3 migration.\n\n\n\n\nMiscellaneous\n\n\nUseful libraries or tools that don't fit in the categories above.\n\n\n\n\npluginbase\n - A simple but flexible plugin system for Python.\n\n\nitsdangerous\n - Various helpers to pass trusted data to untrusted environments.\n\n\nblinker\n - A fast Python in-process signal/event dispatching system.\n\n\nPychievements\n - A framework for creating and tracking achievements.\n\n\n\n\nAlgorithms and Design Patterns\n\n\nPython implementation of algorithms and design patterns.\n\n\n\n\npython-patterns\n - A collection of design patterns in Python.\n\n\nalgorithms\n - module of algorithms for Python.\n\n\n\n\nEditor Plugins\n\n\nPlugins for editors and IDEs.\n\n\n\n\nVim\n\n\nPython-mode\n - An all in one plugin for turning Vim into a Python IDE.\n\n\nJedi-vim\n - Vim bindings for the \nJedi\n autocompletion library for Python.\n\n\nYouCompleteMe\n - Includes \nJedi\n-based completion engine for Python\n\n\n\n\n\n\nEmacs\n\n\nElpy\n - Emacs Python Development Environment.\n\n\n\n\n\n\nSublime Text\n\n\nSublimeJEDI\n - A Sublime Text plugin to the awesome autocomplete library \nJedi\n.\n\n\nAnaconda\n - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.\n\n\n\n\n\n\nAtom\n\n\nLinter\n - A static code analysis tool for Atom.\n\n\nLinter-flake8\n - An addon to \nlinter\n, that acts as an interface for \nflake8\n.\n\n\nvirtualenv\n - Atom package for virtualenv management.\n\n\n\n\n\n\n\n\nResources\n\n\nWhere to discover new Python libraries.\n\n\nWebsites\n\n\n\n\nr/Python\n - News about Python.\n\n\nPython 3 Wall of Superpowers\n - Too many popular Python packages don't support Python 3.\n\n\nTrending Python repositories on GitHub today\n - Good place to find new Python libraries.\n\n\nPython Hackers\n - List of top 400 projects in GitHub.\n\n\nCoolGithubProjects\n - Sharing cool github projects just got easier!\n\n\nFull Stack Python\n - Plain English explanations for every layer of the Python web application stack.\n\n\nDjango Packages\n - A directory of reusable apps, sites, tools, and more for Django projects.\n\n\n\n\nWeekly\n\n\n\n\nPycoder's Weekly\n\n\nPython Weekly\n\n\nImport Python Newsletter\n\n\n\n\nTwitter\n\n\n\n\n@pypi\n\n\n@planetpython\n\n\n@getpy\n\n\n@pycoders\n\n\n@PythonWeekly\n\n\n@pythontrending\n\n\n\n\nOther Awesome Lists\n\n\nList of lists.\n\n\n\n\nPython\n\n\npycrumbs\n\n\npythonidae\n\n\npython-github-projects\n\n\npython_reference\n\n\neasy-python\n\n\n\n\n\n\nMonty\n\n\nawesome-awesomeness\n\n\nlists\n\n\n\n\n\n\n\n\nContributing\n\n\nYour contributions are always welcome!\n\n\nUpcoming Event\n\n\nPyCon APAC 2015\n\n\n\n\nTutorials May 30-31, Conference June 5-7, Sprints June 8, Taipei, Taiwan\n\n\nMark your calendar now and stay up to date on the must-attend event in 2015. Join the biggest Python conference in Asia. To find more on \nhttps://tw.pycon.org/2015apac/\n.", 
            "title": "awesome_python"
        }, 
        {
            "loc": "/ref/free-programming-books/README/index.html", 
            "tags": "", 
            "text": "List of Free Learning Resources\n\n\nIntro\n\n\nIf you want to find a learning resource, you should definitely check out our site, \nFree Learning Resources\n.\nAnd for those who want to learn a computer language, you should check out these books on \nreSRC.io\n or on \ngithub\n.\nThis list initially was a clone of \nstackoverflow - List of Freely Available Programming Books\n by George Stocker. Now updated, with dead links gone and new content.\n\n\nMoved to GitHub for collaborative updating and for the site mentioned above.\n\n\nNEW : Search inside free-programming-books.md (and a whole lot more of learning resources)\n\n\nresrc.io/search\n\n\nHow To Contribute\n\n\nIt's \neasy\n. Please read \nCONTRIBUTING\n.\n- \nFork\n\n- Read the \nTODO\n file(Adding new books is our #1 priority, but things like Alphabetizing are important, too.)\n- \nEdit\n (we prefer multiple small commits rather than one large change)\n- \nSend a PR\n\n- Be part of a project starred by over 35,000\n\n\nAgain, unlike other projects, we prefer multiple small commits rather than one large change in a pull request - it's fine to have one PR, but please make sure your title reflects what you're changing\n, thanks.\n\n\nHow to Share\n\n\n\n\nShare on Twitter\n\n\nShare on Facebook\n\n\nShare on Google Plus\n\n\nShare on LinkedIn\n\n\n\n\nIn Other Spoken Languages\n\n\n\n\nAzerbaijan: \ngithub\n\n\nBulgarian: \ngithub\n\n\nChinese: \ngithub\n\n\nCzech: \ngithub\n\n\nFrench: \ngithub\n or \nsite\n.\n    The French list was based on \nthis\n page.\n\n\nGerman: \ngithub\n\n\nGreek: \ngithub\n\n\nHungarian: \ngithub\n\n\nIndonesian : \ngithub\n\n\nItalian: \ngithub\n\n\nJapanese: \ngithub\n\n\nKorean: \ngithub\n\n\nPersian/Farsi (Iran): \ngithub\n\n\nPolish: \ngithub\n\n\nPortuguese (Brazil): \ngithub\n\n\nPortuguese (Portugal): \ngithub\n\n\nRomanian (Romania): \ngithub\n\n\nRussian: \ngithub\n\n\nSlovak: \ngithub\n\n\nSpanish: \ngithub\n\n\nSwedish: \ngithub\n\n\nTurkish: \ngithub\n\n\nUkrainian: \ngithub\n\n\n\n\nNoticeable lists from \nreSRC\n\n\n\n\nFree JavaScript frameworks resources and tutorials: \ngithub\n or \nsite\n\n\n\n\nInteractive Programming Resources\n\n\n\n\nFree interactive programming tutorials: \ngithub\n or \nsite\n\n\n\n\nPodcast - Screencast\n\n\nFree Podcasts and Screencasts:\n\n\n\n\nCzech: \ngithub\n\n\nEnglish: \ngithub\n\n\n\n\nSoftware Testing Books\n\n\n\n\nFree ebooks about software testing", 
            "title": "free_programming_book"
        }, 
        {
            "loc": "/ref/Git-Cheat-Sheet/README/index.html", 
            "tags": "", 
            "text": "Git Cheat Sheet\n\n\n\n    \n\n\n\n\n\nAvailable Languages:\n\n\n\n\nEnglish Git Cheat Sheet\n\n\nTurkish Git Cheat Sheet\n\n\nChinese Git Cheat Sheet\n\n\n\n\nGit cheat sheet saves you from learning all the commands by heart.\n\n\nBe free to contribute, update the grammar mistakes. You are also free to add your language file.", 
            "title": "git_cheat_sheet"
        }, 
        {
            "loc": "/ref/github-cheat-sheet/README/index.html", 
            "tags": "", 
            "text": "GitHub Cheat Sheet\n\n\nA collection of cool hidden and not so hidden features of Git and GitHub. This cheat sheet was inspired by \nZach Holman\n's \nGit and GitHub Secrets\n talk at Aloha Ruby Conference 2012 (\nslides\n) and his \nMore Git and GitHub Secrets\n talk at WDCNZ 2013 (\nslides\n).\n\n\nShortlink: \nhttp://git.io/sheet\n\n\nRead this in other languages: \nEnglish\n, \n\ud55c\uad6d\uc5b4\n, \n\u65e5\u672c\u8a9e\n, \n\u7b80\u4f53\u4e2d\u6587\n.\n\n\nTable of Contents\n\n\n\n\nGitHub\n\n\nIgnore Whitespace\n\n\nAdjust Tab Space\n\n\nCommit History by Author\n\n\nCloning a Repository\n\n\nBranch\n\n\nCompare all Branches to Another Branch\n\n\nComparing Branches\n\n\nCompare Branches across Forked Repositories\n\n\n\n\n\n\nGists\n\n\nGit.io\n\n\nKeyboard Shortcuts\n\n\nLine Highlighting in Repositories\n\n\nClosing Issues via Commit Messages\n\n\nCross-Link Issues\n\n\nLocking Conversations\n\n\nCI Status on Pull Requests\n\n\nSyntax Highlighting in Markdown Files\n\n\nEmojis\n\n\nImages/GIFs\n\n\nEmbedding Images in GitHub Wiki\n\n\n\n\n\n\nQuick Quoting\n\n\nPasting Clipboard Image to Comments\n\n\nQuick Licensing\n\n\nTask Lists\n\n\nTask Lists in Markdown Documents\n\n\n\n\n\n\nRelative Links\n\n\nMetadata and Plugin Support for GitHub Pages\n\n\nViewing YAML Metadata in your Documents\n\n\nRendering Tabular Data\n\n\nRevert a Pull Request\n\n\nDiffs\n\n\nRendered Prose Diffs\n\n\nDiffable Maps\n\n\nExpanding Context in Diffs\n\n\nDiff or Patch of Pull Request\n\n\nRendering and diffing images\n\n\n\n\n\n\nHub\n\n\nContributing Guidelines\n\n\nOcticons\n\n\nGitHub Resources\n\n\nGitHub Talks\n\n\n\n\n\n\nGit\n\n\nPrevious Branch\n\n\nStripspace\n\n\nChecking out Pull Requests\n\n\nEmpty Commits :trollface:\n\n\nStyled Git Status\n\n\nStyled Git Log\n\n\nGit Query\n\n\nMerged Branches\n\n\nFixup and Autosquash\n\n\nWeb Server for Browsing Local Repositories\n\n\nGit Configurations\n\n\nAliases\n\n\nAuto-Correct\n\n\nColor\n\n\n\n\n\n\nGit Resources\n\n\nGit Books\n\n\n\n\n\n\n\n\nGitHub\n\n\nIgnore Whitespace\n\n\nAdding \n?w=1\n to any diff URL will remove any changes only in whitespace, enabling you to see only that code that has changed.\n\n\n\n\nRead more about GitHub secrets.\n\n\nAdjust Tab Space\n\n\nAdding \n?ts=4\n to a diff or file URL will display tab characters as 4 spaces wide instead of the default 8. The number after \nts\n can be adjusted to suit your preference. This does not work on Gists, or raw file views, but a \nChrome\n or \nOpera  extension\n can automate this.\n\n\nHere is a Go source file before adding \n?ts=4\n:\n\n\n\n\n...and this is after adding \n?ts=4\n:\n\n\n\n\nCommit History by Author\n\n\nTo view all commits on a repo by author add \n?author={user}\n to the URL.\n\n\nhttps://github.com/rails/rails/commits/master?author=dhh\n\n\n\n\n\n\nRead more about the differences between commits views.\n\n\nCloning a Repository\n\n\nWhen cloning a repository the \n.git\n can be left off the end.\n\n\n$ git clone https://github.com/tiimgreen/github-cheat-sheet\n\n\n\n\nRead more about the Git \nclone\n command.\n\n\nBranch\n\n\nCompare all Branches to Another Branch\n\n\nIf you go to the repo's \nBranches\n page, next to the Commits button:\n\n\nhttps://github.com/{user}/{repo}/branches\n\n\n\n\n... you would see a list of all branches which are not merged into the main branch.\n\n\nFrom here you can access the compare page or delete a branch with a click of a button.\n\n\n\n\nComparing Branches\n\n\nTo use GitHub to compare branches, change the URL to look like this:\n\n\nhttps://github.com/{user}/{repo}/compare/{range}\n\n\n\n\nWhere \n{range} = master...4-1-stable\n\n\nFor example:\n\n\nhttps://github.com/rails/rails/compare/master...4-1-stable\n\n\n\n\n\n\n{range}\n can be changed to things like:\n\n\nhttps://github.com/rails/rails/compare/master@{1.day.ago}...master\nhttps://github.com/rails/rails/compare/master@{2014-10-04}...master\n\n\n\n\nDates are in the format \nYYYY-DD-MM\n\n\n\n\nBranches can also be compared in \ndiff\n and \npatch\n views:\n\n\nhttps://github.com/rails/rails/compare/master...4-1-stable.diff\nhttps://github.com/rails/rails/compare/master...4-1-stable.patch\n\n\n\n\nRead more about comparing commits across time.\n\n\nCompare Branches across Forked Repositories\n\n\nTo use GitHub to compare branches across forked repositories, change the URL to look like this:\n\n\nhttps://github.com/{user}/{repo}/compare/{foreign-user}:{branch}...{own-branch}\n\n\n\n\nFor example:\n\n\nhttps://github.com/rails/rails/compare/byroot:master...master\n\n\n\n\n\n\nGists\n\n\nGists\n are an easy way to work with small bits of code without creating a fully fledged repository.\n\n\n\n\nAdd \n.pibb\n to the end of any Gist URL (\nlike this\n) in order to get the \nHTML only\n version suitable for embedding in any other site.\n\n\nGists can be treated as a repository so they can be cloned like any other:\n\n\n$ git clone https://gist.github.com/tiimgreen/10545817\n\n\n\n\n\n\nThis means you also can modify and push updates to Gists:\n\n\n$ git commit\n$ git push\nUsername for 'https://gist.github.com': \nPassword for 'https://tiimgreen@gist.github.com': \n\n\n\n\nHowever, Gists do not support directories. All files need to be added to the repository root.\n\n\nRead more about creating Gists.\n\n\nGit.io\n\n\nGit.io\n is a simple URL shortener for GitHub.\n\n\n\n\nYou can also use it via pure HTTP using Curl:\n\n\n$ curl -i http://git.io -F \nurl=https://github.com/...\n\nHTTP/1.1 201 Created\nLocation: http://git.io/abc123\n\n$ curl -i http://git.io/abc123\nHTTP/1.1 302 Found\nLocation: https://github.com/...\n\n\n\n\nRead more about Git.io.\n\n\nKeyboard Shortcuts\n\n\nWhen on a repository page, keyboard shortcuts allow you to navigate easily.\n\n\n\n\nPressing \nt\n will bring up a file explorer.\n\n\nPressing \nw\n will bring up the branch selector.\n\n\nPressing \ns\n will focus the search field for the current repository. Pressing Backspace to delete the \u201cThis repository\u201d pill changes the field to search all of GitHub.\n\n\nPressing \nl\n will edit labels on existing Issues.\n\n\nPressing \ny\n \nwhen looking at a file\n (e.g. \nhttps://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md\n) will change your URL to one which, in effect, freezes the page you are looking at. If this code changes, you will still be able to see what you saw at that current time.\n\n\n\n\nTo see all of the shortcuts for the current page press \n?\n:\n\n\n\n\nRead more about search syntax you can use.\n\n\nLine Highlighting in Repositories\n\n\nEither adding \n#L52\n to the end of a code file URL or simply clicking the line number will highlight that line number.\n\n\nIt also works with ranges, e.g. \n#L53-L60\n, to select ranges, hold \nshift\n and click two lines:\n\n\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60\n\n\n\n\n\n\nClosing Issues via Commit Messages\n\n\nIf a particular commit fixes an issue, any of the keywords \nfix/fixes/fixed\n, \nclose/closes/closed\n or \nresolve/resolves/resolved\n, followed by the issue number, will close the issue once it is committed to the master branch.\n\n\n$ git commit -m \nFix screwup, fixes #12\n\n\n\n\n\nThis closes the issue and references the closing commit.\n\n\n\n\nRead more about closing Issues via commit messages.\n\n\nCross-Link Issues\n\n\nIf you want to link to another issue in the same repository, simply type hash \n#\n then the issue number, and it will be auto-linked.\n\n\nTo link to an issue in another repository, \n{user}/{repo}#ISSUE_NUMBER\n e.g. \ntiimgreen/toc#12\n.\n\n\n\n\nLocking Conversations\n\n\nPull Requests and Issues can now be locked by owners or collaborators of the repo.\n\n\n\n\nThis means that users who are not collaborators on the project will no longer be able to comment.\n\n\n\n\nRead more about locking conversations.\n\n\nCI Status on Pull Requests\n\n\nIf set up correctly, every time you receive a Pull Request, \nTravis CI\n will build that Pull Request just like it would every time you make a new commit. Read more about how to \nget started with Travis CI\n.\n\n\n\n\nRead more about the commit status API.\n\n\nSyntax Highlighting in Markdown Files\n\n\nFor example, to syntax highlight Ruby code in your Markdown files write:\n\n\n```ruby\nrequire 'tabbit'\ntable = Tabbit.new('Name', 'Email')\ntable.add_row('Tim Green', 'tiimgreen@gmail.com')\nputs table.to_s\n```\n\n\n\nThis will produce:\n\n\nrequire 'tabbit'\ntable = Tabbit.new('Name', 'Email')\ntable.add_row('Tim Green', 'tiimgreen@gmail.com')\nputs table.to_s\n\n\n\n\nGitHub uses \nLinguist\n to perform language detection and syntax highlighting. You can find out which keywords are valid by perusing the \nlanguages YAML file\n.\n\n\nRead more about GitHub Flavored Markdown.\n\n\nEmojis\n\n\nEmojis can be added to Pull Requests, Issues, commit messages, etc. using \n:name_of_emoji:\n\n\nThe full list of supported Emojis on GitHub can be found at \nemoji-cheat-sheet.com\n or \nscotch-io/All-Github-Emoji-Icons\n.\n\n\nThe top 5 used Emojis on GitHub are:\n\n\n\n\n:shipit:\n\n\n:sparkles:\n\n\n:-1:\n\n\n:+1:\n\n\n:clap:\n\n\n\n\nImages/GIFs\n\n\nImages and GIFs can be added to comments, READMEs etc.:\n\n\n![Alt Text](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)\n\n\n\n\nRaw images from the repo can be used by calling them directly.:\n\n\n![Alt Text](https://github.com/{user}/{repo}/raw/master/path/to/image.gif)\n\n\n\n\n\n\nAll images are cached on GitHub, so if your host goes down, the image will remain available.\n\n\nEmbedding Images in GitHub Wiki\n\n\nThere are multiple ways of embedding images in Wiki pages. There's the standard Markdown syntax (shown above). But there's also a syntax that allows things like specifying the height or width of the image:\n\n\n[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]\n\n\n\n\nWhich produces:\n\n\n\n\nQuick Quoting\n\n\nWhen on a comment thread and you want to quote something someone previously said, highlight the text and press \nr\n, this will copy it into your text box in the block-quote format.\n\n\n\n\nRead more about quick quoting.\n\n\nPasting Clipboard Image to Comments\n\n\n(Works on Chrome browsers only)\n\n\nAfter taking a screenshot and adding it to the clipboard (mac: \ncmd-ctrl-shift-4\n), you can simply paste (\ncmd-v / ctrl-v\n) the image into the comment section and it will be auto-uploaded to github.\n\n\n\n\nRead more about issue attachments.\n\n\nQuick Licensing\n\n\nWhen creating a repository, GitHub gives you the option of adding in a pre-made license:\n\n\n\n\nYou can also add them to existing repositories by creating a new file through the web interface. When the name \nLICENSE\n is typed in you will get an option to use a template:\n\n\n\n\nAlso works for \n.gitignore\n.\n\n\nRead more about open source licensing.\n\n\nTask Lists\n\n\nIn Issues and Pull requests check boxes can be added with the following syntax (notice the space):\n\n\n- [ ] Be awesome\n- [ ] Prepare dinner\n  - [ ] Research recipe\n  - [ ] Buy ingredients\n  - [ ] Cook recipe\n- [ ] Sleep\n\n\n\n\n\n\nWhen they are clicked, they will be updated in the pure Markdown:\n\n\n- [x] Be awesome\n- [ ] Prepare dinner\n  - [x] Research recipe\n  - [x] Buy ingredients\n  - [ ] Cook recipe\n- [ ] Sleep\n\n\n\n\nRead more about task lists.\n\n\nTask Lists in Markdown Documents\n\n\nIn full Markdown documents \nread-only\n checklists can now be added using the following syntax:\n\n\n- [ ] Mercury\n- [x] Venus\n- [x] Earth\n  - [x] Moon\n- [x] Mars\n  - [ ] Deimos\n  - [ ] Phobos\n\n\n\n\n\n\n[ ] Mercury\n\n\n[x] Venus\n\n\n[x] Earth\n\n\n[x] Moon\n\n\n[x] Mars\n\n\n[ ] Deimos\n\n\n[ ] Phobos\n\n\n\n\nRead more about task lists in markdown documents.\n\n\nRelative Links\n\n\nRelative links are recommended in your Markdown files when linking to internal content.\n\n\n[Link to a header](#awesome-section)\n[Link to a file](docs/readme)\n\n\n\n\nAbsolute links have to be updated whenever the URL changes (e.g. repository renamed, username changed, project forked). Using relative links makes your documentation easily stand on its own.\n\n\nRead more about relative links.\n\n\nMetadata and Plugin Support for GitHub Pages\n\n\nWithin Jekyll pages and posts, repository information is available within the \nsite.github\n namespace, and can be displayed, for example, using \n{{ site.github.project_title }}\n.\n\n\nThe Jemoji and jekyll-mentions plugins enable \nemoji\n and \n@mentions\n in your Jekyll posts and pages to work just like you'd expect when interacting with a repository on GitHub.com.\n\n\nRead more about repository metadata and plugin support for GitHub Pages.\n\n\nViewing YAML Metadata in your Documents\n\n\nMany blogging websites, like \nJekyll\n with \nGitHub Pages\n, depend on some YAML-formatted metadata at the beginning of your post. GitHub will render this metadata as a horizontal table, for easier reading\n\n\n\n\nRead more about viewing YAML metadata in your documents.\n\n\nRendering Tabular Data\n\n\nGitHub supports rendering tabular data in the form of \n.csv\n (comma-separated) and \n.tsv\n (tab-separated) files.\n\n\n\n\nRead more about rendering tabular data.\n\n\nRevert a Pull Request\n\n\nAfter a pull request is merged, you may find it does not help anything or it was a bad decision to merge the pull request. \n\n\nYou can revert it by clicking the \nRevert\n button on the right side of a commit in the pull request page to create a pull request with reverted changes to this specific pull request.\n\n\n\n\nRead more about reverting pull requests\n\n\nDiffs\n\n\nRendered Prose Diffs\n\n\nCommits and pull requests, including rendered documents supported by GitHub (e.g. Markdown), feature \nsource\n and \nrendered\n views.\n\n\n\n\nClick the  rendered  button to see the changes as they'll appear in the rendered document. Rendered prose view is handy when you're adding, removing, and editing text:\n\n\n\n\nRead more about rendered prose diffs.\n\n\nDiffable Maps\n\n\nAny time you view a commit or pull request on GitHub that includes geodata, GitHub will render a visual representation of what was changed.\n\n\n\n\nRead more about diffable maps.\n\n\nExpanding Context in Diffs\n\n\nUsing the \nunfold\n button in the gutter of a diff, you can reveal additional lines of context with a click. You can keep clicking \nunfold\n until you've revealed the whole file, and the feature is available anywhere GitHub renders diffs.\n\n\n\n\nRead more about expanding context in diffs.\n\n\nDiff or Patch of Pull Request\n\n\nYou can get the diff of a Pull Request by adding a \n.diff\n or \n.patch\n\nextension to the end of the URL. For example:\n\n\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.diff\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.patch\n\n\n\n\nThe \n.diff\n extension would give you this in plain text:\n\n\ndiff --git a/README.md b/README.md\nindex 88fcf69..8614873 100644\n--- a/README.md\n+++ b/README.md\n@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i\n - [Merged Branches](#merged-branches)\n - [Quick Licensing](#quick-licensing)\n - [TODO Lists](#todo-lists)\n+- [Relative Links](#relative-links)\n - [.gitconfig Recommendations](#gitconfig-recommendations)\n     - [Aliases](#aliases)\n     - [Auto-correct](#auto-correct)\n@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:\n - [ ] Sleep\n\n(...)\n\n\n\n\nRendering and diffing images\n\n\nGitHub can display several common image formats, including PNG, JPG, GIF, and PSD. In addition, there are several ways to compare differences between versions of those image formats.\n\n\n\n\nRead more about rendering and diffing images.\n\n\nHub\n\n\nHub\n is a command line Git wrapper that gives you extra features and commands that make working with GitHub easier.\n\n\nThis allows you to do things like:\n\n\n$ hub clone tiimgreen/toc\n\n\n\n\nCheck out some more cool commands Hub has to offer.\n\n\nContributing Guidelines\n\n\nAdding a \nCONTRIBUTING\n file to the root of your repository will add a link to your file when a contributor creates an Issue or opens a Pull Request.\n\n\n\n\nRead more about contributing guidelines.\n\n\nOcticons\n\n\nGitHubs icons (Octicons) have now been open sourced.\n\n\n\n\nRead more about GitHub's Octicons\n\n\nGitHub Resources\n\n\n\n\n\n\n\n\nTitle\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nGitHub Explore\n\n\nhttps://github.com/explore\n\n\n\n\n\n\nGitHub Blog\n\n\nhttps://github.com/blog\n\n\n\n\n\n\nGitHub Help\n\n\nhttps://help.github.com/\n\n\n\n\n\n\nGitHub Training\n\n\nhttps://training.github.com/\n\n\n\n\n\n\nGitHub Developer\n\n\nhttps://developer.github.com/\n\n\n\n\n\n\n\n\nGitHub Talks\n\n\n\n\n\n\n\n\nTitle\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nHow GitHub Uses GitHub to Build GitHub\n\n\nhttps://www.youtube.com/watch?v=qyz3jkOBbQY\n\n\n\n\n\n\nIntroduction to Git with Scott Chacon of GitHub\n\n\nhttps://www.youtube.com/watch?v=ZDR433b0HJY\n\n\n\n\n\n\nHow GitHub No Longer Works\n\n\nhttps://www.youtube.com/watch?v=gXD1ITW7iZI\n\n\n\n\n\n\nGit and GitHub Secrets\n\n\nhttps://www.youtube.com/watch?v=Foz9yvMkvlA\n\n\n\n\n\n\nMore Git and GitHub Secrets\n\n\nhttps://www.youtube.com/watch?v=p50xsL-iVgU\n\n\n\n\n\n\n\n\nGit\n\n\nPrevious Branch\n\n\nTo move to the previous branch in Git:\n\n\n$ git checkout -\n# Switched to branch 'master'\n\n$ git checkout -\n# Switched to branch 'next'\n\n$ git checkout -\n# Switched to branch 'master'\n\n\n\n\nRead more about Git branching.\n\n\nStripspace\n\n\nGit Stripspace:\n\n\n\n\nStrips trailing whitespace\n\n\nCollapses newlines\n\n\nAdds newline to end of file\n\n\n\n\nA file must be passed when calling the command, e.g.:\n\n\n$ git stripspace \n README.md\n\n\n\n\nRead more about the Git \nstripspace\n command.\n\n\nChecking out Pull Requests\n\n\nPull Requests are special branches on the GitHub repository which can be retrieved locally in several ways:\n\n\nRetrieve a specific Pull Request and store it temporarily in \nFETCH_HEAD\n for quickly \ndiff\ning or \nmerge\ning:\n\n\n$ git fetch origin refs/pull/[PR-Number]/head\n\n\n\n\nAcquire all Pull Request branches as local remote branches by refspec:\n\n\n$ git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*'\n\n\n\n\nOr setup the remote to fetch Pull Requests automatically by adding these corresponding lines in your repository's \n.git/config\n:\n\n\n[remote \norigin\n]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    url = git@github.com:tiimgreen/github-cheat-sheet.git\n\n\n\n\n[remote \norigin\n]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    url = git@github.com:tiimgreen/github-cheat-sheet.git\n    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*\n\n\n\n\nFor Fork-based Pull Request contributions, it's useful to \ncheckout\n a remote branch representing the Pull Request and create a local branch from it:\n\n\n$ git checkout pr/42 pr-42\n\n\n\n\nOr should you work on more repositories, you can globally configure fetching pull requests in the global git config instead.\n\n\ngit config --global --add remote.origin.fetch \n+refs/pull/*/head:refs/remotes/origin/pr/*\n\n\n\n\n\nThis way, you can use the following short commands in all your repositories:\n\n\ngit fetch origin\n\n\n\n\ngit checkout pr/42\n\n\n\n\nRead more about checking out pull requests locally.\n\n\nEmpty Commits :trollface:\n\n\nCommits can be pushed with no code changes by adding \n--allow-empty\n:\n\n\n$ git commit -m \nBig-ass commit\n --allow-empty\n\n\n\n\nSome use-cases for this (that make sense), include:\n\n\n\n\nAnnotating the start of a new bulk of work or a new feature.\n\n\nDocumenting when you make changes to the project that aren't code related.\n\n\nCommunicating with people using your repository.\n\n\nThe first commit of a repo, as the first commit cannot be rebased later: \ngit commit -m  init repo  --allow-empty\n.\n\n\n\n\n\n\nStyled Git Status\n\n\nRunning:\n\n\n$ git status\n\n\n\n\nProduces:\n\n\n\n\nBy adding \n-sb\n:\n\n\n$ git status -sb\n\n\n\n\nThis is produced:\n\n\n\n\nRead more about the Git \nstatus\n command.\n\n\nStyled Git Log\n\n\nRunning:\n\n\n$ git log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)\n%an\n%Creset' --abbrev-commit --date=relative\n\n\n\n\nProduces:\n\n\n\n\nCredit to \nPalesz\n\n\nThis can be aliased using the instructions found \nhere\n.\n\n\nRead more about the Git \nlog\n command.\n\n\nGit Query\n\n\nA Git query allows you to search all your previous commit messages and find the most recent one matching the query.\n\n\n$ git show :/query\n\n\n\n\nWhere \nquery\n (case-sensitive) is the term you want to search, this then finds the last one and gives details on the lines that were changed.\n\n\n$ git show :/typo\n\n\n\n\n\n\nPress \nq\n to quit.\n\n\nMerged Branches\n\n\nRunning:\n\n\n$ git branch --merged\n\n\n\n\nWill give you a list of all branches that have been merged into your current branch.\n\n\nConversely:\n\n\n$ git branch --no-merged\n\n\n\n\nWill give you a list of branches that have not been merged into your current branch.\n\n\nRead more about the Git \nbranch\n command.\n\n\nFixup and Autosquash\n\n\nIf there is something wrong with a previous commit (can be one or more from HEAD), for example \nabcde\n, run the following command after you've amended the problem:\n\n\n$ git commit --fixup=abcde\n$ git rebase abcde  --autosquash -i\n\n\n\n\nRead more about the Git \ncommit\n command.\n\n\nRead more about the Git \nrebase\n command.\n\n\nWeb Server for Browsing Local Repositories\n\n\nUse the Git \ninstaweb\n command to instantly browse your working repository in \ngitweb\n. This command is a simple script to set up \ngitweb\n and a web server for browsing the local repository.\n\n\n$ git instaweb\n\n\n\n\nOpens:\n\n\n\n\nRead more about the Git \ninstaweb\n command.\n\n\nGit Configurations\n\n\nYour \n.gitconfig\n file contains all your Git configurations.\n\n\nAliases\n\n\nAliases are helpers that let you define your own git calls. For example you could set \ngit a\n to run \ngit add --all\n.\n\n\nTo add an alias, either navigate to \n~/.gitconfig\n and fill it out in the following format:\n\n\n[alias]\n  co = checkout\n  cm = commit\n  p = push\n  # Show verbose output about tags, branches or remotes\n  tags = tag -l\n  branches = branch -a\n  remotes = remote -v\n\n\n\n\n...or type in the command-line:\n\n\n$ git config --global alias.new_alias git_function\n\n\n\n\nFor example:\n\n\n$ git config --global alias.cm commit\n\n\n\n\nFor an alias with multiple functions use quotes:\n\n\n$ git config --global alias.ac 'add -A . \n commit'\n\n\n\n\nSome useful aliases include:\n\n\n\n\n\n\n\n\nAlias\n\n\nCommand\n\n\nWhat to Type\n\n\n\n\n\n\n\n\n\n\ngit cm\n\n\ngit commit\n\n\ngit config --global alias.cm commit\n\n\n\n\n\n\ngit co\n\n\ngit checkout\n\n\ngit config --global alias.co checkout\n\n\n\n\n\n\ngit ac\n\n\ngit add . -A\n \ngit commit\n\n\ngit config --global alias.ac '!git add -A \n git commit'\n\n\n\n\n\n\ngit st\n\n\ngit status -sb\n\n\ngit config --global alias.st 'status -sb'\n\n\n\n\n\n\ngit tags\n\n\ngit tag -l\n\n\ngit config --global alias.tags 'tag -l'\n\n\n\n\n\n\ngit branches\n\n\ngit branch -a\n\n\ngit config --global alias.branches 'branch -a'\n\n\n\n\n\n\ngit cleanup\n\n\n`git branch --merged\n\n\ngrep -v '*'\n\n\n\n\n\n\ngit remotes\n\n\ngit remote -v\n\n\ngit config --global alias.remotes 'remote -v'\n\n\n\n\n\n\ngit lg\n\n\ngit log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\n%an\n%Creset' --abbrev-commit --\n\n\ngit config --global alias.lg  log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\n%an\n%Creset' --abbrev-commit -- \n\n\n\n\n\n\n\n\nSome Aliases are taken from \n@mathiasbynens\n dotfiles: https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig\n\n\nAuto-Correct\n\n\nIf you type \ngit comit\n you will get this:\n\n\n$ git comit -m \nMessage\n\n# git: 'comit' is not a git command. See 'git --help'.\n\n# Did you mean this?\n#   commit\n\n\n\n\nTo call \ncommit\n when \ncomit\n is typed, just enable auto-correct:\n\n\n$ git config --global help.autocorrect 1\n\n\n\n\nSo now you will get this:\n\n\n$ git comit -m \nMessage\n\n# WARNING: You called a Git command named 'comit', which does not exist.\n# Continuing under the assumption that you meant 'commit'\n# in 0.1 seconds automatically...\n\n\n\n\nColor\n\n\nTo add more color to your Git output:\n\n\n$ git config --global color.ui 1\n\n\n\n\nRead more about the Git \nconfig\n command.\n\n\nGit Resources\n\n\n\n\n\n\n\n\nTitle\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nOfficial Git Site\n\n\nhttp://git-scm.com/\n\n\n\n\n\n\nOfficial Git Video Tutorials\n\n\nhttp://git-scm.com/videos\n\n\n\n\n\n\nCode School Try Git\n\n\nhttp://try.github.com/\n\n\n\n\n\n\nIntroductory Reference \n Tutorial for Git\n\n\nhttp://gitref.org/\n\n\n\n\n\n\nOfficial Git Tutorial\n\n\nhttp://git-scm.com/docs/gittutorial\n\n\n\n\n\n\nEveryday Git\n\n\nhttp://git-scm.com/docs/everyday\n\n\n\n\n\n\nGit Immersion\n\n\nhttp://gitimmersion.com/\n\n\n\n\n\n\nRy's Git Tutorial\n\n\nhttp://rypress.com/tutorials/git/index.html\n\n\n\n\n\n\nGit for Designers\n\n\nhttp://hoth.entp.com/output/git_for_designers.html\n\n\n\n\n\n\nGit for Computer Scientists\n\n\nhttp://eagain.net/articles/git-for-computer-scientists/\n\n\n\n\n\n\nGit Magic\n\n\nhttp://www-cs-students.stanford.edu/~blynn/gitmagic/\n\n\n\n\n\n\nGitHub Training Kit\n\n\nhttp://training.github.com/kit\n\n\n\n\n\n\n\n\nGit Books\n\n\n\n\n\n\n\n\nTitle\n\n\nLink\n\n\n\n\n\n\n\n\n\n\nPragmatic Version Control Using Git\n\n\nhttp://www.pragprog.com/titles/tsgit/pragmatic-version-control-using-git\n\n\n\n\n\n\nPro Git\n\n\nhttp://git-scm.com/book\n\n\n\n\n\n\nGit Internals PluralSight\n\n\nhttps://github.com/pluralsight/git-internals-pdf\n\n\n\n\n\n\nGit in the Trenches\n\n\nhttp://cbx33.github.com/gitt/\n\n\n\n\n\n\nVersion Control with Git\n\n\nhttp://www.amazon.com/Version-Control-Git-collaborative-development/dp/1449316387\n\n\n\n\n\n\nPragmatic Guide to Git\n\n\nhttp://www.pragprog.com/titles/pg_git/pragmatic-guide-to-git\n\n\n\n\n\n\nGit: Version Control for Everyone\n\n\nhttp://www.packtpub.com/git-version-control-for-everyone/book", 
            "title": "github_cheat_sheet"
        }, 
        {
            "loc": "/ref/awesome/readme/index.html", 
            "tags": "", 
            "text": "Awesome\n\n\n\n\nA curated list of awesome lists\n\n\n\n\nPlatforms\n\n\n\n\nNode.js\n\n\nFrontend Development\n\n\niOS\n\n\nAndroid\n\n\nHybrid Apps\n\n\n\n\nProgramming languages\n\n\n\n\nJavaScript\n\n\nSwift\n\n\nPython\n\n\nRust\n\n\nHaskell\n\n\nGo\n\n\nScala\n\n\nRuby\n\n\nClojure\n\n\nElixir\n\n\nErlang\n\n\nJulia\n\n\nLua\n\n\nC\n\n\nC/C++\n\n\nR\n\n\nD\n\n\nCommon Lisp\n\n\nPerl\n\n\nGroovy\n\n\nDart\n\n\nJava\n\n\nOCaml\n\n\nColdfusion\n\n\nFortran\n\n\n.NET\n\n\nPHP\n\n\n\n\nFront-end development\n\n\n\n\nJavaScript Must Watch Talks\n\n\nES6 Tools\n\n\nWeb Performance Optimization\n\n\nWeb Tools\n\n\nAbove-the-fold CSS Tools\n\n\nReact\n\n\nWeb Components\n\n\nAngularJS\n\n\nBackbone\n\n\nHTML5\n\n\nSass\n\n\nSVG\n\n\nKnockoutJS\n\n\nDojo Toolkit\n\n\nInspiration\n\n\n\n\nBack-end development\n\n\n\n\nDjango\n\n\nPlay1 Framework\n\n\nCakePHP\n\n\nSymfony2\n\n\nLaravel\n\n\n\n\nComputer science\n\n\n\n\nUniversity Courses\n\n\nData Science\n\n\nMachine Learning\n\n\nSpeech and Natural Language Processing\n\n\nLinguistics\n\n\nCryptography\n\n\nComputer Vision\n\n\n\n\nBig data\n\n\n\n\nBig Data\n\n\nPublic Datasets\n\n\nHadoop\n\n\n\n\nTheory\n\n\n\n\nPapers We Love\n\n\nFree Programming Books\n\n\nTalks\n\n\nAlgorithms\n\n\nAlgorithm Visualizations\n\n\nArtificial Intelligence\n\n\n\n\nMiscellaneous\n\n\n\n\nGitHub Cheat Sheet\n\n\nGit Cheat Sheet\n\n\nTools\n\n\nGame Development\n\n\nGame Talks\n\n\nShell\n\n\nDotfiles\n\n\nDev Env\n\n\nDocker\n\n\nSublime Text\n\n\nImages\n\n\nCreative Commons Media\n\n\nDatabase\n\n\nSysadmin\n\n\nAnalytics\n\n\nVim\n\n\nEmacs\n\n\nCordova\n\n\nFree Software Testing Books\n\n\nSelenium\n\n\nServices Engineering\n\n\nAndroid Security\n\n\nVagrant\n\n\nAwesome\n\n\nConferences\n\n\nRemote Jobs\n\n\nStyleguides\n\n\nRadio\n\n\nSQLAlchemy\n\n\nPCAPTools\n\n\nContinuous Delivery\n\n\nFonts\n\n\nReadme\n\n\nScience Fiction\n\n\nBrowser Extensions for GitHub\n\n\nQuick Look Plugins\n\n\n\n\nLicense\n\n\n\n\nTo the extent possible under law, \nSindre Sorhus\n has waived all copyright and related or neighboring rights to this work.", 
            "title": "awesome"
        }, 
        {
            "loc": "/rss/linux_rss2/index.html", 
            "tags": "", 
            "text": ".loader,\n.loader:before,\n.loader:after {\n  background: #FFF;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.loader:before,\n.loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.loader:before {\n  left: -1.5em;\n}\n.loader {\n  text-indent: -9999em;\n  margin: 8em auto;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.loader:after {\n  left: 1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 #AAA;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em #AAAAAA;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 #AAA;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em #000000;\n    height: 5em;\n  }\n}\n\n\n\n\n\n\n\n\n\nvar count = 0;\nvar posts = [];\n\nvar rss = ['http://xmodulo.com/feed',\n           'http://www.unixmen.com/feed/',\n           'http://www.cyberciti.biz/feed/',\n           'http://linoxide.com/feed/',\n           'http://www.howtoforge.com/feed.rss',\n           'http://www.linuxtoday.com/biglt.rss',\n           'http://www.linuxnews.pro/feed/',\n           'http://www.linuxnix.com/feed',\n           'http://www.debianadmin.com/feed',\n           'http://feedproxy.google.com/TheGeekStuff'];\n\nfunction compare(a,b) {\n  if (a.date < b.date)\n     return 1;\n  if (a.date > b.date)\n    return -1;\n  return 0;\n}\n\nfunction render() {\n  posts.sort(compare);\n  $('#results').empty();\n  for(var i=0; i<posts.length; i++){\n    var entry = posts[i];\n    $('#results').append('<a href= ' + entry.link + ' ><b>' + entry.title + '</a></b><br/> ' +\n                         '<small>' + entry.author + ' ' + entry.publishedDate + '</small><br>' +\n                         '' + entry.contentSnippet.replace(/&lt;!--.*?--&gt;/g, '') + '<br/><br/>');\n  }\n}\n\nfunction callback(feeds) {\n  // Check for errors\n  if(!feeds){\n    return false;\n  }\n\n  for(var i=0; i<feeds.entries.length; i++){\n    var entry = feeds.entries[i];\n    entry.date = new Date(entry.publishedDate);;\n    posts.push(entry);\n  }\n\n  count = count + 1;\n  if(count == rss.length) {\n    render();\n  }\n\n}\n\nfunction run() {\n  for(var i=0; i<rss.length; i++) {\n    $.jGFeed(rss[i], callback, 20);\n  }\n}\n\nfunction run2() {\n  var list = '<div class= bs-sidebar hidden-print affix well  role= complementary ><ul class= nav bs-sidenav >' ;\n  for(var i=0; i<rss.length; i++) {\n    var r = rss[i];\n    var r2 = r.replace('http://','');\n    r2 = r2.replace('www.','');\n    var r3 = r2.split('/')[0];\n    list = list +  <li><a href=    + r +    >  + r3 +  </a></li> ;\n  }\n  list = list + '</ul></div>';\n  $('#list').empty().append(list);\n}\n\n$(document).ready(function() {\n  run();\n})\n\n\n\n\n\n\n\n  \nneed access googleapi.com, loading ...", 
            "title": "Linux RSS"
        }, 
        {
            "loc": "/rss/github_rss2/index.html", 
            "tags": "", 
            "text": ".loader,\n.loader:before,\n.loader:after {\n  background: #FFF;\n  -webkit-animation: load1 1s infinite ease-in-out;\n  animation: load1 1s infinite ease-in-out;\n  width: 1em;\n  height: 4em;\n}\n.loader:before,\n.loader:after {\n  position: absolute;\n  top: 0;\n  content: '';\n}\n.loader:before {\n  left: -1.5em;\n}\n.loader {\n  text-indent: -9999em;\n  margin: 8em auto;\n  position: relative;\n  font-size: 11px;\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n}\n.loader:after {\n  left: 1.5em;\n  -webkit-animation-delay: -0.32s;\n  animation-delay: -0.32s;\n}\n@-webkit-keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 #AAA;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em #AAAAAA;\n    height: 5em;\n  }\n}\n@keyframes load1 {\n  0%,\n  80%,\n  100% {\n    box-shadow: 0 0 #AAA;\n    height: 4em;\n  }\n  40% {\n    box-shadow: 0 -2em #000000;\n    height: 5em;\n  }\n}\n\n\n\n\n\n\n\n\n\nvar count = 0;\nvar posts = [];\n\nvar rss = ['http://github-trends.ryotarai.info/rss/github_trends_perl_daily.rss',\n 'http://github-trends.ryotarai.info/rss/github_trends_python_daily.rss',\n 'http://github-trends.ryotarai.info/rss/github_trends_javascript_daily.rss',\n 'http://github-trends.ryotarai.info/rss/github_trends_c_daily.rss',\n 'http://github-trends.ryotarai.info/rss/github_trends_bash_daily.rss',\n 'http://github-trends.ryotarai.info/rss/github_trends_all_daily.rss'\n];\n\nfunction compare(a,b) {\n  if (a.date < b.date)\n     return 1;\n  if (a.date > b.date)\n    return -1;\n  return 0;\n}\n\nfunction render() {\n  posts.sort(compare);\n  $('#results').empty();\n  for(var i=0; i<posts.length; i++){\n    var entry = posts[i];\n    $('#results').append('<a href= ' + entry.link + ' ><b>' + entry.title + '</a></b><br/> ' +\n                         '<small>' + entry.author + ' ' + entry.publishedDate + '</small><br>' +\n                         '' + entry.contentSnippet.replace(/&lt;!--.*?--&gt;/g, '') + '<br/><br/>');\n  }\n}\n\nfunction callback(feeds) {\n  // Check for errors\n  if(!feeds){\n    return false;\n  }\n  posts.length = 0;\n  for(var i=0; i<feeds.entries.length; i++){\n    var entry = feeds.entries[i];\n    entry.date = new Date(entry.publishedDate);;\n    posts.push(entry);\n  }\n  render();\n}\n\nfunction run() {\n  for(var i=0; i<rss.length; i++) {\n    $.jGFeed(rss[i], callback, 20);\n  }\n}\n\nfunction run2() {\n  var list = '<div class= bs-sidebar hidden-print affix well  role= complementary ><ul class= nav bs-sidenav >' ;\n  for(var i=0; i<rss.length; i++) {\n    var r = rss[i];\n    var r2 = r.replace('http://','');\n    r2 = r2.replace('www.','');\n    var r3 = r.split('_')[2]; r3 = r3 + '_daily';\n    list = list +  <li><a href=    + r +    >  + r3 +  </a></li> ;\n  }\n  list = list + '</ul></div>';\n  $('#list').empty().append(list);\n}\n\n$(document).ready(function() {\n  run2();\n  $('#list li a').click(function(event){\n    event.preventDefault();\n    $.jGFeed($(this).attr( href ),callback,20);\n  })\n\n})\n\n\n\n\n\n\n\n\n\n\n  \ngithub trend rss", 
            "title": "Github RSS"
        }, 
        {
            "loc": "/about/about/index.html", 
            "tags": "", 
            "text": "//   _    _      _                            _          _ _                   ____                        _ _ _\n//  | |  | |    | |                          | |        | (_)                 / ___|                      | | | |\n//  | |  | | ___| | ___ ___  _ __ ___   ___  | |_ ___   | |_ _ __  _   ___  _/ /___   ___ ___  _ __ ___   | | | |\n//  | |/ | |/ _   |/ __/ _  | '_ ` _   / _   | __/ _    | | | '_  | | |    / / ___   / __/ _  | '_ ` _    | | | |\n//     /   /  __/ | (_| (_) | | | | | |  __/ | || (_) | | | | | | | |_| |\n  \n|  _/ || (_| (_) | | | | | | |_|_|_|\n//    /   /  ___|_| ___ ___/|_| |_| |_| ___|   __ ___/  |_|_|_| |_| __,_/_/ _ _____(_)___ ___/|_| |_| |_| (_|_|_)\n//\n//\n\n\n\n\nAbout this site\n\n\nThis site is mainly for Linux beginners, to help the beginners to find Linux resources quickly and study Linux in shortest time.  \n\n\nSome articles of this site are copied and modified from other web sites. If you find some of your articles here and you don't want them copied or modified, please let me know, I will remove them from this site.  \n\n\nAny suggestions or issues for the site, you can log to \ngithub issues\n.  \n\n\nAbout the author\n\n\nI am working on Linux OS, love Linux and open source very much, and hope to help more people to study Linux!  \n\n\nmy email: \nitech001@126.com\n  \n\n\nThanks open sources\n\n\ngithub\n\n\nmkdocs\n\n\nmkdocs with search\n\n\nbootstrap\n\n\nbootstrap free theme\n\n\ntipue search\n\n\njavascript rss\n  \n\n\nThe site history\n\n\n20150101 : env/cmds/script/dev/ref/rss/search", 
            "title": "About"
        }, 
        {
            "loc": "/about/contact_form/index.html", 
            "tags": "", 
            "text": "Fill out my \nonline form\n.\n\n\n\n\nvar zigvkxh1jl86e7;(function(d, t) {\nvar s = d.createElement(t), options = {\n'userName':'itech001',\n'formHash':'zigvkxh1jl86e7',\n'autoResize':true,\n'height':'503',\n'async':true,\n'host':'wufoo.com',\n'header':'show',\n'ssl':true};\ns.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.wufoo.com/scripts/embed/form.js';\ns.onload = s.onreadystatechange = function() {\nvar rs = this.readyState; if (rs) if (rs != 'complete') if (rs != 'loaded') return;\ntry { zigvkxh1jl86e7 = new WufooForm();zigvkxh1jl86e7.initialize(options);zigvkxh1jl86e7.display(); } catch (e) {}};\nvar scr = d.getElementsByTagName(t)[0], par = scr.parentNode; par.insertBefore(s, scr);\n})(document, 'script');", 
            "title": "Contact"
        }
    ]
};
for (var i=0; i < tipuesearch.pages.length; i++){
    tipuesearch.pages[i].loc = base_url + tipuesearch.pages[i].loc;
}